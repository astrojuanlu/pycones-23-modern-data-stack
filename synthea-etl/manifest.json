{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v3.json", "dbt_version": "0.21.1", "generated_at": "2022-10-27T12:24:53.478475Z", "invocation_id": "f50e6a13-2918-4d67-8867-1378cf104964", "env": {}, "project_id": "961659b56c483c1b94b9d65233878919", "user_id": "7b29225c-1033-4572-9c60-cf2f6caa0cb6", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"model.synthea.measurement": {"raw_sql": "-- depends_on: {{ ref('visit_occurrence') }}\n\n-- OMOP table: measurement\n-- More information: https://ohdsi.github.io/ETL-Synthea/Measurement.html\n\n{{ config (\n    unique_key = 'measurement_id',\n    materialized='incremental',\n    enabled=true\n) }}\n\nwith measurement as (\n\n    select * from {{ ref('stg_measurement')}}\n\n)\nselect\n    measurement_id,\n    person_id,\n    measurement_concept_id,\n    measurement_date,\n    measurement_datetime,\n    measurement_time,\n    measurement_type_concept_id,\n    operator_concept_id,\n    value_as_number,\n    value_as_concept_id,\n    unit_concept_id,\n    range_low,\n    range_high,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    measurement_source_value,\n    measurement_source_concept_id,\n    unit_source_value,\n    unit_source_concept_id,\n    value_source_value,\n    measurement_event_id,\n    meas_event_field_concept_id\nfrom measurement", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.visit_occurrence", "model.synthea.stg_measurement"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "measurement_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "measurement"], "unique_id": "model.synthea.measurement", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/measurement.sql", "original_file_path": "models/cdm/measurement.sql", "name": "measurement", "alias": "measurement", "checksum": {"name": "sha256", "checksum": "a15160d24e7ca892835be316467a89812668be06143c843b47c5da2c1d8617ec"}, "tags": [], "refs": [["visit_occurrence"], ["stg_measurement"]], "sources": [], "description": "The MEASUREMENT table contains records of Measurement, i.e. structured values (numerical or categorical) obtained through systematic and standardized examination or testing of a Person or Person''s sample. The MEASUREMENT table contains both orders and results of such Measurements as laboratory tests, vital signs, quantitative findings from pathology reports, etc.", "columns": {"measurement_id": {"name": "measurement_id", "description": "A unique identifier for each Measurement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "A foreign key identifier to the Person about whom the measurement was recorded. The demographic details of that Person are stored in the PERSON table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "measurement_concept_id": {"name": "measurement_concept_id", "description": "A foreign key to the standard measurement concept identifier in the Standardized Vocabularies. These belong to the ''Measurement'' domain, but could overlap with the ''Observation'' domain (see", "meta": {}, "data_type": null, "quote": null, "tags": []}, "measurement_date": {"name": "measurement_date", "description": "The date of the Measurement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "measurement_datetime": {"name": "measurement_datetime", "description": "The date and time of the Measurement. Some database systems don''t have a datatype of time. To accommodate all temporal analyses, datatype datetime can be used (combining measurement_date and measurement_time [forum discussion](http://forums.ohdsi.org/t/date-time-and-datetime-problem-and-the-world-of-hours-and-1day/314))", "meta": {}, "data_type": null, "quote": null, "tags": []}, "measurement_time": {"name": "measurement_time", "description": "The time of the Measurement. This is present for backwards compatibility and will be deprecated in an upcoming version", "meta": {}, "data_type": null, "quote": null, "tags": []}, "measurement_type_concept_id": {"name": "measurement_type_concept_id", "description": "A foreign key to the predefined Concept in the Standardized Vocabularies reflecting the provenance from where the Measurement record was recorded. These belong to the ''Meas Type'' vocabulary", "meta": {}, "data_type": null, "quote": null, "tags": []}, "operator_concept_id": {"name": "operator_concept_id", "description": "A foreign key identifier to the predefined Concept in the Standardized Vocabularies reflecting the mathematical operator that is applied to the value_as_number. Operators are <, <=, =, >=, > and these concepts belong to the ''Meas Value Operator'' domain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_as_number": {"name": "value_as_number", "description": "A Measurement result where the result is expressed as a numeric value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_as_concept_id": {"name": "value_as_concept_id", "description": "A foreign key to a Measurement result represented as a Concept from the Standardized Vocabularies (e.g., positive/negative, present/absent, low/high, etc.). These belong to the ''Meas Value'' domain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_concept_id": {"name": "unit_concept_id", "description": "A foreign key to a Standard Concept ID of Measurement Units in the Standardized Vocabularies that belong to the ''Unit'' domain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "range_low": {"name": "range_low", "description": "The lower limit of the normal range of the Measurement result. The lower range is assumed to be of the same unit of measure as the Measurement value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "range_high": {"name": "range_high", "description": "The upper limit of the normal range of the Measurement. The upper range is assumed to be of the same unit of measure as the Measurement value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "provider_id": {"name": "provider_id", "description": "A foreign key to the provider in the PROVIDER table who was responsible for initiating or obtaining the measurement.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_occurrence_id": {"name": "visit_occurrence_id", "description": "A foreign key to the Visit in the VISIT_OCCURRENCE table during which the Measurement was recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_detail_id": {"name": "visit_detail_id", "description": "A foreign key to the Visit Detail in the VISIT_DETAIL table during which the Measurement was recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "measurement_source_value": {"name": "measurement_source_value", "description": "The Measurement name as it appears in the source data. This code is mapped to a Standard Concept in the Standardized Vocabularies and the original code is stored here for reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "measurement_source_concept_id": {"name": "measurement_source_concept_id", "description": "A foreign key to a Concept in the Standard Vocabularies that refers to the code used in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_source_value": {"name": "unit_source_value", "description": "The source code for the unit as it appears in the source data. This code is mapped to a standard unit concept in the Standardized Vocabularies and the original code is stored here for reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_source_value": {"name": "value_source_value", "description": "The source value associated with the content of the value_as_number or value_as_concept_id as stored in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "synthea://models/schema.yml", "compiled_path": "/tmp/target/compiled/synthea/models/cdm/measurement.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "unique_key": "measurement_id", "materialized": "incremental", "enabled": true}, "created_at": 1666873495, "compiled_sql": "-- depends_on: \"iomed\".\"cdm\".\"visit_occurrence\"\n\n-- OMOP table: measurement\n-- More information: https://ohdsi.github.io/ETL-Synthea/Measurement.html\n\n\n\nwith measurement as (\n\n    select * from \"iomed\".\"cdm_dbt\".\"stg_measurement\"\n\n)\nselect\n    measurement_id,\n    person_id,\n    measurement_concept_id,\n    measurement_date,\n    measurement_datetime,\n    measurement_time,\n    measurement_type_concept_id,\n    operator_concept_id,\n    value_as_number,\n    value_as_concept_id,\n    unit_concept_id,\n    range_low,\n    range_high,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    measurement_source_value,\n    measurement_source_concept_id,\n    unit_source_value,\n    unit_source_concept_id,\n    value_source_value,\n    measurement_event_id,\n    meas_event_field_concept_id\nfrom measurement", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm\".\"measurement\""}, "model.synthea.location": {"raw_sql": "{{ config(\n    materialized='incremental',\n    unique_key='location_id',\n\tenabled=true\n  )\n}}\n\nselect *\nfrom {{ ref('stg_location') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.stg_location"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "location_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "location"], "unique_id": "model.synthea.location", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/location.sql", "original_file_path": "models/cdm/location.sql", "name": "location", "alias": "location", "checksum": {"name": "sha256", "checksum": "bad4f210980d97008d7ea6dbeb17c9f9d0c6a821491648930d98efdebe02edaf"}, "tags": [], "refs": [["stg_location"]], "sources": [], "description": "The LOCATION table represents a generic way to capture physical location or address information of Persons and Care Sites.", "columns": {"location_id": {"name": "location_id", "description": "A unique identifier for each geographic location.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_1": {"name": "address_1", "description": "The address field 1, typically used for the street address, as it appears in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_2": {"name": "address_2", "description": "The address field 2, typically used for additional detail such as buildings, suites, floors, as it appears in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The city field as it appears in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The state field as it appears in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zip": {"name": "zip", "description": "The zip or postal code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "county": {"name": "county", "description": "The county.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_source_value": {"name": "location_source_value", "description": "The verbatim information that is used to uniquely identify the location as it appears in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "latitude": {"name": "latitude", "description": "The geocoded latitude", "meta": {}, "data_type": null, "quote": null, "tags": []}, "longitude": {"name": "longitude", "description": "The geocoded longitude", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "synthea://models/schema.yml", "compiled_path": "/tmp/target/compiled/synthea/models/cdm/location.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "materialized": "incremental", "unique_key": "location_id", "enabled": true}, "created_at": 1666873495, "compiled_sql": "\n\nselect *\nfrom \"iomed\".\"cdm_dbt\".\"stg_location\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm\".\"location\""}, "model.synthea.provider": {"raw_sql": "{{\nconfig(\n    unique_key='provider_id',\n    materialized='incremental',\n\tenabled=true\n  )\n}}\n\nwith provider as (\n\n    select * from {{ ref('stg_provider')}}\n\n)\nselect\n    provider_id,\n    provider_name,\n    npi,\n    dea,\n    specialty_concept_id,\n    care_site_id,\n    year_of_birth,\n    gender_concept_id,\n    provider_source_value,\n    specialty_source_value,\n    specialty_source_concept_id,\n    gender_source_value,\n    gender_source_concept_id\nfrom provider", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.stg_provider"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "provider_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "provider"], "unique_id": "model.synthea.provider", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/provider.sql", "original_file_path": "models/cdm/provider.sql", "name": "provider", "alias": "provider", "checksum": {"name": "sha256", "checksum": "2e695837efe456c891024c237552ffcb84fbd54539f179247443e144e3af9ce1"}, "tags": [], "refs": [["stg_provider"]], "sources": [], "description": "The PROVIDER table contains a list of uniquely identified healthcare providers. These are individuals providing hands-on healthcare to patients, such as physicians, nurses, midwives, physical therapists etc.", "columns": {"provider_id": {"name": "provider_id", "description": "A unique identifier for each Provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "provider_name": {"name": "provider_name", "description": "A description of the Provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "npi": {"name": "npi", "description": "The National Provider Identifier (NPI) of the provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dea": {"name": "dea", "description": "The Drug Enforcement Administration (DEA) number of the provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specialty_concept_id": {"name": "specialty_concept_id", "description": "A foreign key to a Standard Specialty Concept ID in the Standardized Vocabularies.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "care_site_id": {"name": "care_site_id", "description": "A foreign key to the main Care Site where the provider is practicing.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year_of_birth": {"name": "year_of_birth", "description": "The year of birth of the Provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender_concept_id": {"name": "gender_concept_id", "description": "The gender of the Provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "provider_source_value": {"name": "provider_source_value", "description": "The identifier used for the Provider in the source data, stored here for reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specialty_source_value": {"name": "specialty_source_value", "description": "The source code for the Provider specialty as it appears in the source data, stored here for reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specialty_source_concept_id": {"name": "specialty_source_concept_id", "description": "A foreign key to a Concept that refers to the code used in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender_source_value": {"name": "gender_source_value", "description": "The gender code for the Provider as it appears in the source data, stored here for reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender_source_concept_id": {"name": "gender_source_concept_id", "description": "A foreign key to a Concept that refers to the code used in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "synthea://models/schema.yml", "compiled_path": "/tmp/target/compiled/synthea/models/cdm/provider.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "unique_key": "provider_id", "materialized": "incremental", "enabled": true}, "created_at": 1666873495, "compiled_sql": "\n\nwith provider as (\n\n    select * from \"iomed\".\"cdm_dbt\".\"stg_provider\"\n\n)\nselect\n    provider_id,\n    provider_name,\n    npi,\n    dea,\n    specialty_concept_id,\n    care_site_id,\n    year_of_birth,\n    gender_concept_id,\n    provider_source_value,\n    specialty_source_value,\n    specialty_source_concept_id,\n    gender_source_value,\n    gender_source_concept_id\nfrom provider", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm\".\"provider\""}, "model.synthea.death": {"raw_sql": "-- OMOP table: death\n-- More information:  https://ohdsi.github.io/CommonDataModel/cdm54.html#DEATH\n\n\n-- session_replication_role TO 'replica' to avoid checking FK restrictions to\n-- allow the deletion of already existing person_id (due to incremental materialization)\n\n{{\nconfig(\n  unique_key='person_id',\n  materialized='incremental',\n  enabled=true\n  )\n}}\n\nwith death as (\n\n    select * from {{ ref('stg_death') }}\n\n)\nselect\n    person_id,\n    death_date,\n    death_datetime,\n    death_type_concept_id,\n    cause_concept_id,\n    cause_source_value,\n    cause_source_concept_id\nfrom death", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.stg_death"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "person_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "death"], "unique_id": "model.synthea.death", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/death.sql", "original_file_path": "models/cdm/death.sql", "name": "death", "alias": "death", "checksum": {"name": "sha256", "checksum": "e41bfb350cf705d808dae621e6669fff6cfc3c5a48a28afc5052ec58eed605c8"}, "tags": [], "refs": [["stg_death"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/cdm/death.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "unique_key": "person_id", "materialized": "incremental", "enabled": true}, "created_at": 1666873494, "compiled_sql": "-- OMOP table: death\n-- More information:  https://ohdsi.github.io/CommonDataModel/cdm54.html#DEATH\n\n\n-- session_replication_role TO 'replica' to avoid checking FK restrictions to\n-- allow the deletion of already existing person_id (due to incremental materialization)\n\n\n\nwith death as (\n\n    select * from \"iomed\".\"cdm_dbt\".\"stg_death\"\n\n)\nselect\n    person_id,\n    death_date,\n    death_datetime,\n    death_type_concept_id,\n    cause_concept_id,\n    cause_source_value,\n    cause_source_concept_id\nfrom death", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm\".\"death\""}, "model.synthea.care_site": {"raw_sql": "{{ config(\n    materialized='incremental',\n    unique_key='care_site_id',\n\tenabled=true\n  )\n}}\n\nselect *\nfrom {{ ref('stg_care_site') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.stg_care_site"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "care_site_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "care_site"], "unique_id": "model.synthea.care_site", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/care_site.sql", "original_file_path": "models/cdm/care_site.sql", "name": "care_site", "alias": "care_site", "checksum": {"name": "sha256", "checksum": "304980a8fff57b26e3f79206796c47ab7a3b1013770d8f513b8dac2f6325fa6c"}, "tags": [], "refs": [["stg_care_site"]], "sources": [], "description": "The CARE_SITE table contains a list of uniquely identified institutional (physical or organizational) units where healthcare delivery is practiced (offices, wards, hospitals, clinics, etc.).", "columns": {"care_site_id": {"name": "care_site_id", "description": "A unique identifier for each Care Site.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "care_site_name": {"name": "care_site_name", "description": "The verbatim description or name of the Care Site as in data source", "meta": {}, "data_type": null, "quote": null, "tags": []}, "place_of_service_concept_id": {"name": "place_of_service_concept_id", "description": "A foreign key that refers to a Place of Service Concept ID in the Standardized Vocabularies.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "A foreign key to the geographic Location in the LOCATION table, where the detailed address information is stored.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "care_site_source_value": {"name": "care_site_source_value", "description": "The identifier for the Care Site in the source data, stored here for reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "place_of_service_source_value": {"name": "place_of_service_source_value", "description": "The source code for the Place of Service as it appears in the source data, stored here for reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "synthea://models/schema.yml", "compiled_path": "/tmp/target/compiled/synthea/models/cdm/care_site.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "materialized": "incremental", "unique_key": "care_site_id", "enabled": true}, "created_at": 1666873495, "compiled_sql": "\n\nselect *\nfrom \"iomed\".\"cdm_dbt\".\"stg_care_site\"", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm\".\"care_site\""}, "model.synthea.drug_exposure": {"raw_sql": "-- depends_on: {{ ref('visit_occurrence') }}\n\n-- OMOP table: drug_exposure\n-- More information: https://ohdsi.github.io/ETL-Synthea/Drug_exposure.html\n\n{{ config (\n    unique_key = 'drug_exposure_id',\n    materialized='incremental',\n    enabled=true\n) }}\n\nwith drug_exposure as (\n\n    select distinct on (drug_exposure_id) *     -- Hacemos distinct porque hay problemas con el id (no hay codigos de medicamentos en Synthea)\n    from {{ ref('stg_drug_exposure') }}\n    order by drug_exposure_id, drug_concept_id\n)\nselect\n    drug_exposure_id,\n    person_id,\n    drug_concept_id,\n    drug_exposure_start_date,\n    drug_exposure_start_datetime,\n    drug_exposure_end_date,\n    drug_exposure_end_datetime,\n    verbatim_end_date,\n    drug_type_concept_id,\n    stop_reason,\n    refills,\n    quantity,\n    days_supply,\n    sig,\n    route_concept_id,\n    lot_number,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    drug_source_value,\n    drug_source_concept_id,\n    route_source_value,\n    dose_unit_source_value\nfrom drug_exposure", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.visit_occurrence", "model.synthea.stg_drug_exposure"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "drug_exposure_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "drug_exposure"], "unique_id": "model.synthea.drug_exposure", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/drug_exposure.sql", "original_file_path": "models/cdm/drug_exposure.sql", "name": "drug_exposure", "alias": "drug_exposure", "checksum": {"name": "sha256", "checksum": "45d270a100d04e7274cd05d9eada2ea473cad94134b581ac4b8b64a2f4561376"}, "tags": [], "refs": [["visit_occurrence"], ["stg_drug_exposure"]], "sources": [], "description": "The Drug domain captures records about the utilization of a Drug when ingested or otherwise introduced into the body. A Drug is a biochemical substance formulated in such a way that when administered to a Person it will exert a certain physiological effect. Drugs include prescription and over-the-counter medicines, vaccines, and large-molecule biologic therapies. Radiological devices ingested or applied locally do not count as Drugs. Drug Exposure is inferred from clinical events associated with orders, prescriptions written, pharmacy dispensings, procedural administrations, and other patient-reported information, for example: * The Prescription section of an EHR captures prescriptions written by physicians or from electronic ordering systems * The Medication list section of an EHR for both non-prescription products and medications prescribed by other providers * Prescriptions filled at dispensing providers such as pharmacies, and then captured in reimbursement claim systems * Drugs administered as part of a Procedure, such as chemotherapy or vaccines.", "columns": {"drug_exposure_id": {"name": "drug_exposure_id", "description": "A system-generated unique identifier for each Drug utilization event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "A foreign key identifier to the Person who is subjected to the Drug. The demographic details of that Person are stored in the PERSON table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drug_concept_id": {"name": "drug_concept_id", "description": "A foreign key that refers to a Standard Concept identifier in the Standardized Vocabularies belonging to the ''Drug'' domain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drug_exposure_start_date": {"name": "drug_exposure_start_date", "description": "The start date for the current instance of Drug utilization. Valid entries include a start date of a prescription, the date a prescription was filled, or the date on which a Drug administration procedure was recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drug_exposure_start_datetime": {"name": "drug_exposure_start_datetime", "description": "The start date and time for the current instance of Drug utilization. Valid entries include a start datetime of a prescription, the date and time a prescription was filled, or the date and time on which a Drug administration procedure was recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drug_exposure_end_date": {"name": "drug_exposure_end_date", "description": "The end date for the current instance of Drug utilization. Depending on different sources, it could be a known or an inferred date and denotes the last day at which the patient was still exposed to Drug.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drug_exposure_end_datetime": {"name": "drug_exposure_end_datetime", "description": "The end date and time for the current instance of Drug utilization. Depending on different sources, it could be a known or an inferred date and time and denotes the last day at which the patient was still exposed to Drug.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "verbatim_end_date": {"name": "verbatim_end_date", "description": "The known end date of a drug_exposure as provided by the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drug_type_concept_id": {"name": "drug_type_concept_id", "description": "A foreign key to the predefined Concept identifier in the Standardized Vocabularies reflecting the type of Drug Exposure recorded. It indicates how the Drug Exposure was represented in the source data and belongs to the ''Drug Type'' vocabulary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stop_reason": {"name": "stop_reason", "description": "The reason the Drug was stopped. Reasons include regimen completed, changed, removed, etc.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refills": {"name": "refills", "description": "The number of refills after the initial prescription. The initial prescription is not counted, values start with null.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of drug as recorded in the original prescription or dispensing record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_supply": {"name": "days_supply", "description": "The number of days of supply of the medication as prescribed. This reflects the intention of the provider for the length of exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sig": {"name": "sig", "description": "The directions (''signetur'') on the Drug prescription as recorded in the original prescription (and printed on the container) or dispensing record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "route_concept_id": {"name": "route_concept_id", "description": "A foreign key that refers to a Standard Concept identifier in the Standardized Vocabularies reflecting the route of administration and belonging to the ''Route'' domain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "lot_number": {"name": "lot_number", "description": "An identifier assigned to a particular quantity or lot of Drug product from the manufacturer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "provider_id": {"name": "provider_id", "description": "A foreign key to the provider in the PROVIDER table who initiated (prescribed or administered) the Drug Exposure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_occurrence_id": {"name": "visit_occurrence_id", "description": "A foreign key to the Visit in the VISIT_OCCURRENCE table during which the Drug Exposure was initiated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_detail_id": {"name": "visit_detail_id", "description": "A foreign key to the Visit Detail in the VISIT_DETAIL table during which the Drug Exposure was initiated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drug_source_value": {"name": "drug_source_value", "description": "The source code for the Drug as it appears in the source data. This code is mapped to a Standard Drug concept in the Standardized Vocabularies and the original code is, stored here for reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drug_source_concept_id": {"name": "drug_source_concept_id", "description": "A foreign key to a Drug Concept that refers to the code used in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "route_source_value": {"name": "route_source_value", "description": "The information about the route of administration as detailed in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dose_unit_source_value": {"name": "dose_unit_source_value", "description": "The information about the dose unit as detailed in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "synthea://models/schema.yml", "compiled_path": "/tmp/target/compiled/synthea/models/cdm/drug_exposure.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "unique_key": "drug_exposure_id", "materialized": "incremental", "enabled": true}, "created_at": 1666873495, "compiled_sql": "-- depends_on: \"iomed\".\"cdm\".\"visit_occurrence\"\n\n-- OMOP table: drug_exposure\n-- More information: https://ohdsi.github.io/ETL-Synthea/Drug_exposure.html\n\n\n\nwith drug_exposure as (\n\n    select distinct on (drug_exposure_id) *     -- Hacemos distinct porque hay problemas con el id (no hay codigos de medicamentos en Synthea)\n    from \"iomed\".\"cdm_dbt\".\"stg_drug_exposure\"\n    order by drug_exposure_id, drug_concept_id\n)\nselect\n    drug_exposure_id,\n    person_id,\n    drug_concept_id,\n    drug_exposure_start_date,\n    drug_exposure_start_datetime,\n    drug_exposure_end_date,\n    drug_exposure_end_datetime,\n    verbatim_end_date,\n    drug_type_concept_id,\n    stop_reason,\n    refills,\n    quantity,\n    days_supply,\n    sig,\n    route_concept_id,\n    lot_number,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    drug_source_value,\n    drug_source_concept_id,\n    route_source_value,\n    dose_unit_source_value\nfrom drug_exposure", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm\".\"drug_exposure\""}, "model.synthea.observation_period": {"raw_sql": "-- OMOP table: observation_period\n-- More information: https://ohdsi.github.io/ETL-Synthea/Observation_period.html\n\n{{ config (\n    unique_key = 'observation_period_id',\n    materialized='incremental',\n    enabled=true\n) }}\n\nwith observation_period as (\n\n    select * from {{ ref('stg_observation_period')}}\n\n)\nselect\n    observation_period_id,\n    person_id,\n    observation_period_start_date,\n    observation_period_end_date,\n    period_type_concept_id\nfrom observation_period", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.stg_observation_period"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "observation_period_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "observation_period"], "unique_id": "model.synthea.observation_period", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/observation_period.sql", "original_file_path": "models/cdm/observation_period.sql", "name": "observation_period", "alias": "observation_period", "checksum": {"name": "sha256", "checksum": "8ab11f60fb5a44d6e7ce269f4fe3d3d84ce6d4059d246c0c3e32398226ae6183"}, "tags": [], "refs": [["stg_observation_period"]], "sources": [], "description": "The OBSERVATION_PERIOD table contains records which uniquely define the spans of time for which a Person is at-risk to have clinical events recorded within the source systems, even if no events in fact are recorded (healthy patient with no healthcare interactions).", "columns": {"observation_period_id": {"name": "observation_period_id", "description": "A unique identifier for each observation period.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "A foreign key identifier to the person for whom the observation period is defined. The demographic details of that person are stored in the person table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "observation_period_start_date": {"name": "observation_period_start_date", "description": "The start date of the observation period for which data are available from the data source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "observation_period_end_date": {"name": "observation_period_end_date", "description": "The end date of the observation period for which data are available from the data source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "period_type_concept_id": {"name": "period_type_concept_id", "description": "A foreign key identifier to the predefined concept in the Standardized Vocabularies reflecting the source of the observation period information, belonging to the ''Obs Period Type'' vocabulary.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "synthea://models/schema.yml", "compiled_path": "/tmp/target/compiled/synthea/models/cdm/observation_period.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "unique_key": "observation_period_id", "materialized": "incremental", "enabled": true}, "created_at": 1666873495, "compiled_sql": "-- OMOP table: observation_period\n-- More information: https://ohdsi.github.io/ETL-Synthea/Observation_period.html\n\n\n\nwith observation_period as (\n\n    select * from \"iomed\".\"cdm_dbt\".\"stg_observation_period\"\n\n)\nselect\n    observation_period_id,\n    person_id,\n    observation_period_start_date,\n    observation_period_end_date,\n    period_type_concept_id\nfrom observation_period", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm\".\"observation_period\""}, "model.synthea.observation": {"raw_sql": "-- depends_on: {{ ref('visit_occurrence') }}\n\n-- OMOP table: observation\n-- More information: https://ohdsi.github.io/ETL-Synthea/Observation.html\n\n{{ config (\n    unique_key = 'observation_id',\n    materialized='incremental',\n    enabled=true\n) }}\n\nwith observation as (\n\n    select * from {{ ref('stg_observation')}}\n\n)\nselect\n    observation_id,\n    person_id,\n    observation_concept_id,\n    observation_date,\n    observation_datetime,\n    observation_datetime as value_as_datetime, -- ELIMINAR Linea\n    observation_type_concept_id,\n    value_as_number,\n    value_as_string,\n    value_as_concept_id,\n    qualifier_concept_id,\n    unit_concept_id,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    observation_source_value,\n    observation_source_concept_id,\n    unit_source_value,\n    qualifier_source_value,\n    value_source_value,\n    observation_event_id,\n    obs_event_field_concept_id\nfrom observation", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.visit_occurrence", "model.synthea.stg_observation"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "observation_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "observation"], "unique_id": "model.synthea.observation", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/observation.sql", "original_file_path": "models/cdm/observation.sql", "name": "observation", "alias": "observation", "checksum": {"name": "sha256", "checksum": "226bcf1475e0f9ed7c3e7dc146af3cd2312ba1d15e7b813629f901cab98f72f8"}, "tags": [], "refs": [["visit_occurrence"], ["stg_observation"]], "sources": [], "description": "The OBSERVATION table captures clinical facts about a Person obtained in the context of examination, questioning or a procedure. Any data that cannot be represented by any other domains, such as social and lifestyle facts, medical history, family history, etc. are recorded here.", "columns": {"observation_id": {"name": "observation_id", "description": "A unique identifier for each observation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "A foreign key identifier to the Person about whom the observation was recorded. The demographic details of that Person are stored in the PERSON table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "observation_concept_id": {"name": "observation_concept_id", "description": "A foreign key to the standard observation concept identifier in the Standardized Vocabularies.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "observation_date": {"name": "observation_date", "description": "The date of the observation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "observation_datetime": {"name": "observation_datetime", "description": "The date and time of the observation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "observation_type_concept_id": {"name": "observation_type_concept_id", "description": "A foreign key to the predefined concept identifier in the Standardized Vocabularies reflecting the type of the observation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_as_number": {"name": "value_as_number", "description": "The observation result stored as a number. This is applicable to observations where the result is expressed as a numeric value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_as_string": {"name": "value_as_string", "description": "The observation result stored as a string. This is applicable to observations where the result is expressed as verbatim text.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_as_concept_id": {"name": "value_as_concept_id", "description": "A foreign key to an observation result stored as a Concept ID. This is applicable to observations where the result can be expressed as a Standard Concept from the Standardized Vocabularies (e.g., positive/negative, present/absent, low/high, etc.).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "qualifier_concept_id": {"name": "qualifier_concept_id", "description": "A foreign key to a Standard Concept ID for a qualifier (e.g., severity of drug-drug interaction alert)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_concept_id": {"name": "unit_concept_id", "description": "A foreign key to a Standard Concept ID of measurement units in the Standardized Vocabularies.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "provider_id": {"name": "provider_id", "description": "A foreign key to the provider in the PROVIDER table who was responsible for making the observation.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_occurrence_id": {"name": "visit_occurrence_id", "description": "A foreign key to the visit in the VISIT_OCCURRENCE table during which the observation was recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_detail_id": {"name": "visit_detail_id", "description": "A foreign key to the visit in the VISIT_DETAIL table during which the observation was recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "observation_source_value": {"name": "observation_source_value", "description": "The observation code as it appears in the source data. This code is mapped to a Standard Concept in the Standardized Vocabularies and the original code is, stored here for reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "observation_source_concept_id": {"name": "observation_source_concept_id", "description": "A foreign key to a Concept that refers to the code used in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_source_value": {"name": "unit_source_value", "description": "The source code for the unit as it appears in the source data. This code is mapped to a standard unit concept in the Standardized Vocabularies and the original code is, stored here for reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "qualifier_source_value": {"name": "qualifier_source_value", "description": "The source value associated with a qualifier to characterize the observation", "meta": {}, "data_type": null, "quote": null, "tags": []}, "observation_event_id": {"name": "observation_event_id", "description": "A foreign key to an event table (e.g., PROCEDURE_OCCURRENCE_ID).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "obs_event_field_concept_id": {"name": "obs_event_field_concept_id", "description": "A foreign key that refers to a Standard Concept identifier in the Standardized Vocabularies referring to the field represented in the OBSERVATION_EVENT_ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "value_as_datetime": {"name": "value_as_datetime", "description": "The observation result stored as a datetime value. This is applicable to observations where the result is expressed as a point in time.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "synthea://models/schema.yml", "compiled_path": "/tmp/target/compiled/synthea/models/cdm/observation.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "unique_key": "observation_id", "materialized": "incremental", "enabled": true}, "created_at": 1666873495, "compiled_sql": "-- depends_on: \"iomed\".\"cdm\".\"visit_occurrence\"\n\n-- OMOP table: observation\n-- More information: https://ohdsi.github.io/ETL-Synthea/Observation.html\n\n\n\nwith observation as (\n\n    select * from \"iomed\".\"cdm_dbt\".\"stg_observation\"\n\n)\nselect\n    observation_id,\n    person_id,\n    observation_concept_id,\n    observation_date,\n    observation_datetime,\n    observation_datetime as value_as_datetime, -- ELIMINAR Linea\n    observation_type_concept_id,\n    value_as_number,\n    value_as_string,\n    value_as_concept_id,\n    qualifier_concept_id,\n    unit_concept_id,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    observation_source_value,\n    observation_source_concept_id,\n    unit_source_value,\n    qualifier_source_value,\n    value_source_value,\n    observation_event_id,\n    obs_event_field_concept_id\nfrom observation", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm\".\"observation\""}, "model.synthea.condition_era": {"raw_sql": "{{ config(\n    materialized='incremental',\n    unique_key='condition_era_id',\n\tenabled=true\n  )\n}}\n\nwith condition_era as (\n\n    select * from {{ ref('stg_condition_era')}}\n\n)\nselect\n    condition_era_id,\n    person_id,\n    condition_concept_id,\n    condition_era_start_date,\n    condition_era_end_date,\n    CONDITION_ERA_START_DATE::timestamp as condition_era_start_datetime, -- ELIMINAR LINEA\n    CONDITION_ERA_END_DATE::timestamp as condition_era_end_datetime,     -- ELIMINAR LINEA\n    condition_occurrence_count\nfrom condition_era", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.stg_condition_era"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "condition_era_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "condition_era"], "unique_id": "model.synthea.condition_era", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/condition_era.sql", "original_file_path": "models/cdm/condition_era.sql", "name": "condition_era", "alias": "condition_era", "checksum": {"name": "sha256", "checksum": "9488bad2a34be61d95053c713264ef960b948d6a99567e20818b03b511d880cf"}, "tags": [], "refs": [["stg_condition_era"]], "sources": [], "description": "A Condition Era is defined as a span of time when the Person is assumed to have a given condition. Similar to Drug Eras, Condition Eras are chronological periods of Condition Occurrence. Combining individual Condition Occurrences into a single Condition Era serves two purposes: * It allows aggregation of chronic conditions that require frequent ongoing care, instead of treating each Condition Occurrence as an independent event. * It allows aggregation of multiple, closely timed doctor visits for the same Condition to avoid double-counting the Condition Occurrences. For example, consider a Person who visits her Primary Care Physician (PCP) and who is referred to a specialist. At a later time, the Person visits the specialist, who confirms the PCP''s original diagnosis and provides the appropriate treatment to resolve the condition. These two independent doctor visits should be aggregated into one Condition Era.", "columns": {"condition_era_id": {"name": "condition_era_id", "description": "A unique identifier for each Condition Era.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "A foreign key identifier to the Person who is experiencing the Condition during the Condition Era. The demographic details of that Person are stored in the PERSON table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_concept_id": {"name": "condition_concept_id", "description": "A foreign key that refers to a standard Condition Concept identifier in the Standardized Vocabularies.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_era_start_datetime": {"name": "condition_era_start_datetime", "description": "The start date for the Condition Era constructed from the individual instances of Condition Occurrences. It is the start date of the very first chronologically recorded instance of the condition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_era_end_datetime": {"name": "condition_era_end_datetime", "description": "The end date for the Condition Era constructed from the individual instances of Condition Occurrences. It is the end date of the final continuously recorded instance of the Condition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_occurrence_count": {"name": "condition_occurrence_count", "description": "The number of individual Condition Occurrences used to construct the condition era.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "synthea://models/schema.yml", "compiled_path": "/tmp/target/compiled/synthea/models/cdm/condition_era.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "materialized": "incremental", "unique_key": "condition_era_id", "enabled": true}, "created_at": 1666873495, "compiled_sql": "\n\nwith condition_era as (\n\n    select * from \"iomed\".\"cdm_dbt\".\"stg_condition_era\"\n\n)\nselect\n    condition_era_id,\n    person_id,\n    condition_concept_id,\n    condition_era_start_date,\n    condition_era_end_date,\n    CONDITION_ERA_START_DATE::timestamp as condition_era_start_datetime, -- ELIMINAR LINEA\n    CONDITION_ERA_END_DATE::timestamp as condition_era_end_datetime,     -- ELIMINAR LINEA\n    condition_occurrence_count\nfrom condition_era", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm\".\"condition_era\""}, "model.synthea.note": {"raw_sql": "-- depends_on: {{ ref('visit_occurrence') }}\n\n{{ config (\n    unique_key = 'note_id',\n    materialized='incremental',\n    enabled=true\n) }}\n\nwith note as (\n\n    select * from {{ ref('stg_note')}}\n\n)\nselect\n    note_id,\n    person_id,\n    note_event_id,\n    note_event_field_concept_id,\n    note_date,\n    note_datetime,\n    note_type_concept_id,\n    note_class_concept_id,\n    note_title,\n    note_text,\n    encoding_concept_id,\n    language_concept_id,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    note_source_value\nfrom note", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.visit_occurrence", "model.synthea.stg_note"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "note_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "note"], "unique_id": "model.synthea.note", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/note.sql", "original_file_path": "models/cdm/note.sql", "name": "note", "alias": "note", "checksum": {"name": "sha256", "checksum": "f8c280578a740ed9ec7237d7232d9c28ca3bf4ac940c739b853e7f85fa86e988"}, "tags": [], "refs": [["visit_occurrence"], ["stg_note"]], "sources": [], "description": "The NOTE table captures unstructured information that was recorded by a provider about a patient in free text notes on a given date.", "columns": {"note_id": {"name": "note_id", "description": "A unique identifier for each note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "A foreign key identifier to the Person about whom the Note was recorded. The demographic details of that Person are stored in the PERSON table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note_event_id": {"name": "note_event_id", "description": "A foreign key identifier to the event (e.g. Measurement, Procedure, Visit, Drug Exposure, etc) record during which the note was recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note_event_field_concept_id": {"name": "note_event_field_concept_id", "description": "A foreign key to the predefined Concept in the Standardized Vocabularies reflecting the field to which the note_event_id is referring.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note_date": {"name": "note_date", "description": "The date the note was recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note_datetime": {"name": "note_datetime", "description": "The date and time the note was recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note_type_concept_id": {"name": "note_type_concept_id", "description": "A foreign key to the predefined Concept in the Standardized Vocabularies reflecting the type, origin or provenance of the Note. These belong to the ''Note Type'' vocabulary", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note_class_concept_id": {"name": "note_class_concept_id", "description": "A foreign key to the predefined Concept in the Standardized Vocabularies reflecting the HL7 LOINC Document Type Vocabulary classification of the note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note_title": {"name": "note_title", "description": "The title of the Note as it appears in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note_text": {"name": "note_text", "description": "The content of the Note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encoding_concept_id": {"name": "encoding_concept_id", "description": "A foreign key to the predefined Concept in the Standardized Vocabularies reflecting the note character encoding type", "meta": {}, "data_type": null, "quote": null, "tags": []}, "language_concept_id": {"name": "language_concept_id", "description": "A foreign key to the predefined Concept in the Standardized Vocabularies reflecting the language of the note", "meta": {}, "data_type": null, "quote": null, "tags": []}, "provider_id": {"name": "provider_id", "description": "A foreign key to the Provider in the PROVIDER table who took the Note.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_occurrence_id": {"name": "visit_occurrence_id", "description": "A foreign key to the Visit in the VISIT_OCCURRENCE table when the Note was taken.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_detail_id": {"name": "visit_detail_id", "description": "A foreign key to the Visit in the VISIT_DETAIL table when the Note was taken.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "note_source_value": {"name": "note_source_value", "description": "The source value associated with the origin of the Note", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "synthea://models/schema.yml", "compiled_path": "/tmp/target/compiled/synthea/models/cdm/note.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "unique_key": "note_id", "materialized": "incremental", "enabled": true}, "created_at": 1666873495, "compiled_sql": "-- depends_on: \"iomed\".\"cdm\".\"visit_occurrence\"\n\n\n\nwith note as (\n\n    select * from \"iomed\".\"cdm_dbt\".\"stg_note\"\n\n)\nselect\n    note_id,\n    person_id,\n    note_event_id,\n    note_event_field_concept_id,\n    note_date,\n    note_datetime,\n    note_type_concept_id,\n    note_class_concept_id,\n    note_title,\n    note_text,\n    encoding_concept_id,\n    language_concept_id,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    note_source_value\nfrom note", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm\".\"note\""}, "model.synthea.procedure_occurrence": {"raw_sql": "-- depends_on: {{ ref('visit_occurrence') }}\n\n-- OMOP table: procedure_occurrence\n-- More information: https://ohdsi.github.io/ETL-Synthea/Procedure_occurrence.html\n\n{{ config (\n    unique_key = 'procedure_occurrence_id',\n    materialized='incremental',\n    enabled=true\n) }}\n\nwith procedure_occurrence as (\n\n    select * from {{ ref('stg_procedure_occurrence')}}\n\n)\nselect\n    procedure_occurrence_id,\n    person_id,\n    procedure_concept_id,\n    procedure_date,\n    procedure_datetime,\n    procedure_end_date,\n    procedure_end_datetime,\n    procedure_type_concept_id,\n    modifier_concept_id,\n    quantity,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    procedure_source_value,\n    procedure_source_concept_id,\n    modifier_source_value\nfrom procedure_occurrence", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.visit_occurrence", "model.synthea.stg_procedure_occurrence"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "procedure_occurrence_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "procedure_occurrence"], "unique_id": "model.synthea.procedure_occurrence", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/procedure_occurrence.sql", "original_file_path": "models/cdm/procedure_occurrence.sql", "name": "procedure_occurrence", "alias": "procedure_occurrence", "checksum": {"name": "sha256", "checksum": "d60dcd18b77a6027e923c760445c11c23eb7643f1fd0b5fb6ab07b138fb0217b"}, "tags": [], "refs": [["visit_occurrence"], ["stg_procedure_occurrence"]], "sources": [], "description": "The PROCEDURE_OCCURRENCE table contains records of activities or processes ordered by, or carried out by, a healthcare provider on the patient to have a diagnostic or therapeutic purpose. Procedures are present in various data sources in different forms with varying levels of standardization. For example: * Medical Claims include procedure codes that are submitted as part of a claim for health services rendered, including procedures performed. * Electronic Health Records that capture procedures as orders.", "columns": {"procedure_occurrence_id": {"name": "procedure_occurrence_id", "description": "A system-generated unique identifier for each Procedure Occurrence.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "A foreign key identifier to the Person who is subjected to the Procedure. The demographic details of that Person are stored in the PERSON table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_concept_id": {"name": "procedure_concept_id", "description": "A foreign key that refers to a standard procedure Concept identifier in the Standardized Vocabularies.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date": {"name": "procedure_date", "description": "The date on which the Procedure was performed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_datetime": {"name": "procedure_datetime", "description": "The date and time on which the Procedure was performed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_type_concept_id": {"name": "procedure_type_concept_id", "description": "A foreign key to the predefined Concept identifier in the Standardized Vocabularies reflecting the type of source data from which the procedure record is derived, belonging to the ''Procedure Type'' vocabulary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modifier_concept_id": {"name": "modifier_concept_id", "description": "A foreign key to a Standard Concept identifier for a modifier to the Procedure (e.g. bilateral). These concepts are typically distinguished by ''Modifier'' concept classes (e.g., ''CPT4 Modifier'' as part of the ''CPT4'' vocabulary).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity of procedures ordered or administered.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "provider_id": {"name": "provider_id", "description": "A foreign key to the provider in the PROVIDER table who was responsible for carrying out the procedure.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_occurrence_id": {"name": "visit_occurrence_id", "description": "A foreign key to the Visit in the VISIT_OCCURRENCE table during which the Procedure was carried out.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_detail_id": {"name": "visit_detail_id", "description": "A foreign key to the Visit Detail in the VISIT_DETAIL table during which the Procedure was carried out.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_source_value": {"name": "procedure_source_value", "description": "The source code for the Procedure as it appears in the source data. This code is mapped to a standard procedure Concept in the Standardized Vocabularies and the original code is, stored here for reference. Procedure source codes are typically ICD-9-Proc, CPT-4, HCPCS or OPCS-4 codes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_source_concept_id": {"name": "procedure_source_concept_id", "description": "A foreign key to a Procedure Concept that refers to the code used in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "modifier_source_value": {"name": "modifier_source_value", "description": "The source code for the qualifier as it appears in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "synthea://models/schema.yml", "compiled_path": "/tmp/target/compiled/synthea/models/cdm/procedure_occurrence.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "unique_key": "procedure_occurrence_id", "materialized": "incremental", "enabled": true}, "created_at": 1666873495, "compiled_sql": "-- depends_on: \"iomed\".\"cdm\".\"visit_occurrence\"\n\n-- OMOP table: procedure_occurrence\n-- More information: https://ohdsi.github.io/ETL-Synthea/Procedure_occurrence.html\n\n\n\nwith procedure_occurrence as (\n\n    select * from \"iomed\".\"cdm_dbt\".\"stg_procedure_occurrence\"\n\n)\nselect\n    procedure_occurrence_id,\n    person_id,\n    procedure_concept_id,\n    procedure_date,\n    procedure_datetime,\n    procedure_end_date,\n    procedure_end_datetime,\n    procedure_type_concept_id,\n    modifier_concept_id,\n    quantity,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    procedure_source_value,\n    procedure_source_concept_id,\n    modifier_source_value\nfrom procedure_occurrence", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm\".\"procedure_occurrence\""}, "model.synthea.condition_occurrence": {"raw_sql": "-- depends_on: {{ ref('visit_occurrence') }}\n\n-- OMOP table: condition_occurrence\n-- More information: https://ohdsi.github.io/ETL-Synthea/Condition_occurrence.html\n\n{{ config (\n    unique_key = 'condition_occurrence_id',\n    materialized='incremental',\n    enabled=true\n) }}\n\nwith condition_occurrence as (\n\n    select * from {{ ref('stg_condition_occurrence')}}\n\n)\nselect\n    condition_occurrence_id,\n    person_id,\n    condition_concept_id,\n    condition_start_date,\n    condition_start_datetime,\n    condition_end_date,\n    condition_end_datetime,\n    condition_type_concept_id,\n    condition_status_concept_id,\n    stop_reason,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    condition_source_value,\n    condition_source_concept_id,\n    condition_status_source_value\nfrom condition_occurrence", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.visit_occurrence", "model.synthea.stg_condition_occurrence"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "condition_occurrence_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "condition_occurrence"], "unique_id": "model.synthea.condition_occurrence", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/condition_occurrence.sql", "original_file_path": "models/cdm/condition_occurrence.sql", "name": "condition_occurrence", "alias": "condition_occurrence", "checksum": {"name": "sha256", "checksum": "2f86a7494f2df20a513570a4d3a43386dce26dd0903b5e3f42da36b7ffe6bfcb"}, "tags": [], "refs": [["visit_occurrence"], ["stg_condition_occurrence"]], "sources": [], "description": "Conditions are records of a Person suggesting the presence of a disease or medical condition stated as a diagnosis, a sign, or a symptom, which is either observed by a Provider or reported by the patient. Conditions are recorded in different sources and levels of standardization, for example: * Medical claims data include diagnoses coded in Source Vocabularies such as ICD-9-CM that are submitted as part of a reimbursement claim for health services * EHRs may capture Person conditions in the form of diagnosis codes or symptoms", "columns": {"condition_occurrence_id": {"name": "condition_occurrence_id", "description": "A unique identifier for each Condition Occurrence event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "A foreign key identifier to the Person who is experiencing the condition. The demographic details of that Person are stored in the PERSON table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_concept_id": {"name": "condition_concept_id", "description": "A foreign key that refers to a Standard Concept identifier in the Standardized Vocabularies belonging to the ''Condition'' domain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_start_date": {"name": "condition_start_date", "description": "The date when the instance of the Condition is recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_start_datetime": {"name": "condition_start_datetime", "description": "The date and time when the instance of the Condition is recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_end_date": {"name": "condition_end_date", "description": "The date when the instance of the Condition is considered to have ended.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_end_datetime": {"name": "condition_end_datetime", "description": "The date when the instance of the Condition is considered to have ended.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_type_concept_id": {"name": "condition_type_concept_id", "description": "A foreign key to the predefined Concept identifier in the Standardized Vocabularies reflecting the source data from which the Condition was recorded, the level of standardization, and the type of occurrence. These belong to the ''Condition Type'' vocabulary", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_status_concept_id": {"name": "condition_status_concept_id", "description": "A foreign key that refers to a Standard Concept identifier in the Standardized Vocabularies reflecting the point of care at which the Condition was diagnosed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stop_reason": {"name": "stop_reason", "description": "The reason that the Condition was no longer present, as indicated in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "provider_id": {"name": "provider_id", "description": "A foreign key to the Provider in the PROVIDER table who was responsible for capturing (diagnosing) the Condition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_occurrence_id": {"name": "visit_occurrence_id", "description": "A foreign key to the visit in the VISIT_OCCURRENCE table during which the Condition was determined (diagnosed).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_detail_id": {"name": "visit_detail_id", "description": "A foreign key to the visit in the VISIT_DETAIL table during which the Condition was determined (diagnosed).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_source_value": {"name": "condition_source_value", "description": "The source code for the Condition as it appears in the source data. This code is mapped to a Standard Condition Concept in the Standardized Vocabularies and the original code is stored here for reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_source_concept_id": {"name": "condition_source_concept_id", "description": "A foreign key to a Condition Concept that refers to the code used in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_status_source_value": {"name": "condition_status_source_value", "description": "The source code for the condition status as it appears in the source data.  This code is mapped to a Standard Concept in the Standardized Vocabularies and the original code is stored here for reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "synthea://models/schema.yml", "compiled_path": "/tmp/target/compiled/synthea/models/cdm/condition_occurrence.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "unique_key": "condition_occurrence_id", "materialized": "incremental", "enabled": true}, "created_at": 1666873495, "compiled_sql": "-- depends_on: \"iomed\".\"cdm\".\"visit_occurrence\"\n\n-- OMOP table: condition_occurrence\n-- More information: https://ohdsi.github.io/ETL-Synthea/Condition_occurrence.html\n\n\n\nwith condition_occurrence as (\n\n    select * from \"iomed\".\"cdm_dbt\".\"stg_condition_occurrence\"\n\n)\nselect\n    condition_occurrence_id,\n    person_id,\n    condition_concept_id,\n    condition_start_date,\n    condition_start_datetime,\n    condition_end_date,\n    condition_end_datetime,\n    condition_type_concept_id,\n    condition_status_concept_id,\n    stop_reason,\n    provider_id,\n    visit_occurrence_id,\n    visit_detail_id,\n    condition_source_value,\n    condition_source_concept_id,\n    condition_status_source_value\nfrom condition_occurrence", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm\".\"condition_occurrence\""}, "model.synthea.person": {"raw_sql": "-- OMOP table: person\n-- More information:  https://ohdsi.github.io/ETL-Synthea/Person.html\n\n\n-- session_replication_role TO 'replica' to avoid checking FK restrictions to\n-- allow the deletion of already existing person_id (due to incremental materialization)\n\n{{\nconfig(\n  unique_key='person_id',\n  materialized='incremental',\n  enabled=true\n  )\n}}\n\nwith person as (\n\n    select * from {{ ref('stg_person')}}\n\n)\nselect\n    person_id,\n    gender_concept_id,\n    year_of_birth,\n    month_of_birth,\n    day_of_birth,\n    birth_datetime,\n    race_concept_id,\n    ethnicity_concept_id,\n    location_id,\n    provider_id,\n    care_site_id,\n    person_source_value,\n    gender_source_value,\n    gender_source_concept_id,\n    race_source_value,\n    race_source_concept_id,\n    ethnicity_source_value,\n    ethnicity_source_concept_id\nfrom person", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.stg_person"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "person_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "person"], "unique_id": "model.synthea.person", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/person.sql", "original_file_path": "models/cdm/person.sql", "name": "person", "alias": "person", "checksum": {"name": "sha256", "checksum": "92f822f69a2ad06385ae9769f3c9a725ecf154c16011a7c5f820bbabd9502430"}, "tags": [], "refs": [["stg_person"]], "sources": [], "description": "The Person Domain contains records that uniquely identify each patient in the source data who is time at-risk to have clinical observations recorded within the source systems.", "columns": {"person_id": {"name": "person_id", "description": "A unique identifier for each person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender_concept_id": {"name": "gender_concept_id", "description": "A foreign key that refers to an identifier in the CONCEPT table for the unique gender of the person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year_of_birth": {"name": "year_of_birth", "description": "The year of birth of the person. For data sources with date of birth, the year is extracted. For data sources where the year of birth is not available, the approximate year of birth is derived based on any age group categorization available.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_of_birth": {"name": "month_of_birth", "description": "The month of birth of the person. For data sources that provide the precise date of birth, the month is extracted and stored in this field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "day_of_birth": {"name": "day_of_birth", "description": "The day of the month of birth of the person. For data sources that provide the precise date of birth, the day is extracted and stored in this field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_datetime": {"name": "birth_datetime", "description": "The date and time of birth of the person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "death_datetime": {"name": "death_datetime", "description": "The date and time of death of the person.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "race_concept_id": {"name": "race_concept_id", "description": "A foreign key that refers to an identifier in the CONCEPT table for the unique race of the person, belonging to the ''Race'' vocabulary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ethnicity_concept_id": {"name": "ethnicity_concept_id", "description": "A foreign key that refers to the standard concept identifier in the Standardized Vocabularies for the ethnicity of the person, belonging to the ''Ethnicity'' vocabulary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "location_id": {"name": "location_id", "description": "A foreign key to the place of residency for the person in the location table, where the detailed address information is stored.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "provider_id": {"name": "provider_id", "description": "A foreign key to the primary care provider the person is seeing in the provider table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "care_site_id": {"name": "care_site_id", "description": "A foreign key to the site of primary care in the care_site table, where the details of the care site are stored.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_source_value": {"name": "person_source_value", "description": "An (encrypted) key derived from the person identifier in the source data. This is necessary when a use case requires a link back to the person data at the source dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender_source_value": {"name": "gender_source_value", "description": "The source code for the gender of the person as it appears in the source data. The person\u2019s gender is mapped to a standard gender concept in the Standardized Vocabularies; the original value is stored here for reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender_source_concept_id": {"name": "gender_source_concept_id", "description": "A foreign key to the gender concept that refers to the code used in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "race_source_value": {"name": "race_source_value", "description": "The source code for the race of the person as it appears in the source data. The person race is mapped to a standard race concept in the Standardized Vocabularies and the original value is stored here for reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "race_source_concept_id": {"name": "race_source_concept_id", "description": "A foreign key to the race concept that refers to the code used in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ethnicity_source_value": {"name": "ethnicity_source_value", "description": "The source code for the ethnicity of the person as it appears in the source data. The person ethnicity is mapped to a standard ethnicity concept in the Standardized Vocabularies and the original code is, stored here for reference.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ethnicity_source_concept_id": {"name": "ethnicity_source_concept_id", "description": "A foreign key to the ethnicity concept that refers to the code used in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "synthea://models/schema.yml", "compiled_path": "/tmp/target/compiled/synthea/models/cdm/person.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "unique_key": "person_id", "materialized": "incremental", "enabled": true}, "created_at": 1666873495, "compiled_sql": "-- OMOP table: person\n-- More information:  https://ohdsi.github.io/ETL-Synthea/Person.html\n\n\n-- session_replication_role TO 'replica' to avoid checking FK restrictions to\n-- allow the deletion of already existing person_id (due to incremental materialization)\n\n\n\nwith person as (\n\n    select * from \"iomed\".\"cdm_dbt\".\"stg_person\"\n\n)\nselect\n    person_id,\n    gender_concept_id,\n    year_of_birth,\n    month_of_birth,\n    day_of_birth,\n    birth_datetime,\n    race_concept_id,\n    ethnicity_concept_id,\n    location_id,\n    provider_id,\n    care_site_id,\n    person_source_value,\n    gender_source_value,\n    gender_source_concept_id,\n    race_source_value,\n    race_source_concept_id,\n    ethnicity_source_value,\n    ethnicity_source_concept_id\nfrom person", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm\".\"person\""}, "model.synthea.visit_occurrence": {"raw_sql": "-- OMOP table: visit_occurrence\n-- More information: https://ohdsi.github.io/ETL-Synthea/Visit_occurrence.html\n\n-- session_replication_role TO 'replica' to avoid checking FK restrictions to\n-- allow the deletion of already existing visit_occurrence_id (due to incremental materialization)\n\n{{ config (\n    unique_key = 'visit_occurrence_id',\n    materialized='incremental',\n    enabled=true\n    )\n}}\n\nWith visit_occurrence as (\n\n    select * from {{ ref('stg_visit_occurrence')}}\n\n)\nselect\n    visit_occurrence_id,\n    person_id,\n    visit_concept_id,\n    visit_start_date,\n    visit_start_datetime,\n    visit_end_date,\n    visit_end_datetime,\n    visit_type_concept_id,\n    provider_id,\n    care_site_id,\n    visit_source_value,\n    visit_source_concept_id,\n    admitted_from_concept_id,\n    admitted_from_source_value,\n    discharged_to_source_value,\n    discharged_to_concept_id,\n    preceding_visit_occurrence_id\nfrom visit_occurrence", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.stg_visit_occurrence"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "visit_occurrence_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "visit_occurrence"], "unique_id": "model.synthea.visit_occurrence", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/visit_occurrence.sql", "original_file_path": "models/cdm/visit_occurrence.sql", "name": "visit_occurrence", "alias": "visit_occurrence", "checksum": {"name": "sha256", "checksum": "069f0a38915a56984db194aaf1b7368daa1292f5b49acc6be4e8bbe1c475403e"}, "tags": [], "refs": [["stg_visit_occurrence"]], "sources": [], "description": "The VISIT_OCCURRENCE table contains the spans of time a Person continuously receives medical services from one or more providers at a Care Site in a given setting within the health care system. Visits are classified into 4 settings: outpatient care, inpatient confinement, emergency room, and long-term care. Persons may transition between these settings over the course of an episode of care (for example, treatment of a disease onset).", "columns": {"visit_occurrence_id": {"name": "visit_occurrence_id", "description": "A unique identifier for each Person''s visit or encounter at a healthcare provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "A foreign key identifier to the Person for whom the visit is recorded. The demographic details of that Person are stored in the PERSON table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_concept_id": {"name": "visit_concept_id", "description": "A foreign key that refers to a visit Concept identifier in the Standardized Vocabularies belonging to the ''Visit'' Vocabulary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_start_date": {"name": "visit_start_date", "description": "The start date of the visit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_start_datetime": {"name": "visit_start_datetime", "description": "The date and time of the visit started.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_end_date": {"name": "visit_end_date", "description": "The end date of the visit. If this is a one-day visit the end date should match the start date.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_end_datetime": {"name": "visit_end_datetime", "description": "The date and time of the visit end.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_type_concept_id": {"name": "visit_type_concept_id", "description": "A foreign key to the predefined Concept identifier in the Standardized Vocabularies reflecting the type of source data from which the visit record is derived belonging to the ''Visit Type'' vocabulary.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "provider_id": {"name": "provider_id", "description": "A foreign key to the provider in the provider table who was associated with the visit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "care_site_id": {"name": "care_site_id", "description": "A foreign key to the care site in the care site table that was visited.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_source_value": {"name": "visit_source_value", "description": "The source code for the visit as it appears in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "visit_source_concept_id": {"name": "visit_source_concept_id", "description": "A foreign key to a Concept that refers to the code used in the source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admitted_from_concept_id": {"name": "admitted_from_concept_id", "description": "A foreign key to the predefined concept in the Place of Service Vocabulary reflecting where the patient was admitted from.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admitted_from_source_value": {"name": "admitted_from_source_value", "description": "The source code for where the patient was admitted from as it appears in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_to_concept_id": {"name": "discharge_to_concept_id", "description": "A foreign key to the predefined concept in the Place of Service Vocabulary reflecting the discharge disposition for a visit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_to_source_value": {"name": "discharge_to_source_value", "description": "The source code for the discharge disposition as it appears in the source data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "preceding_visit_occurrence_id": {"name": "preceding_visit_occurrence_id", "description": "A foreign key to the VISIT_OCCURRENCE table of the visit immediately preceding this visit", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "synthea://models/schema.yml", "compiled_path": "/tmp/target/compiled/synthea/models/cdm/visit_occurrence.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "unique_key": "visit_occurrence_id", "materialized": "incremental", "enabled": true}, "created_at": 1666873495, "compiled_sql": "-- OMOP table: visit_occurrence\n-- More information: https://ohdsi.github.io/ETL-Synthea/Visit_occurrence.html\n\n-- session_replication_role TO 'replica' to avoid checking FK restrictions to\n-- allow the deletion of already existing visit_occurrence_id (due to incremental materialization)\n\n\n\nWith visit_occurrence as (\n\n    select * from \"iomed\".\"cdm_dbt\".\"stg_visit_occurrence\"\n\n)\nselect\n    visit_occurrence_id,\n    person_id,\n    visit_concept_id,\n    visit_start_date,\n    visit_start_datetime,\n    visit_end_date,\n    visit_end_datetime,\n    visit_type_concept_id,\n    provider_id,\n    care_site_id,\n    visit_source_value,\n    visit_source_concept_id,\n    admitted_from_concept_id,\n    admitted_from_source_value,\n    discharged_to_source_value,\n    discharged_to_concept_id,\n    preceding_visit_occurrence_id\nfrom visit_occurrence", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm\".\"visit_occurrence\""}, "model.synthea.drug_era": {"raw_sql": "{{ config(\n    materialized='incremental',\n    unique_key='drug_era_id',\n\tenabled=true\n  )\n}}\n\nwith drug_era as (\n\n    select * from {{ ref('stg_drug_era')}}\n\n)\nselect\n    drug_era_id,\n    person_id,\n    drug_concept_id,\n    drug_era_start_date,\n    drug_era_end_date,\n    drug_era_start_date::timestamp as drug_era_start_datetime, -- ELIMINAR LINEA\n    drug_era_end_date::timestamp as drug_era_end_datetime,     -- ELIMINAR LINEA\n    DRUG_EXPOSURE_COUNT,\n    gap_days\nfrom drug_era", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.stg_drug_era"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "drug_era_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "drug_era"], "unique_id": "model.synthea.drug_era", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/drug_era.sql", "original_file_path": "models/cdm/drug_era.sql", "name": "drug_era", "alias": "drug_era", "checksum": {"name": "sha256", "checksum": "1fd0ab916fdefbb2782707ef6be0a5c14de35596a69ef67d600743dca01e375b"}, "tags": [], "refs": [["stg_drug_era"]], "sources": [], "description": "A Drug Era is defined as a span of time when the Person is assumed to be exposed to a particular active ingredient. A Drug Era is not the same as a Drug Exposure: Exposures are individual records corresponding to the source when Drug was delivered to the Person, while successive periods of Drug Exposures are combined under certain rules to produce continuous Drug Eras.", "columns": {"drug_era_id": {"name": "drug_era_id", "description": "A unique identifier for each Drug Era.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "person_id": {"name": "person_id", "description": "A foreign key identifier to the Person who is subjected to the Drug during the fDrug Era. The demographic details of that Person are stored in the PERSON table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drug_concept_id": {"name": "drug_concept_id", "description": "A foreign key that refers to a Standard Concept identifier in the Standardized Vocabularies for the Ingredient Concept.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drug_era_start_datetime": {"name": "drug_era_start_datetime", "description": "The start date for the Drug Era constructed from the individual instances of Drug Exposures. It is the start date of the very first chronologically recorded instance of conutilization of a Drug.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drug_era_end_datetime": {"name": "drug_era_end_datetime", "description": "The end date for the drug era constructed from the individual instance of drug exposures. It is the end date of the final continuously recorded instance of utilization of a drug.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drug_exposure_count": {"name": "drug_exposure_count", "description": "The number of individual Drug Exposure occurrences used to construct the Drug Era.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gap_days": {"name": "gap_days", "description": "The number of days that are not covered by DRUG_EXPOSURE records that were used to make up the era record.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "synthea://models/schema.yml", "compiled_path": "/tmp/target/compiled/synthea/models/cdm/drug_era.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "materialized": "incremental", "unique_key": "drug_era_id", "enabled": true}, "created_at": 1666873495, "compiled_sql": "\n\nwith drug_era as (\n\n    select * from \"iomed\".\"cdm_dbt\".\"stg_drug_era\"\n\n)\nselect\n    drug_era_id,\n    person_id,\n    drug_concept_id,\n    drug_era_start_date,\n    drug_era_end_date,\n    drug_era_start_date::timestamp as drug_era_start_datetime, -- ELIMINAR LINEA\n    drug_era_end_date::timestamp as drug_era_end_datetime,     -- ELIMINAR LINEA\n    DRUG_EXPOSURE_COUNT,\n    gap_days\nfrom drug_era", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm\".\"drug_era\""}, "model.synthea.stg_note": {"raw_sql": "-- stg_note\n\n{{ config(\n   materialized='table_unlogged',\n   enabled=true\n)\n}}\n\nwith patients as (\n\n    select id,\n           gender\n    from {{ source('iomed_raw', 'patients') }}\n\n),\nconditions_pivot as (\n\n    select patient,\n           encounter,\n           case when code = '72892002' then true else false end as pregnant, -- Normal pregnancy\n           case when code = '49727002' then true else false end as cough, -- Cough (finding)\n           case when code = '386661006' then true else false end as fever, -- Fever (finding)\n           case when code = '44054006' then true else false end as diabetes, -- Diabetes\n           case when code = '59621000' then true else false end as hypertension, -- Hypertension\n           case when code = '399211009' then true else false end as infarction_history -- History of myocardial infarction (situation\n    from {{ source('iomed_raw', 'conditions') }}\n\n),\nobservations_pivot as (\n\n    select patient,\n           encounter,\n           case when value = 'Current every day smoker' then true else false end as smoker\n    from {{ source('iomed_raw', 'observations') }}\n\n),\nencounter as (\n\n    select id, patient, start\n    from {{ source('iomed_raw', 'encounters') }}\n\n),\nfinal_visit_ids  AS (\n\n    select *\n    from {{ ref('final_visit_ids') }}\n\n),\nall_conditions as (\n\n    select fv.VISIT_OCCURRENCE_ID_NEW as episode_id,\n       p.id as patient_id,\n       e.start as note_date,\n       p.gender as gender,\n       c.pregnant as pregnant,\n       c.cough as cough,\n       c.fever as fever,\n       c.diabetes as diabetes,\n       c.hypertension as hypertension,\n       c.infarction_history as infarction_history,\n       o.smoker as smoker\n    from encounter e\n    inner join patients p on e.patient = p.id\n    inner join conditions_pivot c on e.id = c.encounter\n    inner join observations_pivot o on e.id = o.encounter\n    inner join final_visit_ids fv on fv.encounter_id = e.id\n),\nfinal_table as (\n\n    select episode_id,\n           patient_id,\n           gender,\n           min(note_date) as note_date,\n           bool_or(pregnant) as pregnant,\n           bool_or(cough) as cough,\n           bool_or(fever) as fever,\n           bool_or(diabetes) as diabetes,\n           bool_or(hypertension) as hypertension,\n           bool_or(infarction_history) as infarction_history,\n           bool_or(smoker) as smoker,\n           floor(random() * 3 + 1)::int as note_type\n    from all_conditions\n    group by episode_id, patient_id, gender\n\n)\n\nselect\n     {{ create_id_from_str(\"concat('note_', episode_id::text)\") }} as note_id,\n     {{ create_id_from_str(\"patient_id::text\") }} as person_id,\n     NULL::bigint AS note_event_id,\n     1147070::int AS note_event_field_concept_id, -- visit_occurrence.visit_occurrence_id\n     note_date::date AS note_date,\n     note_date::timestamp AS note_datetime,\n     44814639::int AS note_type_concept_id, -- Inpatient note\n     42527620::int AS note_class_concept_id, -- Physician Hospital Note\n     NULL::varchar(250) AS note_title,\n     {{ generate_note_text('smoker', 'gender', 'pregnant', 'cough', 'fever', 'diabetes', 'hypertension', 'infarction_history', 'note_type') }} AS note_text,\n     32678::int AS encoding_concept_id, -- UTF-8\n     4182511::int AS language_concept_id, -- Spanish\n     NULL::bigint AS provider_id,\n     f.episode_id AS visit_occurrence_id,\n     NULL::bigint AS visit_detail_id,\n     NULL::varchar(50) AS note_source_value\nfrom final_table f", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.synthea.create_id_from_str", "macro.synthea.generate_note_text", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["source.synthea.iomed_raw.patients", "source.synthea.iomed_raw.conditions", "source.synthea.iomed_raw.observations", "source.synthea.iomed_raw.encounters", "model.synthea.final_visit_ids"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_note"], "unique_id": "model.synthea.stg_note", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_note.sql", "original_file_path": "models/derived/stg_note.sql", "name": "stg_note", "alias": "stg_note", "checksum": {"name": "sha256", "checksum": "8060cbe1a15f92c082a84f7b339acd1b7c8ebeb50f4645980140e5b0b0db7985"}, "tags": [], "refs": [["final_visit_ids"]], "sources": [["iomed_raw", "patients"], ["iomed_raw", "conditions"], ["iomed_raw", "observations"], ["iomed_raw", "encounters"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/derived/stg_note.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": true}, "created_at": 1666873494, "compiled_sql": "-- stg_note\n\n\n\nwith patients as (\n\n    select id,\n           gender\n    from \"iomed\".\"raw\".\"patients\"\n\n),\nconditions_pivot as (\n\n    select patient,\n           encounter,\n           case when code = '72892002' then true else false end as pregnant, -- Normal pregnancy\n           case when code = '49727002' then true else false end as cough, -- Cough (finding)\n           case when code = '386661006' then true else false end as fever, -- Fever (finding)\n           case when code = '44054006' then true else false end as diabetes, -- Diabetes\n           case when code = '59621000' then true else false end as hypertension, -- Hypertension\n           case when code = '399211009' then true else false end as infarction_history -- History of myocardial infarction (situation\n    from \"iomed\".\"raw\".\"conditions\"\n\n),\nobservations_pivot as (\n\n    select patient,\n           encounter,\n           case when value = 'Current every day smoker' then true else false end as smoker\n    from \"iomed\".\"raw\".\"observations\"\n\n),\nencounter as (\n\n    select id, patient, start\n    from \"iomed\".\"raw\".\"encounters\"\n\n),\nfinal_visit_ids  AS (\n\n    select *\n    from \"iomed\".\"cdm_dbt\".\"final_visit_ids\"\n\n),\nall_conditions as (\n\n    select fv.VISIT_OCCURRENCE_ID_NEW as episode_id,\n       p.id as patient_id,\n       e.start as note_date,\n       p.gender as gender,\n       c.pregnant as pregnant,\n       c.cough as cough,\n       c.fever as fever,\n       c.diabetes as diabetes,\n       c.hypertension as hypertension,\n       c.infarction_history as infarction_history,\n       o.smoker as smoker\n    from encounter e\n    inner join patients p on e.patient = p.id\n    inner join conditions_pivot c on e.id = c.encounter\n    inner join observations_pivot o on e.id = o.encounter\n    inner join final_visit_ids fv on fv.encounter_id = e.id\n),\nfinal_table as (\n\n    select episode_id,\n           patient_id,\n           gender,\n           min(note_date) as note_date,\n           bool_or(pregnant) as pregnant,\n           bool_or(cough) as cough,\n           bool_or(fever) as fever,\n           bool_or(diabetes) as diabetes,\n           bool_or(hypertension) as hypertension,\n           bool_or(infarction_history) as infarction_history,\n           bool_or(smoker) as smoker,\n           floor(random() * 3 + 1)::int as note_type\n    from all_conditions\n    group by episode_id, patient_id, gender\n\n)\n\nselect\n     \n    abs(('x' || substr(md5(concat('note_', episode_id::text)), 1, 16))::bit(64)::bigint)\n as note_id,\n     \n    abs(('x' || substr(md5(patient_id::text), 1, 16))::bit(64)::bigint)\n as person_id,\n     NULL::bigint AS note_event_id,\n     1147070::int AS note_event_field_concept_id, -- visit_occurrence.visit_occurrence_id\n     note_date::date AS note_date,\n     note_date::timestamp AS note_datetime,\n     44814639::int AS note_type_concept_id, -- Inpatient note\n     42527620::int AS note_class_concept_id, -- Physician Hospital Note\n     NULL::varchar(250) AS note_title,\n     \n\n(case when note_type = 1 then\n        'Acude paciente ' ||\n        case when diabetes is true then 'diab\u00e9tico y ' else '' end ||\n        case when smoker is true then 'fumador ' else 'no fumador ' end ||\n        case when gender = 'M' then 'varon' else 'mujer' end ||\n        case when pregnant is true then ' y embarazada.' else '.' end ||\n        case when cough is true then\n            case when fever is true then ' Presenta tos y fiebre' else ' Presenta tos' end\n        else\n            case when fever is true then ' Tiene bastante fiebre' else '' end\n        end  ||\n        case when hypertension is true then ' Tiene antecendentes de hipertensi\u00f3n. ' else ' No tiene antecedentes de hipertensi\u00f3n. ' end ||\n        case when infarction_history is true then '. Sufri\u00f3 un infarto de miocardio en el pasado.' else '' end\n\n\n    when note_type = 2 then\n        case when gender = 'M' then 'Hombre ' else 'Mujer ' end ||\n        case when pregnant is true then 'embarazada ' else '' end || 'acude a consulta, ' ||\n        case when smoker is true then\n            case when gender = 'M' then 'fumador diario' else 'fumadora diaria' end\n        else\n            case when gender = 'M' then 'no fumador. ' else 'no fumadora. ' end\n        end  ||\n        case when diabetes is true then 'Sufre diabetes. ' else '' end ||\n        case when cough is true then\n            case when fever is true then 'Con bastante tos y presenta algo de fiebre.' else 'Con bastante tos.' end\n        else\n            case when fever is true then 'Presenta algo de fiebre.' else '' end\n        end  ||\n        case when hypertension is true then 'Paciente con hipertensi\u00f3n.' else 'No tiene hipertensi\u00f3n. ' end ||\n        case when infarction_history is true then 'Tuvo un infarto de miocardio hace unos a\u00f1os.' else '' end\n\n    when note_type = 3 then\n        'Se presenta en consulta ' ||\n        case when gender = 'M' then 'un hombre ' else 'una mujer ' end ||\n        case when cough is true then 'con bastante tos ' else '' end ||\n        case when smoker is true then 'y que fuma todos los d\u00edas. ' else 'y que no fuma nada. ' end  ||\n        case when fever is true then 'Presenta algo de fiebre.' else '' end ||\n        case when pregnant is true then 'Est\u00e1 embarazada. ' else '' end ||\n        case when diabetes is true then\n            case when hypertension is true then 'Paciente diab\u00e9tico y con hipertensi\u00f3n.' else 'Paciente diab\u00e9tico.' end\n        else\n            case when hypertension is true then 'Tiene hipertensi\u00f3n.' else ' No hipertenso. ' end\n        end  ||\n        case when infarction_history is true then 'Comenta haber tenido un infarto hace un tiempo.' else '' end\n\n    end)\n\n AS note_text,\n     32678::int AS encoding_concept_id, -- UTF-8\n     4182511::int AS language_concept_id, -- Spanish\n     NULL::bigint AS provider_id,\n     f.episode_id AS visit_occurrence_id,\n     NULL::bigint AS visit_detail_id,\n     NULL::varchar(50) AS note_source_value\nfrom final_table f", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"stg_note\""}, "model.synthea.stg_provider": {"raw_sql": "-- stg_provider\n\n{{ config(\n    materialized='table_unlogged',\n\tenabled=true\n)\n}}\n\n\n    select\n        0::bigint as provider_id, -- NOT NULL (change variable name if necessary)\n        null::varchar(255) as provider_name,\n        null::varchar(20) as npi,\n        null::varchar(20) as dea,\n        0::int as specialty_concept_id, -- NOT NULL\n        null::bigint as care_site_id,\n        null::int as year_of_birth,\n        0::int as gender_concept_id, -- NOT NULL\n        null::text as provider_source_value,\n        null::text as specialty_source_value,\n        0::int as specialty_source_concept_id, -- NOT NULL\n        null::text as gender_source_value,\n        0::int as gender_source_concept_id -- NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_provider"], "unique_id": "model.synthea.stg_provider", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_provider.sql", "original_file_path": "models/derived/stg_provider.sql", "name": "stg_provider", "alias": "stg_provider", "checksum": {"name": "sha256", "checksum": "eb3b275342035ce4154dbb1234c9d37b2f3bfa3c656ef804f722c2c37c924a4c"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/derived/stg_provider.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": true}, "created_at": 1666873494, "compiled_sql": "-- stg_provider\n\n\n\n\n    select\n        0::bigint as provider_id, -- NOT NULL (change variable name if necessary)\n        null::varchar(255) as provider_name,\n        null::varchar(20) as npi,\n        null::varchar(20) as dea,\n        0::int as specialty_concept_id, -- NOT NULL\n        null::bigint as care_site_id,\n        null::int as year_of_birth,\n        0::int as gender_concept_id, -- NOT NULL\n        null::text as provider_source_value,\n        null::text as specialty_source_value,\n        0::int as specialty_source_concept_id, -- NOT NULL\n        null::text as gender_source_value,\n        0::int as gender_source_concept_id -- NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"stg_provider\""}, "model.synthea.stg_measurement": {"raw_sql": "-- stg_measurement\n\n{{ config (\n    materialized='table_unlogged',\n    enabled=true\n)\n}}\n\n\nWITH final_visit_ids  AS (\n\n    SELECT * FROM {{ ref('final_visit_ids') }}\n\n),\nsource_to_source_vocab_map AS (\n\n    SELECT * FROM {{ ref('source_to_source_vocab_map') }}\n    WHERE source_vocabulary_id in ('SNOMED', 'LOINC') -- SNOMED: measurements from procedures, LOINC: measurements from observations\n\n),\nsource_to_standard_vocab_map AS (\n\n    SELECT * FROM {{ ref('source_to_standard_vocab_map') }}\n    WHERE source_vocabulary_id in ('SNOMED', 'LOINC') -- SNOMED: measurements from procedures, LOINC: measurements from observations\n        AND source_domain_id = 'Measurement'\n        AND target_domain_id = 'Measurement'\n        AND target_standard_concept = 'S'\n        AND target_invalid_reason IS NULL\n\n),\nprocedures_num AS (\n\n    SELECT *,\n           row_number() over (partition by encounter order by encounter) as n_procedures -- To get a PK for measurement (measurement_id)\n    FROM {{ source('iomed_raw', 'procedures') }}\n\n),\nobservations_num AS (\n\n    SELECT *,\n           row_number() over (partition by encounter order by encounter) as n_observations -- To get a PK for measurement (measurement_id)\n    FROM {{ source('iomed_raw', 'observations') }}\n\n),\nperson AS (\n\n    SELECT * FROM {{ ref('person') }}\n\n)\n\nSELECT\n    {{ create_id_from_str(\"concat('procedures_measurement_', encounter::text, '_', n_procedures::text)\") }} AS measurement_id,\n    p.person_id AS person_id,\n    case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end AS measurement_concept_id,\n    pr.start::date AS measurement_date,\n    pr.start AS measurement_datetime,\n    pr.start::time AS measurement_time,\n    5001 AS measurement_type_concept_id, -- Test ordered through EHR\n    null::int AS operator_concept_id,\n    null::float AS value_as_number,\n    null::int AS value_as_concept_id,\n    null::int AS unit_concept_id,\n    null::float AS range_low,\n    null::float AS range_high,\n    null::bigint AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    null::bigint AS visit_detail_id,\n    pr.code AS measurement_source_value,\n    case when srctosrcvm.target_concept_id is NULL then 0 else srctosrcvm.target_concept_id end AS measurement_source_concept_id,\n    null::varchar(50) AS unit_source_value,\n    null::int AS unit_source_concept_id,\n    null::varchar(50) AS value_source_value,\n    null::int AS measurement_event_id,\n    null::int AS meas_event_field_concept_id\nfrom procedures_num pr\njoin source_to_standard_vocab_map srctostdvm\n    on srctostdvm.source_code = pr.code\nleft join source_to_source_vocab_map srctosrcvm\n    on srctosrcvm.source_code = pr.code\njoin final_visit_ids fv\n    on fv.encounter_id = pr.encounter\njoin person p\n  on p.person_source_value    = pr.patient\n\nunion all\n\nSELECT\n    {{ create_id_from_str(\"concat('observation_measurement_', encounter::text, '_', n_observations::text)\") }} AS measurement_id,\n    p.person_id AS person_id,\n    case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end AS measurement_concept_id,\n    o.date::date AS measurement_date,\n    o.date::timestamp AS measurement_datetime,\n    o.date::time AS measurement_time,\n    5001 AS measurement_type_concept_id,  -- Test ordered through EHR\n    null::int AS operator_concept_id,\n    null::float AS value_as_number,\n    null::int AS value_as_concept_id,\n    null::int AS unit_concept_id,\n    null::float AS range_low,\n    null::float AS range_high,\n    null::bigint AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    null::bigint AS visit_detail_id,\n    o.code AS measurement_source_value,\n    case when srctosrcvm.target_concept_id is NULL then 0 else srctosrcvm.target_concept_id end AS measurement_source_concept_id,\n    null::varchar(50) AS unit_source_value,\n    null::int AS unit_source_concept_id,\n    null::varchar(50) AS value_source_value,\n    null::int AS measurement_event_id,\n    null::int AS meas_event_field_concept_id\nfrom observations_num o\njoin source_to_standard_vocab_map srctostdvm\n    on srctostdvm.source_code = o.code\nleft join source_to_source_vocab_map srctosrcvm\n    on srctosrcvm.source_code = o.code\njoin final_visit_ids fv\n    on fv.encounter_id = o.encounter\njoin person p\n  on p.person_source_value    = o.patient", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.synthea.create_id_from_str", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["source.synthea.iomed_raw.procedures", "source.synthea.iomed_raw.observations", "model.synthea.final_visit_ids", "model.synthea.source_to_source_vocab_map", "model.synthea.source_to_standard_vocab_map", "model.synthea.person"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_measurement"], "unique_id": "model.synthea.stg_measurement", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_measurement.sql", "original_file_path": "models/derived/stg_measurement.sql", "name": "stg_measurement", "alias": "stg_measurement", "checksum": {"name": "sha256", "checksum": "4c331683e230fcce37aae15b9b55c30a1ad82b91d11369a39dc8095dad385022"}, "tags": [], "refs": [["final_visit_ids"], ["source_to_source_vocab_map"], ["source_to_standard_vocab_map"], ["person"]], "sources": [["iomed_raw", "procedures"], ["iomed_raw", "observations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/derived/stg_measurement.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": true}, "created_at": 1666873494, "compiled_sql": "-- stg_measurement\n\n\n\n\nWITH final_visit_ids  AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"final_visit_ids\"\n\n),\nsource_to_source_vocab_map AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"source_to_source_vocab_map\"\n    WHERE source_vocabulary_id in ('SNOMED', 'LOINC') -- SNOMED: measurements from procedures, LOINC: measurements from observations\n\n),\nsource_to_standard_vocab_map AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"source_to_standard_vocab_map\"\n    WHERE source_vocabulary_id in ('SNOMED', 'LOINC') -- SNOMED: measurements from procedures, LOINC: measurements from observations\n        AND source_domain_id = 'Measurement'\n        AND target_domain_id = 'Measurement'\n        AND target_standard_concept = 'S'\n        AND target_invalid_reason IS NULL\n\n),\nprocedures_num AS (\n\n    SELECT *,\n           row_number() over (partition by encounter order by encounter) as n_procedures -- To get a PK for measurement (measurement_id)\n    FROM \"iomed\".\"raw\".\"procedures\"\n\n),\nobservations_num AS (\n\n    SELECT *,\n           row_number() over (partition by encounter order by encounter) as n_observations -- To get a PK for measurement (measurement_id)\n    FROM \"iomed\".\"raw\".\"observations\"\n\n),\nperson AS (\n\n    SELECT * FROM \"iomed\".\"cdm\".\"person\"\n\n)\n\nSELECT\n    \n    abs(('x' || substr(md5(concat('procedures_measurement_', encounter::text, '_', n_procedures::text)), 1, 16))::bit(64)::bigint)\n AS measurement_id,\n    p.person_id AS person_id,\n    case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end AS measurement_concept_id,\n    pr.start::date AS measurement_date,\n    pr.start AS measurement_datetime,\n    pr.start::time AS measurement_time,\n    5001 AS measurement_type_concept_id, -- Test ordered through EHR\n    null::int AS operator_concept_id,\n    null::float AS value_as_number,\n    null::int AS value_as_concept_id,\n    null::int AS unit_concept_id,\n    null::float AS range_low,\n    null::float AS range_high,\n    null::bigint AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    null::bigint AS visit_detail_id,\n    pr.code AS measurement_source_value,\n    case when srctosrcvm.target_concept_id is NULL then 0 else srctosrcvm.target_concept_id end AS measurement_source_concept_id,\n    null::varchar(50) AS unit_source_value,\n    null::int AS unit_source_concept_id,\n    null::varchar(50) AS value_source_value,\n    null::int AS measurement_event_id,\n    null::int AS meas_event_field_concept_id\nfrom procedures_num pr\njoin source_to_standard_vocab_map srctostdvm\n    on srctostdvm.source_code = pr.code\nleft join source_to_source_vocab_map srctosrcvm\n    on srctosrcvm.source_code = pr.code\njoin final_visit_ids fv\n    on fv.encounter_id = pr.encounter\njoin person p\n  on p.person_source_value    = pr.patient\n\nunion all\n\nSELECT\n    \n    abs(('x' || substr(md5(concat('observation_measurement_', encounter::text, '_', n_observations::text)), 1, 16))::bit(64)::bigint)\n AS measurement_id,\n    p.person_id AS person_id,\n    case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end AS measurement_concept_id,\n    o.date::date AS measurement_date,\n    o.date::timestamp AS measurement_datetime,\n    o.date::time AS measurement_time,\n    5001 AS measurement_type_concept_id,  -- Test ordered through EHR\n    null::int AS operator_concept_id,\n    null::float AS value_as_number,\n    null::int AS value_as_concept_id,\n    null::int AS unit_concept_id,\n    null::float AS range_low,\n    null::float AS range_high,\n    null::bigint AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    null::bigint AS visit_detail_id,\n    o.code AS measurement_source_value,\n    case when srctosrcvm.target_concept_id is NULL then 0 else srctosrcvm.target_concept_id end AS measurement_source_concept_id,\n    null::varchar(50) AS unit_source_value,\n    null::int AS unit_source_concept_id,\n    null::varchar(50) AS value_source_value,\n    null::int AS measurement_event_id,\n    null::int AS meas_event_field_concept_id\nfrom observations_num o\njoin source_to_standard_vocab_map srctostdvm\n    on srctostdvm.source_code = o.code\nleft join source_to_source_vocab_map srctosrcvm\n    on srctosrcvm.source_code = o.code\njoin final_visit_ids fv\n    on fv.encounter_id = o.encounter\njoin person p\n  on p.person_source_value    = o.patient", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"stg_measurement\""}, "model.synthea.stg_care_site": {"raw_sql": "-- stg_care_site\n\n{{ config(\n   materialized='table_unlogged',\n   enabled=true\n )\n}}\n\nselect\n    0::bigint as care_site_id, -- NOT NULL\n    'Hospital'::varchar(255) as care_site_name,\n    0::int as place_of_service_concept_id, -- NOT NULL\n    0::bigint as location_id,\n    'Hospital'::text as care_site_source_value,\n    'Hospital'::text as place_of_service_source_value", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_care_site"], "unique_id": "model.synthea.stg_care_site", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_care_site.sql", "original_file_path": "models/derived/stg_care_site.sql", "name": "stg_care_site", "alias": "stg_care_site", "checksum": {"name": "sha256", "checksum": "88bb17d2a6054b600034355516efcc3e869f6043ede59f3a62c37187572f39d7"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/derived/stg_care_site.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": true}, "created_at": 1666873494, "compiled_sql": "-- stg_care_site\n\n\n\nselect\n    0::bigint as care_site_id, -- NOT NULL\n    'Hospital'::varchar(255) as care_site_name,\n    0::int as place_of_service_concept_id, -- NOT NULL\n    0::bigint as location_id,\n    'Hospital'::text as care_site_source_value,\n    'Hospital'::text as place_of_service_source_value", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"stg_care_site\""}, "model.synthea.stg_death": {"raw_sql": "-- stg_death\n\n{{ config(\n   materialized='table_unlogged',\n   enabled=true\n )\n}}\n\nwith patients as (\n\n    select * from {{ source('iomed_raw', 'patients') }}\n\n),\nperson as (\n\n    select * from {{ ref('person') }}\n\n),\ndeath as (\n    select\n        p.person_id::bigint as person_id, -- NOT NULL\n        deathdate::date as death_date, -- NOT NULL\n        deathdate::timestamp as death_datetime,\n        0::integer as death_type_concept_id, -- NOT NULL\n        null::integer as cause_concept_id,\n        null::text as cause_source_value,\n        null::integer as cause_source_concept_id\n    from patients pa\n    inner join person p\n        on pa.id = p.person_source_value -- Change variable name if necessary\n    where deathdate is not null\n)\n\nselect * from death", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["source.synthea.iomed_raw.patients", "model.synthea.person"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_death"], "unique_id": "model.synthea.stg_death", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_death.sql", "original_file_path": "models/derived/stg_death.sql", "name": "stg_death", "alias": "stg_death", "checksum": {"name": "sha256", "checksum": "61843b76c887511e76986f80cea984fa4febbe11bdff6d6729a31f5e6a71a0c2"}, "tags": [], "refs": [["person"]], "sources": [["iomed_raw", "patients"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/derived/stg_death.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": true}, "created_at": 1666873494, "compiled_sql": "-- stg_death\n\n\n\nwith patients as (\n\n    select * from \"iomed\".\"raw\".\"patients\"\n\n),\nperson as (\n\n    select * from \"iomed\".\"cdm\".\"person\"\n\n),\ndeath as (\n    select\n        p.person_id::bigint as person_id, -- NOT NULL\n        deathdate::date as death_date, -- NOT NULL\n        deathdate::timestamp as death_datetime,\n        0::integer as death_type_concept_id, -- NOT NULL\n        null::integer as cause_concept_id,\n        null::text as cause_source_value,\n        null::integer as cause_source_concept_id\n    from patients pa\n    inner join person p\n        on pa.id = p.person_source_value -- Change variable name if necessary\n    where deathdate is not null\n)\n\nselect * from death", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"stg_death\""}, "model.synthea.stg_condition_era": {"raw_sql": "{{ config(\n   materialized='table_unlogged',\n   enabled=true\n)\n}}\n\n-- More information: https://ohdsi.github.io/CommonDataModel/sqlScripts.html#Condition_Eras\n\nWITH cteConditionTarget AS (\n    SELECT co.PERSON_ID\n        ,co.condition_concept_id\n        ,co.CONDITION_START_DATE\n        ,COALESCE(co.CONDITION_END_DATE, (CONDITION_START_DATE + integer '1')) AS CONDITION_END_DATE\n    FROM {{ ref('condition_occurrence') }} co\n),\ncteCondEndDates AS (\n\n    SELECT PERSON_ID\n        ,CONDITION_CONCEPT_ID\n        ,(EVENT_DATE - integer '30') AS END_DATE -- unpad the end date\n    FROM (\n        SELECT E1.PERSON_ID\n            ,E1.CONDITION_CONCEPT_ID\n            ,E1.EVENT_DATE\n            ,COALESCE(E1.START_ORDINAL, MAX(E2.START_ORDINAL)) START_ORDINAL\n            ,E1.OVERALL_ORD\n        FROM (\n            SELECT PERSON_ID\n                ,CONDITION_CONCEPT_ID\n                ,EVENT_DATE\n                ,EVENT_TYPE\n                ,START_ORDINAL\n                ,ROW_NUMBER() OVER (\n                    PARTITION BY PERSON_ID\n                    ,CONDITION_CONCEPT_ID ORDER BY EVENT_DATE\n                        ,EVENT_TYPE\n                    ) AS OVERALL_ORD -- this re-numbers the inner UNION so all rows are numbered ordered by the event date\n            FROM (\n                -- select the start dates, assigning a row number to each\n                SELECT PERSON_ID\n                    ,CONDITION_CONCEPT_ID\n                    ,CONDITION_START_DATE AS EVENT_DATE\n                    ,- 1 AS EVENT_TYPE\n                    ,ROW_NUMBER() OVER (\n                        PARTITION BY PERSON_ID\n                        ,CONDITION_CONCEPT_ID ORDER BY CONDITION_START_DATE\n                        ) AS START_ORDINAL\n                FROM cteConditionTarget\n\n                UNION ALL\n\n                -- pad the end dates by 30 to allow a grace period for overlapping ranges.\n                SELECT PERSON_ID\n                    ,CONDITION_CONCEPT_ID\n                    ,(CONDITION_END_DATE + integer '30')\n                    ,1 AS EVENT_TYPE\n                    ,NULL\n                FROM cteConditionTarget\n                ) RAWDATA\n            ) E1\n        INNER JOIN (\n            SELECT PERSON_ID\n                ,CONDITION_CONCEPT_ID\n                ,CONDITION_START_DATE AS EVENT_DATE\n                ,ROW_NUMBER() OVER (\n                    PARTITION BY PERSON_ID\n                    ,CONDITION_CONCEPT_ID ORDER BY CONDITION_START_DATE\n                    ) AS START_ORDINAL\n            FROM cteConditionTarget\n            ) E2 ON E1.PERSON_ID = E2.PERSON_ID\n            AND E1.CONDITION_CONCEPT_ID = E2.CONDITION_CONCEPT_ID\n            AND E2.EVENT_DATE <= E1.EVENT_DATE\n        GROUP BY E1.PERSON_ID\n            ,E1.CONDITION_CONCEPT_ID\n            ,E1.EVENT_DATE\n            ,E1.START_ORDINAL\n            ,E1.OVERALL_ORD\n        ) E\n    WHERE (2 * E.START_ORDINAL) - E.OVERALL_ORD = 0\n\n),\ncteConditionEnds AS (\n    SELECT c.PERSON_ID\n    ,c.CONDITION_CONCEPT_ID\n    ,c.CONDITION_START_DATE\n    ,MIN(e.END_DATE) AS ERA_END_DATE\n    FROM cteConditionTarget c\n    INNER JOIN cteCondEndDates e ON c.PERSON_ID = e.PERSON_ID\n        AND c.CONDITION_CONCEPT_ID = e.CONDITION_CONCEPT_ID\n        AND e.END_DATE >= c.CONDITION_START_DATE\n    GROUP BY c.PERSON_ID\n        ,c.CONDITION_CONCEPT_ID\n        ,c.CONDITION_START_DATE\n),\nfinal_condition_era AS (\n    SELECT row_number() OVER (\n        ORDER BY person_id\n        ) AS condition_era_id\n    ,person_id\n    ,CONDITION_CONCEPT_ID\n    ,min(CONDITION_START_DATE)::date AS CONDITION_ERA_START_DATE\n    ,ERA_END_DATE::date AS CONDITION_ERA_END_DATE\n    ,COUNT(*) AS CONDITION_OCCURRENCE_COUNT\nFROM cteConditionEnds\nGROUP BY person_id\n    ,CONDITION_CONCEPT_ID\n    ,ERA_END_DATE\n)\n\nSELECT * FROM final_condition_era", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.condition_occurrence"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_condition_era"], "unique_id": "model.synthea.stg_condition_era", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_condition_era.sql", "original_file_path": "models/derived/stg_condition_era.sql", "name": "stg_condition_era", "alias": "stg_condition_era", "checksum": {"name": "sha256", "checksum": "8f8f9f06074abc2d416a5050347df485d98ad6bcb106d34076bb3b197a3556bd"}, "tags": [], "refs": [["condition_occurrence"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/derived/stg_condition_era.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": true}, "created_at": 1666873494, "compiled_sql": "\n\n-- More information: https://ohdsi.github.io/CommonDataModel/sqlScripts.html#Condition_Eras\n\nWITH cteConditionTarget AS (\n    SELECT co.PERSON_ID\n        ,co.condition_concept_id\n        ,co.CONDITION_START_DATE\n        ,COALESCE(co.CONDITION_END_DATE, (CONDITION_START_DATE + integer '1')) AS CONDITION_END_DATE\n    FROM \"iomed\".\"cdm\".\"condition_occurrence\" co\n),\ncteCondEndDates AS (\n\n    SELECT PERSON_ID\n        ,CONDITION_CONCEPT_ID\n        ,(EVENT_DATE - integer '30') AS END_DATE -- unpad the end date\n    FROM (\n        SELECT E1.PERSON_ID\n            ,E1.CONDITION_CONCEPT_ID\n            ,E1.EVENT_DATE\n            ,COALESCE(E1.START_ORDINAL, MAX(E2.START_ORDINAL)) START_ORDINAL\n            ,E1.OVERALL_ORD\n        FROM (\n            SELECT PERSON_ID\n                ,CONDITION_CONCEPT_ID\n                ,EVENT_DATE\n                ,EVENT_TYPE\n                ,START_ORDINAL\n                ,ROW_NUMBER() OVER (\n                    PARTITION BY PERSON_ID\n                    ,CONDITION_CONCEPT_ID ORDER BY EVENT_DATE\n                        ,EVENT_TYPE\n                    ) AS OVERALL_ORD -- this re-numbers the inner UNION so all rows are numbered ordered by the event date\n            FROM (\n                -- select the start dates, assigning a row number to each\n                SELECT PERSON_ID\n                    ,CONDITION_CONCEPT_ID\n                    ,CONDITION_START_DATE AS EVENT_DATE\n                    ,- 1 AS EVENT_TYPE\n                    ,ROW_NUMBER() OVER (\n                        PARTITION BY PERSON_ID\n                        ,CONDITION_CONCEPT_ID ORDER BY CONDITION_START_DATE\n                        ) AS START_ORDINAL\n                FROM cteConditionTarget\n\n                UNION ALL\n\n                -- pad the end dates by 30 to allow a grace period for overlapping ranges.\n                SELECT PERSON_ID\n                    ,CONDITION_CONCEPT_ID\n                    ,(CONDITION_END_DATE + integer '30')\n                    ,1 AS EVENT_TYPE\n                    ,NULL\n                FROM cteConditionTarget\n                ) RAWDATA\n            ) E1\n        INNER JOIN (\n            SELECT PERSON_ID\n                ,CONDITION_CONCEPT_ID\n                ,CONDITION_START_DATE AS EVENT_DATE\n                ,ROW_NUMBER() OVER (\n                    PARTITION BY PERSON_ID\n                    ,CONDITION_CONCEPT_ID ORDER BY CONDITION_START_DATE\n                    ) AS START_ORDINAL\n            FROM cteConditionTarget\n            ) E2 ON E1.PERSON_ID = E2.PERSON_ID\n            AND E1.CONDITION_CONCEPT_ID = E2.CONDITION_CONCEPT_ID\n            AND E2.EVENT_DATE <= E1.EVENT_DATE\n        GROUP BY E1.PERSON_ID\n            ,E1.CONDITION_CONCEPT_ID\n            ,E1.EVENT_DATE\n            ,E1.START_ORDINAL\n            ,E1.OVERALL_ORD\n        ) E\n    WHERE (2 * E.START_ORDINAL) - E.OVERALL_ORD = 0\n\n),\ncteConditionEnds AS (\n    SELECT c.PERSON_ID\n    ,c.CONDITION_CONCEPT_ID\n    ,c.CONDITION_START_DATE\n    ,MIN(e.END_DATE) AS ERA_END_DATE\n    FROM cteConditionTarget c\n    INNER JOIN cteCondEndDates e ON c.PERSON_ID = e.PERSON_ID\n        AND c.CONDITION_CONCEPT_ID = e.CONDITION_CONCEPT_ID\n        AND e.END_DATE >= c.CONDITION_START_DATE\n    GROUP BY c.PERSON_ID\n        ,c.CONDITION_CONCEPT_ID\n        ,c.CONDITION_START_DATE\n),\nfinal_condition_era AS (\n    SELECT row_number() OVER (\n        ORDER BY person_id\n        ) AS condition_era_id\n    ,person_id\n    ,CONDITION_CONCEPT_ID\n    ,min(CONDITION_START_DATE)::date AS CONDITION_ERA_START_DATE\n    ,ERA_END_DATE::date AS CONDITION_ERA_END_DATE\n    ,COUNT(*) AS CONDITION_OCCURRENCE_COUNT\nFROM cteConditionEnds\nGROUP BY person_id\n    ,CONDITION_CONCEPT_ID\n    ,ERA_END_DATE\n)\n\nSELECT * FROM final_condition_era", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"stg_condition_era\""}, "model.synthea.stg_location": {"raw_sql": "-- stg_location\n\n{{ config(\n   materialized='table_unlogged',\n   enabled=true\n )\n}}\n\nselect\n   0::bigint as location_id, -- NOT NULL\n   null::varchar(50) as address_1,\n   null::varchar(50) as address_2,\n   null::varchar(50) as city,\n   null::varchar(2) as state,\n   null::varchar(9) as zip,\n   null::varchar(20) as county,\n   'hospital_edge'::text as location_source_value,\n   0::int as country_concept_id,\n   'Spain'::varchar(100) as country_source_value,\n   null::numeric as latitude,\n   null::numeric as longitude", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_location"], "unique_id": "model.synthea.stg_location", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_location.sql", "original_file_path": "models/derived/stg_location.sql", "name": "stg_location", "alias": "stg_location", "checksum": {"name": "sha256", "checksum": "3e7f24af29e0ba0b752055af1a192084559524ba33b91e2876728399de9f63b4"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/derived/stg_location.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": true}, "created_at": 1666873494, "compiled_sql": "-- stg_location\n\n\n\nselect\n   0::bigint as location_id, -- NOT NULL\n   null::varchar(50) as address_1,\n   null::varchar(50) as address_2,\n   null::varchar(50) as city,\n   null::varchar(2) as state,\n   null::varchar(9) as zip,\n   null::varchar(20) as county,\n   'hospital_edge'::text as location_source_value,\n   0::int as country_concept_id,\n   'Spain'::varchar(100) as country_source_value,\n   null::numeric as latitude,\n   null::numeric as longitude", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"stg_location\""}, "model.synthea.stg_drug_exposure": {"raw_sql": "-- stg_drug_exposure\n\n{{ config(\n    materialized='table_unlogged',\n\tenabled=true\n  )\n}}\n\nWITH person AS (\n\n    SELECT * FROM {{ ref('person') }}\n\n),\nsource_to_standard_vocab_map AS (\n\n    SELECT * FROM {{ ref('source_to_standard_vocab_map') }}\n    WHERE source_vocabulary_id in ('RxNorm', 'CVX') -- RxNorm: drugs from medications, CVX: drugs from immunizations\n        AND source_domain_id = 'Drug'\n        AND target_domain_id = 'Drug'\n        AND target_standard_concept = 'S'\n        AND target_invalid_reason IS NULL\n\n),\nfinal_visit_ids AS (\n\n    SELECT * FROM {{ ref('final_visit_ids') }}\n\n),\nsource_to_source_vocab_map AS (\n\n    SELECT * FROM {{ ref('source_to_source_vocab_map') }}\n    WHERE source_vocabulary_id in ('RxNorm', 'CVX')  -- RxNorm: drugs from medications, CVX: drugs from immunizations\n\n),\nmedications_num AS (\n\n    SELECT *,\n           row_number() over (partition by encounter order by encounter) as n_medications -- To get a PK for drug_exposure (drug_exposure_id)\n    FROM {{ source('iomed_raw', 'medications') }}\n\n),\nimmunizations_num AS (\n\n    SELECT *,\n           row_number() over (partition by encounter order by encounter) as n_immunizations -- To get a PK for drug_exposure (drug_exposure_id)\n    FROM {{ source('iomed_raw', 'immunizations') }}\n\n),\nmedications_mapped as (\n\n    select m.*, srctostdvm.target_concept_id, srctostdvm.source_concept_id, srctostdvm.target_domain_id\n    from medications_num m\n    left join source_to_standard_vocab_map srctostdvm\n        on srctostdvm.source_code = m.code\n    left join source_to_source_vocab_map srctosrcvm\n        on srctosrcvm.source_code = m.code\n),\nimmunizations_mapped as (\n\n    select i.*, srctostdvm.target_concept_id, srctostdvm.source_concept_id, srctostdvm.target_domain_id\n    from immunizations_num i\n    left join source_to_standard_vocab_map srctostdvm\n        on srctostdvm.source_code = i.code\n    left join source_to_source_vocab_map srctosrcvm\n        on srctosrcvm.source_code = i.code\n)\n\nSELECT\n    {{ create_id_from_str(\"concat('medications_drug_', encounter::text, '_', target_concept_id::text)\") }} AS drug_exposure_id,\n    p.person_id AS person_id,\n    case when m.target_concept_id is NULL then 0 else m.target_concept_id end AS drug_concept_id,\n    m.start AS drug_exposure_start_date,\n    m.start AS drug_exposure_start_datetime,\n    coalesce(m.stop,m.start) AS drug_exposure_end_date,\n    coalesce(m.stop,m.start) AS drug_exposure_end_datetime,\n    m.stop AS verbatim_end_date,\n    38000177 AS drug_type_concept_id, -- Prescription written\n    null::varchar AS stop_reason,\n    0 AS refills,\n    0 AS quantity,\n    coalesce(EXTRACT(DAY FROM (m.stop-m.start))::int,0) AS days_supply,\n    null::varchar AS sig,\n    0 AS route_concept_id,\n    0 AS lot_number,\n    NULL::bigint AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    null::bigint AS visit_detail_id,\n    m.code AS drug_source_value,\n    case when m.target_concept_id is NULL then 0 else m.target_concept_id end AS drug_source_concept_id,\n    null::varchar AS route_source_value,\n    null::varchar AS dose_unit_source_value\nfrom medications_mapped m\njoin final_visit_ids fv\n    on fv.encounter_id = m.encounter\njoin person p\n  on p.person_source_value    = m.patient\n\nunion all\n\nselect\n    {{ create_id_from_str(\"concat('immunizations_drug_', encounter::text, '_', n_immunizations::text)\") }} AS drug_exposure_id,\n    p.person_id AS person_id,\n    case when i.target_concept_id is NULL then 0 else i.target_concept_id end AS drug_concept_id,\n    i.date::date AS drug_exposure_start_date,\n    i.date::timestamp AS drug_exposure_start_datetime,\n    i.date::date AS drug_exposure_end_date,\n    i.date::timestamp AS drug_exposure_end_datetime,\n    i.date::date AS verbatim_end_date,\n    581452 AS drug_type_concept_id, -- Dispensed in Outpatient office\n    null::varchar AS stop_reason,\n    0 AS refills,\n    0 AS quantity,\n    0 AS days_supply,\n    null::varchar AS sig,\n    0 AS route_concept_id,\n    0 AS lot_number,\n    NULL::bigint AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    null::bigint AS visit_detail_id,\n    i.code AS drug_source_value,\n    case when i.target_concept_id is NULL then 0 else i.target_concept_id end AS drug_source_concept_id,\n    null::varchar AS route_source_value,\n    null::varchar AS dose_unit_source_value\nfrom immunizations_mapped i\njoin final_visit_ids fv\n    on fv.encounter_id = i.encounter\njoin person p\n  on p.person_source_value = i.patient", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.synthea.create_id_from_str", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["source.synthea.iomed_raw.medications", "source.synthea.iomed_raw.immunizations", "model.synthea.person", "model.synthea.source_to_standard_vocab_map", "model.synthea.final_visit_ids", "model.synthea.source_to_source_vocab_map"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_drug_exposure"], "unique_id": "model.synthea.stg_drug_exposure", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_drug_exposure.sql", "original_file_path": "models/derived/stg_drug_exposure.sql", "name": "stg_drug_exposure", "alias": "stg_drug_exposure", "checksum": {"name": "sha256", "checksum": "1abcb97a0d12de9226051ccc617fd1e4d794f51eab3f8e86d96f7d4e22de9159"}, "tags": [], "refs": [["person"], ["source_to_standard_vocab_map"], ["final_visit_ids"], ["source_to_source_vocab_map"]], "sources": [["iomed_raw", "medications"], ["iomed_raw", "immunizations"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/derived/stg_drug_exposure.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": true}, "created_at": 1666873494, "compiled_sql": "-- stg_drug_exposure\n\n\n\nWITH person AS (\n\n    SELECT * FROM \"iomed\".\"cdm\".\"person\"\n\n),\nsource_to_standard_vocab_map AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"source_to_standard_vocab_map\"\n    WHERE source_vocabulary_id in ('RxNorm', 'CVX') -- RxNorm: drugs from medications, CVX: drugs from immunizations\n        AND source_domain_id = 'Drug'\n        AND target_domain_id = 'Drug'\n        AND target_standard_concept = 'S'\n        AND target_invalid_reason IS NULL\n\n),\nfinal_visit_ids AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"final_visit_ids\"\n\n),\nsource_to_source_vocab_map AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"source_to_source_vocab_map\"\n    WHERE source_vocabulary_id in ('RxNorm', 'CVX')  -- RxNorm: drugs from medications, CVX: drugs from immunizations\n\n),\nmedications_num AS (\n\n    SELECT *,\n           row_number() over (partition by encounter order by encounter) as n_medications -- To get a PK for drug_exposure (drug_exposure_id)\n    FROM \"iomed\".\"raw\".\"medications\"\n\n),\nimmunizations_num AS (\n\n    SELECT *,\n           row_number() over (partition by encounter order by encounter) as n_immunizations -- To get a PK for drug_exposure (drug_exposure_id)\n    FROM \"iomed\".\"raw\".\"immunizations\"\n\n),\nmedications_mapped as (\n\n    select m.*, srctostdvm.target_concept_id, srctostdvm.source_concept_id, srctostdvm.target_domain_id\n    from medications_num m\n    left join source_to_standard_vocab_map srctostdvm\n        on srctostdvm.source_code = m.code\n    left join source_to_source_vocab_map srctosrcvm\n        on srctosrcvm.source_code = m.code\n),\nimmunizations_mapped as (\n\n    select i.*, srctostdvm.target_concept_id, srctostdvm.source_concept_id, srctostdvm.target_domain_id\n    from immunizations_num i\n    left join source_to_standard_vocab_map srctostdvm\n        on srctostdvm.source_code = i.code\n    left join source_to_source_vocab_map srctosrcvm\n        on srctosrcvm.source_code = i.code\n)\n\nSELECT\n    \n    abs(('x' || substr(md5(concat('medications_drug_', encounter::text, '_', target_concept_id::text)), 1, 16))::bit(64)::bigint)\n AS drug_exposure_id,\n    p.person_id AS person_id,\n    case when m.target_concept_id is NULL then 0 else m.target_concept_id end AS drug_concept_id,\n    m.start AS drug_exposure_start_date,\n    m.start AS drug_exposure_start_datetime,\n    coalesce(m.stop,m.start) AS drug_exposure_end_date,\n    coalesce(m.stop,m.start) AS drug_exposure_end_datetime,\n    m.stop AS verbatim_end_date,\n    38000177 AS drug_type_concept_id, -- Prescription written\n    null::varchar AS stop_reason,\n    0 AS refills,\n    0 AS quantity,\n    coalesce(EXTRACT(DAY FROM (m.stop-m.start))::int,0) AS days_supply,\n    null::varchar AS sig,\n    0 AS route_concept_id,\n    0 AS lot_number,\n    NULL::bigint AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    null::bigint AS visit_detail_id,\n    m.code AS drug_source_value,\n    case when m.target_concept_id is NULL then 0 else m.target_concept_id end AS drug_source_concept_id,\n    null::varchar AS route_source_value,\n    null::varchar AS dose_unit_source_value\nfrom medications_mapped m\njoin final_visit_ids fv\n    on fv.encounter_id = m.encounter\njoin person p\n  on p.person_source_value    = m.patient\n\nunion all\n\nselect\n    \n    abs(('x' || substr(md5(concat('immunizations_drug_', encounter::text, '_', n_immunizations::text)), 1, 16))::bit(64)::bigint)\n AS drug_exposure_id,\n    p.person_id AS person_id,\n    case when i.target_concept_id is NULL then 0 else i.target_concept_id end AS drug_concept_id,\n    i.date::date AS drug_exposure_start_date,\n    i.date::timestamp AS drug_exposure_start_datetime,\n    i.date::date AS drug_exposure_end_date,\n    i.date::timestamp AS drug_exposure_end_datetime,\n    i.date::date AS verbatim_end_date,\n    581452 AS drug_type_concept_id, -- Dispensed in Outpatient office\n    null::varchar AS stop_reason,\n    0 AS refills,\n    0 AS quantity,\n    0 AS days_supply,\n    null::varchar AS sig,\n    0 AS route_concept_id,\n    0 AS lot_number,\n    NULL::bigint AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    null::bigint AS visit_detail_id,\n    i.code AS drug_source_value,\n    case when i.target_concept_id is NULL then 0 else i.target_concept_id end AS drug_source_concept_id,\n    null::varchar AS route_source_value,\n    null::varchar AS dose_unit_source_value\nfrom immunizations_mapped i\njoin final_visit_ids fv\n    on fv.encounter_id = i.encounter\njoin person p\n  on p.person_source_value = i.patient", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"stg_drug_exposure\""}, "model.synthea.stg_observation": {"raw_sql": "-- stg_observation\n\n{{ config(\n   materialized='table_unlogged',\n   enabled=true\n)\n}}\n\nWITH final_visit_ids  AS (\n\n    SELECT * FROM {{ ref('final_visit_ids') }}\n\n),\nsource_to_source_vocab_map AS (\n\n    SELECT * FROM {{ ref('source_to_source_vocab_map') }}\n    WHERE source_vocabulary_id = 'SNOMED'\n\n),\nsource_to_standard_vocab_map AS (\n\n    SELECT * FROM {{ ref('source_to_standard_vocab_map') }}\n    WHERE source_vocabulary_id = 'SNOMED'\n        AND source_domain_id = 'Observation'\n        AND target_domain_id = 'Observation'\n        AND target_standard_concept = 'S'\n        AND target_invalid_reason IS NULL\n\n),\nallergies_num AS (\n\n    SELECT *,\n           row_number() over (partition by encounter order by encounter) as n_allergies -- To get a PK for observation (observation_id)\n    FROM {{ source('iomed_raw', 'allergies') }}\n\n),\nconditions_num AS (\n\n    SELECT *,\n           row_number() over (partition by encounter order by encounter) as n_conditions -- To get a PK for observation (observation_id)\n    FROM {{ source('iomed_raw', 'conditions') }}\n\n),\nperson AS (\n\n    SELECT * FROM {{ ref('person') }}\n\n)\n\nSELECT\n    {{ create_id_from_str(\"concat('allergies_observation_', encounter::text, '_', n_allergies::text)\") }} AS observation_id,\n    p.person_id AS person_id,\n    case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end AS observation_concept_id,\n    a.start AS observation_date,\n    a.start AS observation_datetime,\n    38000280 AS observation_type_concept_id, -- Observation recorded from EHR\n    null::float AS value_as_number,\n    null::varchar AS value_as_string,\n    0::int AS value_as_concept_id,\n    0::int AS qualifier_concept_id,\n    0::int AS unit_concept_id,\n    null::bigint AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    null::bigint AS visit_detail_id,\n    a.code AS observation_source_value,\n    case when srctosrcvm.target_concept_id is NULL then 0 else srctosrcvm.target_concept_id end AS observation_source_concept_id,\n    null::varchar AS unit_source_value,\n    null::varchar AS qualifier_source_value,\n    null::varchar AS value_source_value,\n    null::bigint AS observation_event_id,\n    0::int AS obs_event_field_concept_id\nfrom allergies_num a\nleft join source_to_standard_vocab_map srctostdvm\n    on srctostdvm.source_code = a.code\nleft join source_to_source_vocab_map srctosrcvm\n    on srctosrcvm.source_code = a.code\njoin final_visit_ids fv\n    on fv.encounter_id = a.encounter\njoin person p\n    on p.person_source_value = a.patient\n\nunion all\n\nSELECT\n    {{ create_id_from_str(\"concat('conditions_observation_', encounter::text, '_', n_conditions::text)\") }} AS observation_id,\n    p.person_id AS person_id,\n    case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end AS observation_concept_id,\n    c.start AS observation_date,\n    c.start AS observation_datetime,\n    38000276 AS observation_type_concept_id, -- Problem list from EHR\n    null::float AS value_as_number,\n    null::varchar AS value_as_string,\n    0::int AS value_as_concept_id,\n    0::int AS qualifier_concept_id,\n    0::int AS unit_concept_id,\n    null::bigint AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    null::bigint AS visit_detail_id,\n    c.code AS observation_source_value,\n    case when srctosrcvm.target_concept_id is NULL then 0 else srctosrcvm.target_concept_id end AS observation_source_concept_id,\n    null::varchar AS unit_source_value,\n    null::varchar AS qualifier_source_value,\n    null::varchar AS value_source_value,\n    null::bigint AS observation_event_id,\n    0::int AS obs_event_field_concept_id\nfrom conditions_num c\njoin source_to_standard_vocab_map srctostdvm\n    on srctostdvm.source_code = c.code\nleft join source_to_source_vocab_map srctosrcvm\n    on srctosrcvm.source_code = c.code\njoin final_visit_ids fv\n    on fv.encounter_id = c.encounter\njoin person p\n  on p.person_source_value = c.patient", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.synthea.create_id_from_str", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["source.synthea.iomed_raw.allergies", "source.synthea.iomed_raw.conditions", "model.synthea.final_visit_ids", "model.synthea.source_to_source_vocab_map", "model.synthea.source_to_standard_vocab_map", "model.synthea.person"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_observation"], "unique_id": "model.synthea.stg_observation", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_observation.sql", "original_file_path": "models/derived/stg_observation.sql", "name": "stg_observation", "alias": "stg_observation", "checksum": {"name": "sha256", "checksum": "c4eaec3d6a9657a4cc0eb43d9bed0df2131a60bb808d8a59719208a68d770239"}, "tags": [], "refs": [["final_visit_ids"], ["source_to_source_vocab_map"], ["source_to_standard_vocab_map"], ["person"]], "sources": [["iomed_raw", "allergies"], ["iomed_raw", "conditions"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/derived/stg_observation.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": true}, "created_at": 1666873494, "compiled_sql": "-- stg_observation\n\n\n\nWITH final_visit_ids  AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"final_visit_ids\"\n\n),\nsource_to_source_vocab_map AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"source_to_source_vocab_map\"\n    WHERE source_vocabulary_id = 'SNOMED'\n\n),\nsource_to_standard_vocab_map AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"source_to_standard_vocab_map\"\n    WHERE source_vocabulary_id = 'SNOMED'\n        AND source_domain_id = 'Observation'\n        AND target_domain_id = 'Observation'\n        AND target_standard_concept = 'S'\n        AND target_invalid_reason IS NULL\n\n),\nallergies_num AS (\n\n    SELECT *,\n           row_number() over (partition by encounter order by encounter) as n_allergies -- To get a PK for observation (observation_id)\n    FROM \"iomed\".\"raw\".\"allergies\"\n\n),\nconditions_num AS (\n\n    SELECT *,\n           row_number() over (partition by encounter order by encounter) as n_conditions -- To get a PK for observation (observation_id)\n    FROM \"iomed\".\"raw\".\"conditions\"\n\n),\nperson AS (\n\n    SELECT * FROM \"iomed\".\"cdm\".\"person\"\n\n)\n\nSELECT\n    \n    abs(('x' || substr(md5(concat('allergies_observation_', encounter::text, '_', n_allergies::text)), 1, 16))::bit(64)::bigint)\n AS observation_id,\n    p.person_id AS person_id,\n    case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end AS observation_concept_id,\n    a.start AS observation_date,\n    a.start AS observation_datetime,\n    38000280 AS observation_type_concept_id, -- Observation recorded from EHR\n    null::float AS value_as_number,\n    null::varchar AS value_as_string,\n    0::int AS value_as_concept_id,\n    0::int AS qualifier_concept_id,\n    0::int AS unit_concept_id,\n    null::bigint AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    null::bigint AS visit_detail_id,\n    a.code AS observation_source_value,\n    case when srctosrcvm.target_concept_id is NULL then 0 else srctosrcvm.target_concept_id end AS observation_source_concept_id,\n    null::varchar AS unit_source_value,\n    null::varchar AS qualifier_source_value,\n    null::varchar AS value_source_value,\n    null::bigint AS observation_event_id,\n    0::int AS obs_event_field_concept_id\nfrom allergies_num a\nleft join source_to_standard_vocab_map srctostdvm\n    on srctostdvm.source_code = a.code\nleft join source_to_source_vocab_map srctosrcvm\n    on srctosrcvm.source_code = a.code\njoin final_visit_ids fv\n    on fv.encounter_id = a.encounter\njoin person p\n    on p.person_source_value = a.patient\n\nunion all\n\nSELECT\n    \n    abs(('x' || substr(md5(concat('conditions_observation_', encounter::text, '_', n_conditions::text)), 1, 16))::bit(64)::bigint)\n AS observation_id,\n    p.person_id AS person_id,\n    case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end AS observation_concept_id,\n    c.start AS observation_date,\n    c.start AS observation_datetime,\n    38000276 AS observation_type_concept_id, -- Problem list from EHR\n    null::float AS value_as_number,\n    null::varchar AS value_as_string,\n    0::int AS value_as_concept_id,\n    0::int AS qualifier_concept_id,\n    0::int AS unit_concept_id,\n    null::bigint AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    null::bigint AS visit_detail_id,\n    c.code AS observation_source_value,\n    case when srctosrcvm.target_concept_id is NULL then 0 else srctosrcvm.target_concept_id end AS observation_source_concept_id,\n    null::varchar AS unit_source_value,\n    null::varchar AS qualifier_source_value,\n    null::varchar AS value_source_value,\n    null::bigint AS observation_event_id,\n    0::int AS obs_event_field_concept_id\nfrom conditions_num c\njoin source_to_standard_vocab_map srctostdvm\n    on srctostdvm.source_code = c.code\nleft join source_to_source_vocab_map srctosrcvm\n    on srctosrcvm.source_code = c.code\njoin final_visit_ids fv\n    on fv.encounter_id = c.encounter\njoin person p\n  on p.person_source_value = c.patient", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"stg_observation\""}, "model.synthea.stg_condition_occurrence": {"raw_sql": "-- stg_condition_occurrence\n\n{{ config(\n   materialized='table_unlogged',\n   enabled=true\n)\n}}\n\nWITH conditions_num AS (\n\n    SELECT *,\n           row_number() over (partition by encounter order by encounter) as n_condition -- To get a PK for condition_occurrence (condition_occurrence_id)\n    FROM {{ source('iomed_raw', 'conditions') }}\n\n),\nsource_to_standard_vocab_map AS (\n\n    SELECT * FROM {{ ref('source_to_standard_vocab_map') }}\n    WHERE source_vocabulary_id = 'SNOMED'\n        AND source_domain_id = 'Condition'\n        AND target_domain_id = 'Condition'\n        AND target_standard_concept = 'S'\n        AND target_invalid_reason IS NULL\n\n),\nsource_to_source_vocab_map AS (\n\n    SELECT * FROM {{ ref('source_to_source_vocab_map') }}\n    WHERE source_vocabulary_id = 'SNOMED'\n\n),\nfinal_visit_ids AS (\n\n    SELECT * FROM {{ ref('final_visit_ids') }}\n\n),\nperson AS (\n\n    SELECT * FROM {{ ref('person') }}\n\n)\n\nSELECT\n    {{ create_id_from_str(\"concat('condition_', encounter::text, '_', n_condition::text)\") }} AS condition_occurrence_id,\n    p.person_id AS person_id,\n    case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end AS condition_concept_id,\n    c.start AS condition_start_date,\n    c.start AS condition_start_datetime,\n    c.stop AS condition_end_date,\n    c.stop AS condition_end_datetime,\n    32020::int AS condition_type_concept_id, -- EHR encounter diagnosis\n    0::int AS condition_status_concept_id,\n    null::varchar(20) AS stop_reason,\n    null::int AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    null::bigint AS visit_detail_id,\n    c.code::varchar(50) AS condition_source_value,\n    case when srctosrcvm.target_concept_id is NULL then 0 else srctosrcvm.target_concept_id end AS condition_source_concept_id,\n    null::varchar(50) AS condition_status_source_value\nfrom conditions_num c\nleft join source_to_standard_vocab_map srctostdvm\n    on srctostdvm.source_code = c.code\nleft join source_to_source_vocab_map srctosrcvm\n    on srctosrcvm.source_code = c.code\njoin final_visit_ids fv\n    on fv.encounter_id = c.encounter\njoin person p on c.patient = p.person_source_value", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.synthea.create_id_from_str", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["source.synthea.iomed_raw.conditions", "model.synthea.source_to_standard_vocab_map", "model.synthea.source_to_source_vocab_map", "model.synthea.final_visit_ids", "model.synthea.person"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_condition_occurrence"], "unique_id": "model.synthea.stg_condition_occurrence", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_condition_occurrence.sql", "original_file_path": "models/derived/stg_condition_occurrence.sql", "name": "stg_condition_occurrence", "alias": "stg_condition_occurrence", "checksum": {"name": "sha256", "checksum": "0334c4e32ce8e35475354d3ed3314bf3fb3ec00f7e87304111a1f1df2e00b2e4"}, "tags": [], "refs": [["source_to_standard_vocab_map"], ["source_to_source_vocab_map"], ["final_visit_ids"], ["person"]], "sources": [["iomed_raw", "conditions"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/derived/stg_condition_occurrence.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": true}, "created_at": 1666873494, "compiled_sql": "-- stg_condition_occurrence\n\n\n\nWITH conditions_num AS (\n\n    SELECT *,\n           row_number() over (partition by encounter order by encounter) as n_condition -- To get a PK for condition_occurrence (condition_occurrence_id)\n    FROM \"iomed\".\"raw\".\"conditions\"\n\n),\nsource_to_standard_vocab_map AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"source_to_standard_vocab_map\"\n    WHERE source_vocabulary_id = 'SNOMED'\n        AND source_domain_id = 'Condition'\n        AND target_domain_id = 'Condition'\n        AND target_standard_concept = 'S'\n        AND target_invalid_reason IS NULL\n\n),\nsource_to_source_vocab_map AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"source_to_source_vocab_map\"\n    WHERE source_vocabulary_id = 'SNOMED'\n\n),\nfinal_visit_ids AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"final_visit_ids\"\n\n),\nperson AS (\n\n    SELECT * FROM \"iomed\".\"cdm\".\"person\"\n\n)\n\nSELECT\n    \n    abs(('x' || substr(md5(concat('condition_', encounter::text, '_', n_condition::text)), 1, 16))::bit(64)::bigint)\n AS condition_occurrence_id,\n    p.person_id AS person_id,\n    case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end AS condition_concept_id,\n    c.start AS condition_start_date,\n    c.start AS condition_start_datetime,\n    c.stop AS condition_end_date,\n    c.stop AS condition_end_datetime,\n    32020::int AS condition_type_concept_id, -- EHR encounter diagnosis\n    0::int AS condition_status_concept_id,\n    null::varchar(20) AS stop_reason,\n    null::int AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    null::bigint AS visit_detail_id,\n    c.code::varchar(50) AS condition_source_value,\n    case when srctosrcvm.target_concept_id is NULL then 0 else srctosrcvm.target_concept_id end AS condition_source_concept_id,\n    null::varchar(50) AS condition_status_source_value\nfrom conditions_num c\nleft join source_to_standard_vocab_map srctostdvm\n    on srctostdvm.source_code = c.code\nleft join source_to_source_vocab_map srctosrcvm\n    on srctosrcvm.source_code = c.code\njoin final_visit_ids fv\n    on fv.encounter_id = c.encounter\njoin person p on c.patient = p.person_source_value", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"stg_condition_occurrence\""}, "model.synthea.stg_visit_occurrence": {"raw_sql": "-- stg_visit_occurrence\n\n{{ config(\n   materialized='table_unlogged',\n   enabled=true\n)\n}}\n\nWITH all_visits AS (\n\n    SELECT * FROM {{ ref('all_visits') }}\n\n),\nperson AS (\n\n    SELECT * FROM {{ ref('person') }}\n\n),\nfinal_visit_ids AS (\n\n    SELECT * FROM {{ ref('final_visit_ids') }}\n\n)\n\nSELECT\n    av.visit_occurrence_id AS visit_occurrence_id,\n    p.person_id AS person_id,\n    {{ visit_concept_id(\"lower(av.encounterclass)\") }} AS visit_concept_id,\n    av.visit_start_date::DATE AS visit_start_date,\n    av.visit_start_date::TIMESTAMP AS visit_start_datetime,\n    av.visit_end_date::DATE AS visit_end_date,\n    av.visit_end_date::TIMESTAMP AS visit_end_datetime,\n    44818517::int AS visit_type_concept_id, -- Visit derived from encounter on claim\n    NULL::int AS provider_id,\n    NULL::int AS care_site_id,\n    av.encounter_id::varchar(50) AS visit_source_value,\n    0::int AS visit_source_concept_id,\n    0::int AS admitted_from_concept_id,\n    NULL::int AS admitted_from_source_value,\n    null::int AS discharged_to_source_value,\n    0::int AS discharged_to_concept_id,\n    lag(visit_occurrence_id)\n    over(partition by p.person_id\n\torder by av.visit_start_date) AS preceding_visit_occurrence_id\nFROM all_visits av\nJOIN person p ON av.patient = p.person_source_value\nWHERE visit_occurrence_id IN (SELECT DISTINCT VISIT_OCCURRENCE_ID_NEW\n                              FROM final_visit_ids)", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.synthea.visit_concept_id", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.all_visits", "model.synthea.person", "model.synthea.final_visit_ids"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_visit_occurrence"], "unique_id": "model.synthea.stg_visit_occurrence", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_visit_occurrence.sql", "original_file_path": "models/derived/stg_visit_occurrence.sql", "name": "stg_visit_occurrence", "alias": "stg_visit_occurrence", "checksum": {"name": "sha256", "checksum": "c8da9dd04b37092b8c248a47c2446bc5be06f92cae3551c68fa59cebf4fcaf80"}, "tags": [], "refs": [["all_visits"], ["person"], ["final_visit_ids"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/derived/stg_visit_occurrence.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": true}, "created_at": 1666873494, "compiled_sql": "-- stg_visit_occurrence\n\n\n\nWITH all_visits AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"all_visits\"\n\n),\nperson AS (\n\n    SELECT * FROM \"iomed\".\"cdm\".\"person\"\n\n),\nfinal_visit_ids AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"final_visit_ids\"\n\n)\n\nSELECT\n    av.visit_occurrence_id AS visit_occurrence_id,\n    p.person_id AS person_id,\n    \n(CASE lower(av.encounterclass)\n        WHEN 'ambulatory' THEN 9202 -- Outpatient Visit\n        WHEN 'emergency' THEN 9203 -- Emergency Room Visit\n        WHEN 'inpatient' THEN 9201 -- Inpatient Visit\n        WHEN 'wellness' THEN 9202 -- Outpatient Visit\n        WHEN 'urgentcare' THEN 9203 -- Emergency Room Visit\n        WHEN 'outpatient' THEN 9202 -- Outpatient Visit\n        ELSE 0\n        END)\n AS visit_concept_id,\n    av.visit_start_date::DATE AS visit_start_date,\n    av.visit_start_date::TIMESTAMP AS visit_start_datetime,\n    av.visit_end_date::DATE AS visit_end_date,\n    av.visit_end_date::TIMESTAMP AS visit_end_datetime,\n    44818517::int AS visit_type_concept_id, -- Visit derived from encounter on claim\n    NULL::int AS provider_id,\n    NULL::int AS care_site_id,\n    av.encounter_id::varchar(50) AS visit_source_value,\n    0::int AS visit_source_concept_id,\n    0::int AS admitted_from_concept_id,\n    NULL::int AS admitted_from_source_value,\n    null::int AS discharged_to_source_value,\n    0::int AS discharged_to_concept_id,\n    lag(visit_occurrence_id)\n    over(partition by p.person_id\n\torder by av.visit_start_date) AS preceding_visit_occurrence_id\nFROM all_visits av\nJOIN person p ON av.patient = p.person_source_value\nWHERE visit_occurrence_id IN (SELECT DISTINCT VISIT_OCCURRENCE_ID_NEW\n                              FROM final_visit_ids)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"stg_visit_occurrence\""}, "model.synthea.stg_cdm_source": {"raw_sql": "-- stg_cdm_source\n\n{{ config(\n   materialized='table_unlogged',\n   enabled=true\n )\n}}\n\n\nselect\n  'hospital_edge'::varchar(255) as cdm_source_name, -- NOT NULL\n  'hospital_edge'::varchar(25) as cdm_source_abbreviation,\n  'IOMED'::varchar(255) as cdm_holder,\n  'hospital_edge'::text as source_description,\n  null::varchar(255) as source_documentation_reference,\n  null::varchar(255) as cdm_etl_reference,\n  null::date as source_release_date,\n  null::date as cdm_release_date,\n  'CDM v5.4'::varchar(10) as cdm_version,\n  (select vocabulary_version from {{ source('iomed','vocabulary') }} where vocabulary_id='None')::varchar(20) as vocabulary_version", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["source.synthea.iomed.vocabulary"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_cdm_source"], "unique_id": "model.synthea.stg_cdm_source", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_cdm_source.sql", "original_file_path": "models/derived/stg_cdm_source.sql", "name": "stg_cdm_source", "alias": "stg_cdm_source", "checksum": {"name": "sha256", "checksum": "2c204df11b73011162c1e0f11df03449ccd98a00f0498da251b41780de3848c8"}, "tags": [], "refs": [], "sources": [["iomed", "vocabulary"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/derived/stg_cdm_source.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": true}, "created_at": 1666873494, "compiled_sql": "-- stg_cdm_source\n\n\n\n\nselect\n  'hospital_edge'::varchar(255) as cdm_source_name, -- NOT NULL\n  'hospital_edge'::varchar(25) as cdm_source_abbreviation,\n  'IOMED'::varchar(255) as cdm_holder,\n  'hospital_edge'::text as source_description,\n  null::varchar(255) as source_documentation_reference,\n  null::varchar(255) as cdm_etl_reference,\n  null::date as source_release_date,\n  null::date as cdm_release_date,\n  'CDM v5.4'::varchar(10) as cdm_version,\n  (select vocabulary_version from \"iomed\".\"vocabularies\".\"vocabulary\" where vocabulary_id='None')::varchar(20) as vocabulary_version", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"stg_cdm_source\""}, "model.synthea.stg_drug_era": {"raw_sql": "{{ config(\n   materialized='table_unlogged',\n   enabled=true\n)\n}}\n\n-- More information: https://ohdsi.github.io/CommonDataModel/sqlScripts.html#drug_eras\n\nWITH cteDrugTarget AS (\n\n    SELECT d.DRUG_EXPOSURE_ID\n    ,d.PERSON_ID\n    ,c.CONCEPT_ID\n    ,d.DRUG_TYPE_CONCEPT_ID\n    ,DRUG_EXPOSURE_START_DATE\n    ,COALESCE(DRUG_EXPOSURE_END_DATE, (DRUG_EXPOSURE_START_DATE + DAYS_SUPPLY), (DRUG_EXPOSURE_START_DATE + integer '1')) AS DRUG_EXPOSURE_END_DATE\n    ,c.CONCEPT_ID AS INGREDIENT_CONCEPT_ID\nFROM {{ ref('drug_exposure') }} d\nINNER JOIN {{ source('iomed', 'concept_ancestor') }} ca ON ca.DESCENDANT_CONCEPT_ID = d.DRUG_CONCEPT_ID\nINNER JOIN {{ source('iomed', 'concept') }} c ON ca.ANCESTOR_CONCEPT_ID = c.CONCEPT_ID\nWHERE c.VOCABULARY_ID = 'RxNorm'\n    AND c.CONCEPT_CLASS_ID = 'Ingredient'\n\n),\ncteEndDates AS (\n\nSELECT PERSON_ID\n    ,INGREDIENT_CONCEPT_ID\n    ,(EVENT_DATE - integer '30') AS END_DATE -- unpad the end date\nFROM (\n    SELECT E1.PERSON_ID\n        ,E1.INGREDIENT_CONCEPT_ID\n        ,E1.EVENT_DATE\n        ,COALESCE(E1.START_ORDINAL, MAX(E2.START_ORDINAL)) START_ORDINAL\n        ,E1.OVERALL_ORD\n    FROM (\n        SELECT PERSON_ID\n            ,INGREDIENT_CONCEPT_ID\n            ,EVENT_DATE\n            ,EVENT_TYPE\n            ,START_ORDINAL\n            ,ROW_NUMBER() OVER (\n                PARTITION BY PERSON_ID\n                ,INGREDIENT_CONCEPT_ID ORDER BY EVENT_DATE\n                    ,EVENT_TYPE\n                ) AS OVERALL_ORD -- this re-numbers the inner UNION so all rows are numbered ordered by the event date\n        FROM (\n            -- select the start dates, assigning a row number to each\n            SELECT PERSON_ID\n                ,INGREDIENT_CONCEPT_ID\n                ,DRUG_EXPOSURE_START_DATE AS EVENT_DATE\n                ,0 AS EVENT_TYPE\n                ,ROW_NUMBER() OVER (\n                    PARTITION BY PERSON_ID\n                    ,INGREDIENT_CONCEPT_ID ORDER BY DRUG_EXPOSURE_START_DATE\n                    ) AS START_ORDINAL\n            FROM cteDrugTarget\n\n            UNION ALL\n\n            -- add the end dates with NULL as the row number, padding the end dates by 30 to allow a grace period for overlapping ranges.\n            SELECT PERSON_ID\n                ,INGREDIENT_CONCEPT_ID\n                ,(DRUG_EXPOSURE_END_DATE + integer '30')\n                ,1 AS EVENT_TYPE\n                ,NULL\n            FROM cteDrugTarget\n            ) RAWDATA\n        ) E1\n    INNER JOIN (\n        SELECT PERSON_ID\n            ,INGREDIENT_CONCEPT_ID\n            ,DRUG_EXPOSURE_START_DATE AS EVENT_DATE\n            ,ROW_NUMBER() OVER (\n                PARTITION BY PERSON_ID\n                ,INGREDIENT_CONCEPT_ID ORDER BY DRUG_EXPOSURE_START_DATE\n                ) AS START_ORDINAL\n        FROM cteDrugTarget\n        ) E2 ON E1.PERSON_ID = E2.PERSON_ID\n        AND E1.INGREDIENT_CONCEPT_ID = E2.INGREDIENT_CONCEPT_ID\n        AND E2.EVENT_DATE <= E1.EVENT_DATE\n    GROUP BY E1.PERSON_ID\n        ,E1.INGREDIENT_CONCEPT_ID\n        ,E1.EVENT_DATE\n        ,E1.START_ORDINAL\n        ,E1.OVERALL_ORD\n    ) E\nWHERE 2 * E.START_ORDINAL - E.OVERALL_ORD = 0\n\n),\ncteDrugExpEnds AS (\n    SELECT d.PERSON_ID\n        ,d.INGREDIENT_CONCEPT_ID\n        ,d.DRUG_TYPE_CONCEPT_ID\n        ,d.DRUG_EXPOSURE_START_DATE\n        ,MIN(e.END_DATE) AS ERA_END_DATE\n    FROM cteDrugTarget d\n    INNER JOIN cteEndDates e ON d.PERSON_ID = e.PERSON_ID\n        AND d.INGREDIENT_CONCEPT_ID = e.INGREDIENT_CONCEPT_ID\n        AND e.END_DATE >= d.DRUG_EXPOSURE_START_DATE\n    GROUP BY d.PERSON_ID\n        ,d.INGREDIENT_CONCEPT_ID\n        ,d.DRUG_TYPE_CONCEPT_ID\n        ,d.DRUG_EXPOSURE_START_DATE\n),\nfinal_drug_era AS (\n    SELECT row_number() OVER (\n        ORDER BY person_id\n        ) AS drug_era_id\n    ,person_id\n    ,INGREDIENT_CONCEPT_ID AS drug_concept_id\n    ,min(DRUG_EXPOSURE_START_DATE)::date AS drug_era_start_date\n    ,ERA_END_DATE::date AS drug_era_end_date\n    ,COUNT(*) AS DRUG_EXPOSURE_COUNT\n    ,30 AS gap_days\nFROM cteDrugExpEnds\nGROUP BY person_id\n    ,INGREDIENT_CONCEPT_ID\n    ,drug_type_concept_id\n    ,ERA_END_DATE\n)\n\nSELECT * from final_drug_era", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["source.synthea.iomed.concept_ancestor", "source.synthea.iomed.concept", "model.synthea.drug_exposure"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_drug_era"], "unique_id": "model.synthea.stg_drug_era", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_drug_era.sql", "original_file_path": "models/derived/stg_drug_era.sql", "name": "stg_drug_era", "alias": "stg_drug_era", "checksum": {"name": "sha256", "checksum": "193638fbe886fc43846072ec41f0ad5856014fbc70f4d78ac7a93833d14c90da"}, "tags": [], "refs": [["drug_exposure"]], "sources": [["iomed", "concept_ancestor"], ["iomed", "concept"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/derived/stg_drug_era.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": true}, "created_at": 1666873494, "compiled_sql": "\n\n-- More information: https://ohdsi.github.io/CommonDataModel/sqlScripts.html#drug_eras\n\nWITH cteDrugTarget AS (\n\n    SELECT d.DRUG_EXPOSURE_ID\n    ,d.PERSON_ID\n    ,c.CONCEPT_ID\n    ,d.DRUG_TYPE_CONCEPT_ID\n    ,DRUG_EXPOSURE_START_DATE\n    ,COALESCE(DRUG_EXPOSURE_END_DATE, (DRUG_EXPOSURE_START_DATE + DAYS_SUPPLY), (DRUG_EXPOSURE_START_DATE + integer '1')) AS DRUG_EXPOSURE_END_DATE\n    ,c.CONCEPT_ID AS INGREDIENT_CONCEPT_ID\nFROM \"iomed\".\"cdm\".\"drug_exposure\" d\nINNER JOIN \"iomed\".\"vocabularies\".\"concept_ancestor\" ca ON ca.DESCENDANT_CONCEPT_ID = d.DRUG_CONCEPT_ID\nINNER JOIN \"iomed\".\"vocabularies\".\"concept\" c ON ca.ANCESTOR_CONCEPT_ID = c.CONCEPT_ID\nWHERE c.VOCABULARY_ID = 'RxNorm'\n    AND c.CONCEPT_CLASS_ID = 'Ingredient'\n\n),\ncteEndDates AS (\n\nSELECT PERSON_ID\n    ,INGREDIENT_CONCEPT_ID\n    ,(EVENT_DATE - integer '30') AS END_DATE -- unpad the end date\nFROM (\n    SELECT E1.PERSON_ID\n        ,E1.INGREDIENT_CONCEPT_ID\n        ,E1.EVENT_DATE\n        ,COALESCE(E1.START_ORDINAL, MAX(E2.START_ORDINAL)) START_ORDINAL\n        ,E1.OVERALL_ORD\n    FROM (\n        SELECT PERSON_ID\n            ,INGREDIENT_CONCEPT_ID\n            ,EVENT_DATE\n            ,EVENT_TYPE\n            ,START_ORDINAL\n            ,ROW_NUMBER() OVER (\n                PARTITION BY PERSON_ID\n                ,INGREDIENT_CONCEPT_ID ORDER BY EVENT_DATE\n                    ,EVENT_TYPE\n                ) AS OVERALL_ORD -- this re-numbers the inner UNION so all rows are numbered ordered by the event date\n        FROM (\n            -- select the start dates, assigning a row number to each\n            SELECT PERSON_ID\n                ,INGREDIENT_CONCEPT_ID\n                ,DRUG_EXPOSURE_START_DATE AS EVENT_DATE\n                ,0 AS EVENT_TYPE\n                ,ROW_NUMBER() OVER (\n                    PARTITION BY PERSON_ID\n                    ,INGREDIENT_CONCEPT_ID ORDER BY DRUG_EXPOSURE_START_DATE\n                    ) AS START_ORDINAL\n            FROM cteDrugTarget\n\n            UNION ALL\n\n            -- add the end dates with NULL as the row number, padding the end dates by 30 to allow a grace period for overlapping ranges.\n            SELECT PERSON_ID\n                ,INGREDIENT_CONCEPT_ID\n                ,(DRUG_EXPOSURE_END_DATE + integer '30')\n                ,1 AS EVENT_TYPE\n                ,NULL\n            FROM cteDrugTarget\n            ) RAWDATA\n        ) E1\n    INNER JOIN (\n        SELECT PERSON_ID\n            ,INGREDIENT_CONCEPT_ID\n            ,DRUG_EXPOSURE_START_DATE AS EVENT_DATE\n            ,ROW_NUMBER() OVER (\n                PARTITION BY PERSON_ID\n                ,INGREDIENT_CONCEPT_ID ORDER BY DRUG_EXPOSURE_START_DATE\n                ) AS START_ORDINAL\n        FROM cteDrugTarget\n        ) E2 ON E1.PERSON_ID = E2.PERSON_ID\n        AND E1.INGREDIENT_CONCEPT_ID = E2.INGREDIENT_CONCEPT_ID\n        AND E2.EVENT_DATE <= E1.EVENT_DATE\n    GROUP BY E1.PERSON_ID\n        ,E1.INGREDIENT_CONCEPT_ID\n        ,E1.EVENT_DATE\n        ,E1.START_ORDINAL\n        ,E1.OVERALL_ORD\n    ) E\nWHERE 2 * E.START_ORDINAL - E.OVERALL_ORD = 0\n\n),\ncteDrugExpEnds AS (\n    SELECT d.PERSON_ID\n        ,d.INGREDIENT_CONCEPT_ID\n        ,d.DRUG_TYPE_CONCEPT_ID\n        ,d.DRUG_EXPOSURE_START_DATE\n        ,MIN(e.END_DATE) AS ERA_END_DATE\n    FROM cteDrugTarget d\n    INNER JOIN cteEndDates e ON d.PERSON_ID = e.PERSON_ID\n        AND d.INGREDIENT_CONCEPT_ID = e.INGREDIENT_CONCEPT_ID\n        AND e.END_DATE >= d.DRUG_EXPOSURE_START_DATE\n    GROUP BY d.PERSON_ID\n        ,d.INGREDIENT_CONCEPT_ID\n        ,d.DRUG_TYPE_CONCEPT_ID\n        ,d.DRUG_EXPOSURE_START_DATE\n),\nfinal_drug_era AS (\n    SELECT row_number() OVER (\n        ORDER BY person_id\n        ) AS drug_era_id\n    ,person_id\n    ,INGREDIENT_CONCEPT_ID AS drug_concept_id\n    ,min(DRUG_EXPOSURE_START_DATE)::date AS drug_era_start_date\n    ,ERA_END_DATE::date AS drug_era_end_date\n    ,COUNT(*) AS DRUG_EXPOSURE_COUNT\n    ,30 AS gap_days\nFROM cteDrugExpEnds\nGROUP BY person_id\n    ,INGREDIENT_CONCEPT_ID\n    ,drug_type_concept_id\n    ,ERA_END_DATE\n)\n\nSELECT * from final_drug_era", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"stg_drug_era\""}, "model.synthea.stg_observation_period": {"raw_sql": "-- stg_observation_period\n\n{{ config(\n   materialized='table_unlogged',\n   enabled=true\n)\n}}\n\nWITH person AS (\n\n    SELECT * FROM {{ ref('person') }}\n\n),\nencounters AS (\n\n    SELECT * FROM {{ source('iomed_raw', 'encounters') }}\n\n),\nobservation_period AS (\n\n    SELECT p.person_id,\n           MIN(e.start) AS start_date,\n\t       MAX(e.stop) AS end_date\n    FROM person p\n    JOIN encounters e ON p.person_source_value = e.patient\n    GROUP BY p.person_id\n)\n\nSELECT\n    {{ create_id_from_str(\"CONCAT('obs_period_', person_id::text)\") }} AS observation_period_id,\n    person_id AS person_id,\n    start_date AS observation_period_start_date,\n\tend_date AS observation_period_end_date,\n\t44814724::INT AS period_type_concept_id -- Period covering healthcare encounters\nFROM observation_period", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.synthea.create_id_from_str", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["source.synthea.iomed_raw.encounters", "model.synthea.person"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_observation_period"], "unique_id": "model.synthea.stg_observation_period", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_observation_period.sql", "original_file_path": "models/derived/stg_observation_period.sql", "name": "stg_observation_period", "alias": "stg_observation_period", "checksum": {"name": "sha256", "checksum": "df79b0a95f91c5b310575f486066a946fb63ba2d221f4e54a4311edea801168a"}, "tags": [], "refs": [["person"]], "sources": [["iomed_raw", "encounters"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/derived/stg_observation_period.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": true}, "created_at": 1666873494, "compiled_sql": "-- stg_observation_period\n\n\n\nWITH person AS (\n\n    SELECT * FROM \"iomed\".\"cdm\".\"person\"\n\n),\nencounters AS (\n\n    SELECT * FROM \"iomed\".\"raw\".\"encounters\"\n\n),\nobservation_period AS (\n\n    SELECT p.person_id,\n           MIN(e.start) AS start_date,\n\t       MAX(e.stop) AS end_date\n    FROM person p\n    JOIN encounters e ON p.person_source_value = e.patient\n    GROUP BY p.person_id\n)\n\nSELECT\n    \n    abs(('x' || substr(md5(CONCAT('obs_period_', person_id::text)), 1, 16))::bit(64)::bigint)\n AS observation_period_id,\n    person_id AS person_id,\n    start_date AS observation_period_start_date,\n\tend_date AS observation_period_end_date,\n\t44814724::INT AS period_type_concept_id -- Period covering healthcare encounters\nFROM observation_period", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"stg_observation_period\""}, "model.synthea.stg_person": {"raw_sql": "-- stg_person\n\n{{ config(\n    materialized='table_unlogged',\n\tenabled=true\n)\n}}\n\nwith patients as (\n\n    select * from {{ source('iomed_raw', 'patients') }}\n\n),\nperson as (\n\nselect\n    {{ create_id_from_str(\"id::text\")}} AS person_id,\n    {{ gender_concept_id (\"gender\") }} AS gender_concept_id,\n    date_part('year', birthdate::DATE)::INT AS year_of_birth,\n    date_part('month', birthdate::DATE)::INT AS month_of_birth,\n    date_part('day', birthdate::DATE)::INT AS day_of_birth,\n    birthdate::TIMESTAMP AS birth_datetime,\n    {{ race_concept_id(\"race\") }}  AS race_concept_id,\n    {{ ethnicity_concept_id(\"ethnicity\") }} AS ethnicity_concept_id,\n    NULL::INT AS location_id,\n    NULL::INT AS provider_id,\n    NULL::INT AS care_site_id,\n    id::VARCHAR(50) AS person_source_value,\n    gender::VARCHAR(50) AS gender_source_value,\n    0 AS gender_source_concept_id,\n    race::VARCHAR(50) AS race_source_value,\n    0 AS race_source_concept_id,\n    ethnicity::VARCHAR(50) AS ethnicity_source_value,\n    0 AS ethnicity_source_concept_id\nfrom patients\nwhere birthdate is not null -- Don't load patients who do not have birthdate and sex (change variable names if necessary)\n      and gender is not null\n\n)\n\nselect * from person", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.synthea.create_id_from_str", "macro.synthea.gender_concept_id", "macro.synthea.race_concept_id", "macro.synthea.ethnicity_concept_id", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["source.synthea.iomed_raw.patients"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_person"], "unique_id": "model.synthea.stg_person", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_person.sql", "original_file_path": "models/derived/stg_person.sql", "name": "stg_person", "alias": "stg_person", "checksum": {"name": "sha256", "checksum": "c26caf89b3df08a87d1c87a6b85ad9f3a20ab469e597dedc8f51e96f3b568777"}, "tags": [], "refs": [], "sources": [["iomed_raw", "patients"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/derived/stg_person.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": true}, "created_at": 1666873494, "compiled_sql": "-- stg_person\n\n\n\nwith patients as (\n\n    select * from \"iomed\".\"raw\".\"patients\"\n\n),\nperson as (\n\nselect\n    \n    abs(('x' || substr(md5(id::text), 1, 16))::bit(64)::bigint)\n AS person_id,\n    \n(CASE WHEN gender = 'M' THEN 8507::int -- Male\n      WHEN gender = 'F' THEN 8532::int -- Female\n      WHEN gender is null THEN 0::int -- No data\n      ELSE 8551::int -- Unknown\n      END)\n AS gender_concept_id,\n    date_part('year', birthdate::DATE)::INT AS year_of_birth,\n    date_part('month', birthdate::DATE)::INT AS month_of_birth,\n    date_part('day', birthdate::DATE)::INT AS day_of_birth,\n    birthdate::TIMESTAMP AS birth_datetime,\n    \n(CASE WHEN race = 'white' THEN 8527::int -- White\n      WHEN race = 'black' THEN 8516::int -- Black\n      WHEN race = 'asian' THEN 8515::int -- Asian\n      ELSE 0::int -- No data\n      END)\n  AS race_concept_id,\n    \n(CASE WHEN ethnicity = 'hispanic' THEN 38003563::int -- Hispanic or Latino\n      ELSE 0::int\n      END)\n AS ethnicity_concept_id,\n    NULL::INT AS location_id,\n    NULL::INT AS provider_id,\n    NULL::INT AS care_site_id,\n    id::VARCHAR(50) AS person_source_value,\n    gender::VARCHAR(50) AS gender_source_value,\n    0 AS gender_source_concept_id,\n    race::VARCHAR(50) AS race_source_value,\n    0 AS race_source_concept_id,\n    ethnicity::VARCHAR(50) AS ethnicity_source_value,\n    0 AS ethnicity_source_concept_id\nfrom patients\nwhere birthdate is not null -- Don't load patients who do not have birthdate and sex (change variable names if necessary)\n      and gender is not null\n\n)\n\nselect * from person", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"stg_person\""}, "model.synthea.stg_procedure_occurrence": {"raw_sql": "-- stg_procedure_occurrence\n\n{{ config(\n   materialized='table_unlogged',\n   enabled=true\n)\n}}\n\nWITH final_visit_ids  AS (\n\n    SELECT * FROM {{ ref('final_visit_ids') }}\n\n),\nsource_to_standard_vocab_map AS (\n\n    SELECT * FROM {{ ref('source_to_standard_vocab_map') }}\n    WHERE source_vocabulary_id = 'SNOMED'\n        AND source_domain_id = 'Procedure'\n        AND target_domain_id = 'Procedure'\n        AND target_standard_concept = 'S'\n        AND target_invalid_reason IS NULL\n\n),\nsource_to_source_vocab_map AS (\n\n    SELECT * FROM {{ ref('source_to_source_vocab_map') }}\n    WHERE source_vocabulary_id  = 'SNOMED'\n\n),\nprocedures_num AS (\n\n    SELECT *,\n           row_number() over (partition by encounter order by encounter) as n_procedures -- To get a PK for procedure_occurrence (procedure_occurrence_id)\n    FROM {{ source('iomed_raw', 'procedures') }}\n\n),\n\nperson AS (\n\n    SELECT * FROM {{ ref('person') }}\n\n)\n\nSELECT\n    {{ create_id_from_str(\"concat('procedures_', encounter::text, '_', n_procedures::text)\") }} AS procedure_occurrence_id,\n    p.person_id AS person_id,\n    case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end AS procedure_concept_id,\n    pr.start::date AS procedure_date,\n    pr.start::timestamp AS procedure_datetime,\n    pr.stop::date AS procedure_end_date,\n    pr.stop::timestamp AS procedure_end_datetime,\n    38000275 AS procedure_type_concept_id, -- EHR order list entry\n    0 AS modifier_concept_id,\n    null::int AS quantity,\n    null::bigint AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    null::bigint AS visit_detail_id,\n    pr.code AS procedure_source_value,\n    case when srctosrcvm.target_concept_id is NULL then 0 else srctosrcvm.target_concept_id end AS procedure_source_concept_id,\n    null::varchar(50) AS modifier_source_value\nfrom procedures_num pr\nleft join source_to_standard_vocab_map srctostdvm\n    on srctostdvm.source_code = pr.code\nleft join source_to_source_vocab_map srctosrcvm\n    on srctosrcvm.source_code = pr.code\njoin final_visit_ids fv\n    on fv.encounter_id = pr.encounter\njoin person p\n  on p.person_source_value = pr.patient", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.synthea.create_id_from_str", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["source.synthea.iomed_raw.procedures", "model.synthea.final_visit_ids", "model.synthea.source_to_standard_vocab_map", "model.synthea.source_to_source_vocab_map", "model.synthea.person"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_procedure_occurrence"], "unique_id": "model.synthea.stg_procedure_occurrence", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_procedure_occurrence.sql", "original_file_path": "models/derived/stg_procedure_occurrence.sql", "name": "stg_procedure_occurrence", "alias": "stg_procedure_occurrence", "checksum": {"name": "sha256", "checksum": "d337ff8985d15455d2e39e4b7dfc6e3d098038a3cbc1a2e30c972edd6a41330b"}, "tags": [], "refs": [["final_visit_ids"], ["source_to_standard_vocab_map"], ["source_to_source_vocab_map"], ["person"]], "sources": [["iomed_raw", "procedures"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/derived/stg_procedure_occurrence.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": true}, "created_at": 1666873494, "compiled_sql": "-- stg_procedure_occurrence\n\n\n\nWITH final_visit_ids  AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"final_visit_ids\"\n\n),\nsource_to_standard_vocab_map AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"source_to_standard_vocab_map\"\n    WHERE source_vocabulary_id = 'SNOMED'\n        AND source_domain_id = 'Procedure'\n        AND target_domain_id = 'Procedure'\n        AND target_standard_concept = 'S'\n        AND target_invalid_reason IS NULL\n\n),\nsource_to_source_vocab_map AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"source_to_source_vocab_map\"\n    WHERE source_vocabulary_id  = 'SNOMED'\n\n),\nprocedures_num AS (\n\n    SELECT *,\n           row_number() over (partition by encounter order by encounter) as n_procedures -- To get a PK for procedure_occurrence (procedure_occurrence_id)\n    FROM \"iomed\".\"raw\".\"procedures\"\n\n),\n\nperson AS (\n\n    SELECT * FROM \"iomed\".\"cdm\".\"person\"\n\n)\n\nSELECT\n    \n    abs(('x' || substr(md5(concat('procedures_', encounter::text, '_', n_procedures::text)), 1, 16))::bit(64)::bigint)\n AS procedure_occurrence_id,\n    p.person_id AS person_id,\n    case when srctostdvm.target_concept_id is NULL then 0 else srctostdvm.target_concept_id end AS procedure_concept_id,\n    pr.start::date AS procedure_date,\n    pr.start::timestamp AS procedure_datetime,\n    pr.stop::date AS procedure_end_date,\n    pr.stop::timestamp AS procedure_end_datetime,\n    38000275 AS procedure_type_concept_id, -- EHR order list entry\n    0 AS modifier_concept_id,\n    null::int AS quantity,\n    null::bigint AS provider_id,\n    fv.visit_occurrence_id_new AS visit_occurrence_id,\n    null::bigint AS visit_detail_id,\n    pr.code AS procedure_source_value,\n    case when srctosrcvm.target_concept_id is NULL then 0 else srctosrcvm.target_concept_id end AS procedure_source_concept_id,\n    null::varchar(50) AS modifier_source_value\nfrom procedures_num pr\nleft join source_to_standard_vocab_map srctostdvm\n    on srctostdvm.source_code = pr.code\nleft join source_to_source_vocab_map srctosrcvm\n    on srctosrcvm.source_code = pr.code\njoin final_visit_ids fv\n    on fv.encounter_id = pr.encounter\njoin person p\n  on p.person_source_value = pr.patient", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"stg_procedure_occurrence\""}, "model.synthea.source_to_source_vocab_map": {"raw_sql": "{{ config(\n    enabled = True,\n    materialized='table',\n    post_hook=[\n      \"create index if not exists idx_source_vocab_map_source_code on {{ this }} (source_code);\",\n\t  \"create index if not exists idx_source_vocab_map_source_vocab_id on {{ this }} (source_vocabulary_id);\"\n    ]\n  )\n}}\n\nWITH CONCEPT AS (\n\n    SELECT * FROM {{ source('iomed', 'concept') }}\n\n),\nsource_to_concept_map AS (\n\n    SELECT * FROM {{ source('iomed', 'source_to_concept_map') }}\n\n)\n\nSELECT c.concept_code AS SOURCE_CODE, c.concept_id AS SOURCE_CONCEPT_ID, c.CONCEPT_NAME AS SOURCE_CODE_DESCRIPTION,\n                c.vocabulary_id AS SOURCE_VOCABULARY_ID, c.domain_id AS SOURCE_DOMAIN_ID, c.concept_class_id AS SOURCE_CONCEPT_CLASS_ID,\n    c.VALID_START_DATE AS SOURCE_VALID_START_DATE, c.VALID_END_DATE AS SOURCE_VALID_END_DATE, c.invalid_reason AS SOURCE_INVALID_REASON,\n    c.concept_ID as TARGET_CONCEPT_ID, c.concept_name AS TARGET_CONCEPT_NAME, c.vocabulary_id AS TARGET_VOCABULARY_ID, c.domain_id AS TARGET_DOMAIN_ID,\n                c.concept_class_id AS TARGET_CONCEPT_CLASS_ID, c.INVALID_REASON AS TARGET_INVALID_REASON,\n    c.STANDARD_CONCEPT AS TARGET_STANDARD_CONCEPT\nFROM CONCEPT c\nUNION\nSELECT source_code, SOURCE_CONCEPT_ID, SOURCE_CODE_DESCRIPTION, source_vocabulary_id, c1.domain_id AS SOURCE_DOMAIN_ID, c2.CONCEPT_CLASS_ID AS SOURCE_CONCEPT_CLASS_ID,\n                                c1.VALID_START_DATE AS SOURCE_VALID_START_DATE, c1.VALID_END_DATE AS SOURCE_VALID_END_DATE,stcm.INVALID_REASON AS SOURCE_INVALID_REASON,\n                                target_concept_id, c2.CONCEPT_NAME AS TARGET_CONCEPT_NAME, target_vocabulary_id, c2.domain_id AS TARGET_DOMAIN_ID, c2.concept_class_id AS TARGET_CONCEPT_CLASS_ID,\n             c2.INVALID_REASON AS TARGET_INVALID_REASON, c2.standard_concept AS TARGET_STANDARD_CONCEPT\nFROM source_to_concept_map stcm\n      LEFT OUTER JOIN CONCEPT c1\n             ON c1.concept_id = stcm.source_concept_id\n      LEFT OUTER JOIN CONCEPT c2\n             ON c2.CONCEPT_ID = stcm.target_concept_id\nWHERE stcm.INVALID_REASON IS NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["source.synthea.iomed.concept", "source.synthea.iomed.source_to_concept_map"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "create index if not exists idx_source_vocab_map_source_code on {{ this }} (source_code);", "transaction": true, "index": null}, {"sql": "create index if not exists idx_source_vocab_map_source_vocab_id on {{ this }} (source_vocabulary_id);", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "mappings", "source_to_source_vocab_map"], "unique_id": "model.synthea.source_to_source_vocab_map", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "mappings/source_to_source_vocab_map.sql", "original_file_path": "models/mappings/source_to_source_vocab_map.sql", "name": "source_to_source_vocab_map", "alias": "source_to_source_vocab_map", "checksum": {"name": "sha256", "checksum": "e813ca585a3d9077e5808727e01f68fbffb806c5eaf64122df7a2ee42fd3ef6c"}, "tags": [], "refs": [], "sources": [["iomed", "concept"], ["iomed", "source_to_concept_map"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/mappings/source_to_source_vocab_map.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["create index if not exists idx_source_vocab_map_source_code on {{ this }} (source_code);", "create index if not exists idx_source_vocab_map_source_vocab_id on {{ this }} (source_vocabulary_id);"], "schema": "cdm_dbt", "enabled": true, "materialized": "table"}, "created_at": 1666873494, "compiled_sql": "\n\nWITH CONCEPT AS (\n\n    SELECT * FROM \"iomed\".\"vocabularies\".\"concept\"\n\n),\nsource_to_concept_map AS (\n\n    SELECT * FROM \"iomed\".\"vocabularies\".\"source_to_concept_map\"\n\n)\n\nSELECT c.concept_code AS SOURCE_CODE, c.concept_id AS SOURCE_CONCEPT_ID, c.CONCEPT_NAME AS SOURCE_CODE_DESCRIPTION,\n                c.vocabulary_id AS SOURCE_VOCABULARY_ID, c.domain_id AS SOURCE_DOMAIN_ID, c.concept_class_id AS SOURCE_CONCEPT_CLASS_ID,\n    c.VALID_START_DATE AS SOURCE_VALID_START_DATE, c.VALID_END_DATE AS SOURCE_VALID_END_DATE, c.invalid_reason AS SOURCE_INVALID_REASON,\n    c.concept_ID as TARGET_CONCEPT_ID, c.concept_name AS TARGET_CONCEPT_NAME, c.vocabulary_id AS TARGET_VOCABULARY_ID, c.domain_id AS TARGET_DOMAIN_ID,\n                c.concept_class_id AS TARGET_CONCEPT_CLASS_ID, c.INVALID_REASON AS TARGET_INVALID_REASON,\n    c.STANDARD_CONCEPT AS TARGET_STANDARD_CONCEPT\nFROM CONCEPT c\nUNION\nSELECT source_code, SOURCE_CONCEPT_ID, SOURCE_CODE_DESCRIPTION, source_vocabulary_id, c1.domain_id AS SOURCE_DOMAIN_ID, c2.CONCEPT_CLASS_ID AS SOURCE_CONCEPT_CLASS_ID,\n                                c1.VALID_START_DATE AS SOURCE_VALID_START_DATE, c1.VALID_END_DATE AS SOURCE_VALID_END_DATE,stcm.INVALID_REASON AS SOURCE_INVALID_REASON,\n                                target_concept_id, c2.CONCEPT_NAME AS TARGET_CONCEPT_NAME, target_vocabulary_id, c2.domain_id AS TARGET_DOMAIN_ID, c2.concept_class_id AS TARGET_CONCEPT_CLASS_ID,\n             c2.INVALID_REASON AS TARGET_INVALID_REASON, c2.standard_concept AS TARGET_STANDARD_CONCEPT\nFROM source_to_concept_map stcm\n      LEFT OUTER JOIN CONCEPT c1\n             ON c1.concept_id = stcm.source_concept_id\n      LEFT OUTER JOIN CONCEPT c2\n             ON c2.CONCEPT_ID = stcm.target_concept_id\nWHERE stcm.INVALID_REASON IS NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"source_to_source_vocab_map\""}, "model.synthea.assign_all_visit_ids": {"raw_sql": "-- Assign VISIT_OCCURRENCE_ID to all encounters\n\n{{ config (\n    enabled = True\n) }}\n\nWITH ENCOUNTERS AS (\n\n    SELECT * FROM {{ source('iomed_raw', 'encounters') }}\n\n),\nall_visits AS (\n\n    SELECT * FROM {{ ref('all_visits') }}\n\n)\nSELECT  E.id AS encounter_id,\n\t\tE.patient as person_source_value,\n\t\tE.start AS date_service,\n\t\tE.stop AS date_service_end,\n\t\tE.encounterclass,\n\t\tAV.encounterclass AS VISIT_TYPE,\n\t\tAV.VISIT_START_DATE,\n\t\tAV.VISIT_END_DATE,\n\t\tAV.VISIT_OCCURRENCE_ID,\n\t\tCASE\n\t\t\tWHEN E.encounterclass = 'inpatient' and AV.encounterclass = 'inpatient'\n\t\t\t\tTHEN VISIT_OCCURRENCE_ID\n\t\t\tWHEN E.encounterclass in ('emergency','urgent')\n\t\t\t\tTHEN (\n\t\t\t\t\tCASE\n\t\t\t\t\t\tWHEN AV.encounterclass = 'inpatient' AND E.start > AV.VISIT_START_DATE\n\t\t\t\t\t\t\tTHEN VISIT_OCCURRENCE_ID\n\t\t\t\t\t\tWHEN AV.encounterclass in ('emergency','urgent') AND E.start = AV.VISIT_START_DATE\n\t\t\t\t\t\t\tTHEN VISIT_OCCURRENCE_ID\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\tEND\n\t\t\t\t)\n\t\t\tWHEN E.encounterclass in ('ambulatory', 'wellness', 'outpatient')\n\t\t\t\tTHEN (\n\t\t\t\t\tCASE\n\t\t\t\t\t\tWHEN AV.encounterclass = 'inpatient' AND E.start >= AV.VISIT_START_DATE\n\t\t\t\t\t\t\tTHEN VISIT_OCCURRENCE_ID\n\t\t\t\t\t\tWHEN AV.encounterclass in ('ambulatory', 'wellness', 'outpatient')\n\t\t\t\t\t\t\tTHEN VISIT_OCCURRENCE_ID\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\tEND\n\t\t\t\t)\n\t\t\tELSE NULL\n\t\tEND AS VISIT_OCCURRENCE_ID_NEW\n\nFROM ENCOUNTERS E\nJOIN ALL_VISITS AV\n\tON E.patient = AV.patient\n\tAND E.start >= AV.VISIT_START_DATE\n\tAND E.start <= AV.VISIT_END_DATE", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["source.synthea.iomed_raw.encounters", "model.synthea.all_visits"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "mappings", "assign_all_visit_ids"], "unique_id": "model.synthea.assign_all_visit_ids", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "mappings/assign_all_visit_ids.sql", "original_file_path": "models/mappings/assign_all_visit_ids.sql", "name": "assign_all_visit_ids", "alias": "assign_all_visit_ids", "checksum": {"name": "sha256", "checksum": "478d58b69161be77f85596bc52343e87daff531ac14ca83604e86f26a0853d47"}, "tags": [], "refs": [["all_visits"]], "sources": [["iomed_raw", "encounters"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/mappings/assign_all_visit_ids.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "enabled": true}, "created_at": 1666873494, "compiled_sql": "-- Assign VISIT_OCCURRENCE_ID to all encounters\n\n\n\nWITH ENCOUNTERS AS (\n\n    SELECT * FROM \"iomed\".\"raw\".\"encounters\"\n\n),\nall_visits AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"all_visits\"\n\n)\nSELECT  E.id AS encounter_id,\n\t\tE.patient as person_source_value,\n\t\tE.start AS date_service,\n\t\tE.stop AS date_service_end,\n\t\tE.encounterclass,\n\t\tAV.encounterclass AS VISIT_TYPE,\n\t\tAV.VISIT_START_DATE,\n\t\tAV.VISIT_END_DATE,\n\t\tAV.VISIT_OCCURRENCE_ID,\n\t\tCASE\n\t\t\tWHEN E.encounterclass = 'inpatient' and AV.encounterclass = 'inpatient'\n\t\t\t\tTHEN VISIT_OCCURRENCE_ID\n\t\t\tWHEN E.encounterclass in ('emergency','urgent')\n\t\t\t\tTHEN (\n\t\t\t\t\tCASE\n\t\t\t\t\t\tWHEN AV.encounterclass = 'inpatient' AND E.start > AV.VISIT_START_DATE\n\t\t\t\t\t\t\tTHEN VISIT_OCCURRENCE_ID\n\t\t\t\t\t\tWHEN AV.encounterclass in ('emergency','urgent') AND E.start = AV.VISIT_START_DATE\n\t\t\t\t\t\t\tTHEN VISIT_OCCURRENCE_ID\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\tEND\n\t\t\t\t)\n\t\t\tWHEN E.encounterclass in ('ambulatory', 'wellness', 'outpatient')\n\t\t\t\tTHEN (\n\t\t\t\t\tCASE\n\t\t\t\t\t\tWHEN AV.encounterclass = 'inpatient' AND E.start >= AV.VISIT_START_DATE\n\t\t\t\t\t\t\tTHEN VISIT_OCCURRENCE_ID\n\t\t\t\t\t\tWHEN AV.encounterclass in ('ambulatory', 'wellness', 'outpatient')\n\t\t\t\t\t\t\tTHEN VISIT_OCCURRENCE_ID\n\t\t\t\t\t\tELSE NULL\n\t\t\t\t\tEND\n\t\t\t\t)\n\t\t\tELSE NULL\n\t\tEND AS VISIT_OCCURRENCE_ID_NEW\n\nFROM ENCOUNTERS E\nJOIN ALL_VISITS AV\n\tON E.patient = AV.patient\n\tAND E.start >= AV.VISIT_START_DATE\n\tAND E.start <= AV.VISIT_END_DATE", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"assign_all_visit_ids\""}, "model.synthea.final_visit_ids": {"raw_sql": "{{ config (\n    materialized = 'table',\n    enabled = true\n) }}\n\nWITH ASSIGN_ALL_VISIT_IDS AS (\n\n    SELECT * FROM {{ ref('assign_all_visit_ids') }}\n\n)\n\nSELECT encounter_id, VISIT_OCCURRENCE_ID_NEW\nFROM(\n\tSELECT *, ROW_NUMBER () OVER (PARTITION BY encounter_id ORDER BY PRIORITY) AS RN\n\tFROM (\n\t\tSELECT *,\n\t\t\tCASE\n\t\t\t\tWHEN encounterclass in ('emergency','urgent')\n\t\t\t\t\tTHEN (\n\t\t\t\t\t\tCASE\n\t\t\t\t\t\t\tWHEN VISIT_TYPE = 'inpatient' AND VISIT_OCCURRENCE_ID_NEW IS NOT NULL\n\t\t\t\t\t\t\t\tTHEN 1\n\t\t\t\t\t\t\tWHEN VISIT_TYPE in ('emergency','urgent') AND VISIT_OCCURRENCE_ID_NEW IS NOT NULL\n\t\t\t\t\t\t\t\tTHEN 2\n\t\t\t\t\t\t\tELSE 99\n\t\t\t\t\t\tEND\n\t\t\t\t\t)\n\t\t\t\tWHEN encounterclass in ('ambulatory', 'wellness', 'outpatient')\n\t\t\t\t\tTHEN (\n\t\t\t\t\t\tCASE\n\t\t\t\t\t\t\tWHEN VISIT_TYPE = 'inpatient' AND VISIT_OCCURRENCE_ID_NEW IS NOT NULL\n\t\t\t\t\t\t\t\tTHEN  1\n\t\t\t\t\t\t\tWHEN VISIT_TYPE in ('ambulatory', 'wellness', 'outpatient') AND VISIT_OCCURRENCE_ID_NEW IS NOT NULL\n\t\t\t\t\t\t\t\tTHEN 2\n\t\t\t\t\t\t\tELSE 99\n\t\t\t\t\t\tEND\n\t\t\t\t\t)\n\t\t\t\tWHEN encounterclass = 'inpatient' AND VISIT_TYPE = 'inpatient' AND VISIT_OCCURRENCE_ID_NEW IS NOT NULL\n\t\t\t\t\tTHEN 1\n\t\t\t\tELSE 99\n\t\t\tEND AS PRIORITY\n\tFROM ASSIGN_ALL_VISIT_IDS\n\t) T1\n) T2\nWHERE RN=1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.synthea.assign_all_visit_ids"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "mappings", "final_visit_ids"], "unique_id": "model.synthea.final_visit_ids", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "mappings/final_visit_ids.sql", "original_file_path": "models/mappings/final_visit_ids.sql", "name": "final_visit_ids", "alias": "final_visit_ids", "checksum": {"name": "sha256", "checksum": "57c0f19d96a795330ebad8f295dda172f08f15b179e3a5e880e19ef036bb1526"}, "tags": [], "refs": [["assign_all_visit_ids"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/mappings/final_visit_ids.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table", "enabled": true}, "created_at": 1666873494, "compiled_sql": "\n\nWITH ASSIGN_ALL_VISIT_IDS AS (\n\n    SELECT * FROM \"iomed\".\"cdm_dbt\".\"assign_all_visit_ids\"\n\n)\n\nSELECT encounter_id, VISIT_OCCURRENCE_ID_NEW\nFROM(\n\tSELECT *, ROW_NUMBER () OVER (PARTITION BY encounter_id ORDER BY PRIORITY) AS RN\n\tFROM (\n\t\tSELECT *,\n\t\t\tCASE\n\t\t\t\tWHEN encounterclass in ('emergency','urgent')\n\t\t\t\t\tTHEN (\n\t\t\t\t\t\tCASE\n\t\t\t\t\t\t\tWHEN VISIT_TYPE = 'inpatient' AND VISIT_OCCURRENCE_ID_NEW IS NOT NULL\n\t\t\t\t\t\t\t\tTHEN 1\n\t\t\t\t\t\t\tWHEN VISIT_TYPE in ('emergency','urgent') AND VISIT_OCCURRENCE_ID_NEW IS NOT NULL\n\t\t\t\t\t\t\t\tTHEN 2\n\t\t\t\t\t\t\tELSE 99\n\t\t\t\t\t\tEND\n\t\t\t\t\t)\n\t\t\t\tWHEN encounterclass in ('ambulatory', 'wellness', 'outpatient')\n\t\t\t\t\tTHEN (\n\t\t\t\t\t\tCASE\n\t\t\t\t\t\t\tWHEN VISIT_TYPE = 'inpatient' AND VISIT_OCCURRENCE_ID_NEW IS NOT NULL\n\t\t\t\t\t\t\t\tTHEN  1\n\t\t\t\t\t\t\tWHEN VISIT_TYPE in ('ambulatory', 'wellness', 'outpatient') AND VISIT_OCCURRENCE_ID_NEW IS NOT NULL\n\t\t\t\t\t\t\t\tTHEN 2\n\t\t\t\t\t\t\tELSE 99\n\t\t\t\t\t\tEND\n\t\t\t\t\t)\n\t\t\t\tWHEN encounterclass = 'inpatient' AND VISIT_TYPE = 'inpatient' AND VISIT_OCCURRENCE_ID_NEW IS NOT NULL\n\t\t\t\t\tTHEN 1\n\t\t\t\tELSE 99\n\t\t\tEND AS PRIORITY\n\tFROM ASSIGN_ALL_VISIT_IDS\n\t) T1\n) T2\nWHERE RN=1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"final_visit_ids\""}, "model.synthea.all_visits": {"raw_sql": "{{ config (\n    enabled = true\n) }}\n\nWITH encounters AS (\n\n    SELECT * FROM {{ source('iomed_raw', 'encounters') }}\n\n),\nperson AS (\n\n    SELECT * FROM {{ ref('person') }}\n\n),\n\n-- IP VISITS\nCTE_END_DATES AS (\n    SELECT patient, encounterclass, EVENT_DATE-interval '1' day AS END_DATE\n    FROM (\n        SELECT patient, encounterclass, EVENT_DATE, EVENT_TYPE,\n            MAX(START_ORDINAL) OVER (PARTITION BY patient, encounterclass ORDER BY EVENT_DATE, EVENT_TYPE ROWS UNBOUNDED PRECEDING) AS START_ORDINAL,\n            ROW_NUMBER() OVER (PARTITION BY patient, encounterclass ORDER BY EVENT_DATE, EVENT_TYPE) AS OVERALL_ORD\n        FROM (\n            SELECT patient, encounterclass, start AS EVENT_DATE, -1 AS EVENT_TYPE,\n                   ROW_NUMBER () OVER (PARTITION BY patient, encounterclass ORDER BY start, stop) AS START_ORDINAL\n            FROM encounters\n            WHERE encounterclass = 'inpatient'\n            UNION ALL\n            SELECT patient, encounterclass, stop+interval '1' day, 1 AS EVENT_TYPE, NULL\n            FROM encounters\n            WHERE encounterclass = 'inpatient'\n        ) RAWDATA\n    ) E\n    WHERE (2 * E.START_ORDINAL - E.OVERALL_ORD = 0)\n),\nCTE_VISIT_ENDS AS (\n    SELECT MIN(V.id) encounter_id,\n        V.patient,\n        V.encounterclass,\n        V.start VISIT_START_DATE,\n        MIN(E.END_DATE) AS VISIT_END_DATE\n    FROM encounters V\n        JOIN CTE_END_DATES E\n            ON V.patient = E.patient\n            AND V.encounterclass = E.encounterclass\n            AND E.END_DATE >= V.start\n    GROUP BY V.patient,V.encounterclass,V.start\n),\nIP_VISITS AS(\n    SELECT T2.encounter_id,\n        T2.patient,\n        T2.encounterclass,\n        T2.VISIT_START_DATE,\n        T2.VISIT_END_DATE\n    FROM (\n        SELECT\n            encounter_id,\n            patient,\n            encounterclass,\n            MIN(VISIT_START_DATE) AS VISIT_START_DATE,\n            VISIT_END_DATE\n        FROM CTE_VISIT_ENDS\n        GROUP BY encounter_id, patient, encounterclass, VISIT_END_DATE\n    ) T2\n),\n\n-- EMERGENCY VISITS\nER_VISITS AS(\nSELECT T2.encounter_id,\n    T2.patient,\n    T2.encounterclass,\n    T2.VISIT_START_DATE,\n    T2.VISIT_END_DATE\nFROM (\n    SELECT MIN(encounter_id) encounter_id,\n        patient,\n        encounterclass,\n        VISIT_START_DATE,\n        MAX(VISIT_END_DATE) AS VISIT_END_DATE\n    FROM (\n        SELECT CL1.id encounter_id,\n            CL1.patient,\n            CL1.encounterclass,\n            CL1.start VISIT_START_DATE,\n            CL2.stop VISIT_END_DATE\n        FROM encounters CL1\n        JOIN encounters CL2\n            ON CL1.patient = CL2.patient\n            AND CL1.start = CL2.start\n            AND CL1.encounterclass = CL2.encounterclass\n        WHERE CL1.encounterclass in ('emergency','urgent')\n    ) T1\n    GROUP BY patient, encounterclass, VISIT_START_DATE\n) T2\n),\n\n-- OUTPATIENTS VISITS\nCTE_VISITS_DISTINCT AS (\n    SELECT MIN(id) encounter_id,\n                   patient,\n                   encounterclass,\n                    start VISIT_START_DATE,\n                    stop VISIT_END_DATE\n    FROM encounters\n    WHERE encounterclass in ('ambulatory', 'wellness', 'outpatient')\n    GROUP BY patient,encounterclass,start,stop\n),\nOP_VISITS AS (\n    SELECT MIN(encounter_id) encounter_id,\n           patient,\n            encounterclass,\n            VISIT_START_DATE,\n            MAX(VISIT_END_DATE) AS VISIT_END_DATE\n    FROM CTE_VISITS_DISTINCT\n    GROUP BY patient, encounterclass, VISIT_START_DATE\n),\n\n-- ALL VISITS\nALL_VISITS AS (\n\n    SELECT * FROM IP_VISITS\n    UNION ALL\n    SELECT * FROM ER_VISITS\n    UNION ALL\n    SELECT * FROM OP_VISITS\n\n)\nSELECT *,\n       {{ create_id_from_str('encounter_id') }} as visit_occurrence_id\nFROM ALL_VISITS", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.synthea.create_id_from_str", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["source.synthea.iomed_raw.encounters", "model.synthea.person"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "mappings", "all_visits"], "unique_id": "model.synthea.all_visits", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "mappings/all_visits.sql", "original_file_path": "models/mappings/all_visits.sql", "name": "all_visits", "alias": "all_visits", "checksum": {"name": "sha256", "checksum": "9a421a44e335593388ffaeae6a605e9818fb5b188c976e0377ca1c754f06ffba"}, "tags": [], "refs": [["person"]], "sources": [["iomed_raw", "encounters"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/mappings/all_visits.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "enabled": true}, "created_at": 1666873494, "compiled_sql": "\n\nWITH encounters AS (\n\n    SELECT * FROM \"iomed\".\"raw\".\"encounters\"\n\n),\nperson AS (\n\n    SELECT * FROM \"iomed\".\"cdm\".\"person\"\n\n),\n\n-- IP VISITS\nCTE_END_DATES AS (\n    SELECT patient, encounterclass, EVENT_DATE-interval '1' day AS END_DATE\n    FROM (\n        SELECT patient, encounterclass, EVENT_DATE, EVENT_TYPE,\n            MAX(START_ORDINAL) OVER (PARTITION BY patient, encounterclass ORDER BY EVENT_DATE, EVENT_TYPE ROWS UNBOUNDED PRECEDING) AS START_ORDINAL,\n            ROW_NUMBER() OVER (PARTITION BY patient, encounterclass ORDER BY EVENT_DATE, EVENT_TYPE) AS OVERALL_ORD\n        FROM (\n            SELECT patient, encounterclass, start AS EVENT_DATE, -1 AS EVENT_TYPE,\n                   ROW_NUMBER () OVER (PARTITION BY patient, encounterclass ORDER BY start, stop) AS START_ORDINAL\n            FROM encounters\n            WHERE encounterclass = 'inpatient'\n            UNION ALL\n            SELECT patient, encounterclass, stop+interval '1' day, 1 AS EVENT_TYPE, NULL\n            FROM encounters\n            WHERE encounterclass = 'inpatient'\n        ) RAWDATA\n    ) E\n    WHERE (2 * E.START_ORDINAL - E.OVERALL_ORD = 0)\n),\nCTE_VISIT_ENDS AS (\n    SELECT MIN(V.id) encounter_id,\n        V.patient,\n        V.encounterclass,\n        V.start VISIT_START_DATE,\n        MIN(E.END_DATE) AS VISIT_END_DATE\n    FROM encounters V\n        JOIN CTE_END_DATES E\n            ON V.patient = E.patient\n            AND V.encounterclass = E.encounterclass\n            AND E.END_DATE >= V.start\n    GROUP BY V.patient,V.encounterclass,V.start\n),\nIP_VISITS AS(\n    SELECT T2.encounter_id,\n        T2.patient,\n        T2.encounterclass,\n        T2.VISIT_START_DATE,\n        T2.VISIT_END_DATE\n    FROM (\n        SELECT\n            encounter_id,\n            patient,\n            encounterclass,\n            MIN(VISIT_START_DATE) AS VISIT_START_DATE,\n            VISIT_END_DATE\n        FROM CTE_VISIT_ENDS\n        GROUP BY encounter_id, patient, encounterclass, VISIT_END_DATE\n    ) T2\n),\n\n-- EMERGENCY VISITS\nER_VISITS AS(\nSELECT T2.encounter_id,\n    T2.patient,\n    T2.encounterclass,\n    T2.VISIT_START_DATE,\n    T2.VISIT_END_DATE\nFROM (\n    SELECT MIN(encounter_id) encounter_id,\n        patient,\n        encounterclass,\n        VISIT_START_DATE,\n        MAX(VISIT_END_DATE) AS VISIT_END_DATE\n    FROM (\n        SELECT CL1.id encounter_id,\n            CL1.patient,\n            CL1.encounterclass,\n            CL1.start VISIT_START_DATE,\n            CL2.stop VISIT_END_DATE\n        FROM encounters CL1\n        JOIN encounters CL2\n            ON CL1.patient = CL2.patient\n            AND CL1.start = CL2.start\n            AND CL1.encounterclass = CL2.encounterclass\n        WHERE CL1.encounterclass in ('emergency','urgent')\n    ) T1\n    GROUP BY patient, encounterclass, VISIT_START_DATE\n) T2\n),\n\n-- OUTPATIENTS VISITS\nCTE_VISITS_DISTINCT AS (\n    SELECT MIN(id) encounter_id,\n                   patient,\n                   encounterclass,\n                    start VISIT_START_DATE,\n                    stop VISIT_END_DATE\n    FROM encounters\n    WHERE encounterclass in ('ambulatory', 'wellness', 'outpatient')\n    GROUP BY patient,encounterclass,start,stop\n),\nOP_VISITS AS (\n    SELECT MIN(encounter_id) encounter_id,\n           patient,\n            encounterclass,\n            VISIT_START_DATE,\n            MAX(VISIT_END_DATE) AS VISIT_END_DATE\n    FROM CTE_VISITS_DISTINCT\n    GROUP BY patient, encounterclass, VISIT_START_DATE\n),\n\n-- ALL VISITS\nALL_VISITS AS (\n\n    SELECT * FROM IP_VISITS\n    UNION ALL\n    SELECT * FROM ER_VISITS\n    UNION ALL\n    SELECT * FROM OP_VISITS\n\n)\nSELECT *,\n       \n    abs(('x' || substr(md5(encounter_id), 1, 16))::bit(64)::bigint)\n as visit_occurrence_id\nFROM ALL_VISITS", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"all_visits\""}, "model.synthea.source_to_standard_vocab_map": {"raw_sql": "{{ config(\n    enabled = true,\n    materialized='table',\n    post_hook=[\n      \"create index if not exists idx_vocab_map_source_code on {{ this }} (source_code);\",\n\t  \"create index if not exists idx_vocab_map_source_vocab_id on {{ this }} (source_vocabulary_id);\"\n    ]\n  )\n}}\n\nWITH CONCEPT AS (\n\n    SELECT * FROM {{ source('iomed', 'concept') }}\n\n),\nsource_to_concept_map as (\n\n    SELECT * FROM {{ source('iomed', 'source_to_concept_map') }}\n\n),\nCONCEPT_RELATIONSHIP AS (\n\n    SELECT * FROM {{ source('iomed', 'concept_relationship') }}\n\n),\nCTE_VOCAB_MAP AS (\n       SELECT c.concept_code AS SOURCE_CODE, c.concept_id AS SOURCE_CONCEPT_ID, c.concept_name AS SOURCE_CODE_DESCRIPTION, c.vocabulary_id AS SOURCE_VOCABULARY_ID,\n                           c.domain_id AS SOURCE_DOMAIN_ID, c.CONCEPT_CLASS_ID AS SOURCE_CONCEPT_CLASS_ID,\n                                                   c.VALID_START_DATE AS SOURCE_VALID_START_DATE, c.VALID_END_DATE AS SOURCE_VALID_END_DATE, c.INVALID_REASON AS SOURCE_INVALID_REASON,\n                           c1.concept_id AS TARGET_CONCEPT_ID, c1.concept_name AS TARGET_CONCEPT_NAME, c1.VOCABULARY_ID AS TARGET_VOCABULARY_ID, c1.domain_id AS TARGET_DOMAIN_ID, c1.concept_class_id AS TARGET_CONCEPT_CLASS_ID,\n                           c1.INVALID_REASON AS TARGET_INVALID_REASON, c1.standard_concept AS TARGET_STANDARD_CONCEPT\n       FROM CONCEPT C\n             JOIN CONCEPT_RELATIONSHIP CR\n                        ON C.CONCEPT_ID = CR.CONCEPT_ID_1\n                        AND CR.invalid_reason IS NULL\n                        AND lower(cr.relationship_id) = 'maps to'\n              JOIN CONCEPT C1\n                        ON CR.CONCEPT_ID_2 = C1.CONCEPT_ID\n                        AND C1.INVALID_REASON IS NULL\n       UNION\n       SELECT source_code, SOURCE_CONCEPT_ID, SOURCE_CODE_DESCRIPTION, source_vocabulary_id, c1.domain_id AS SOURCE_DOMAIN_ID, c2.CONCEPT_CLASS_ID AS SOURCE_CONCEPT_CLASS_ID,\n                                        c1.VALID_START_DATE AS SOURCE_VALID_START_DATE, c1.VALID_END_DATE AS SOURCE_VALID_END_DATE,\n                     stcm.INVALID_REASON AS SOURCE_INVALID_REASON,target_concept_id, c2.CONCEPT_NAME AS TARGET_CONCEPT_NAME, target_vocabulary_id, c2.domain_id AS TARGET_DOMAIN_ID, c2.concept_class_id AS TARGET_CONCEPT_CLASS_ID,\n                     c2.INVALID_REASON AS TARGET_INVALID_REASON, c2.standard_concept AS TARGET_STANDARD_CONCEPT\n       FROM source_to_concept_map stcm\n              LEFT OUTER JOIN CONCEPT c1\n                     ON c1.concept_id = stcm.source_concept_id\n              LEFT OUTER JOIN CONCEPT c2\n                     ON c2.CONCEPT_ID = stcm.target_concept_id\n       WHERE stcm.INVALID_REASON IS NULL\n)\nselect * from CTE_VOCAB_MAP", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["source.synthea.iomed.concept", "source.synthea.iomed.source_to_concept_map", "source.synthea.iomed.concept_relationship"]}, "config": {"enabled": true, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "create index if not exists idx_vocab_map_source_code on {{ this }} (source_code);", "transaction": true, "index": null}, {"sql": "create index if not exists idx_vocab_map_source_vocab_id on {{ this }} (source_vocabulary_id);", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "mappings", "source_to_standard_vocab_map"], "unique_id": "model.synthea.source_to_standard_vocab_map", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "mappings/source_to_standard_vocab_map.sql", "original_file_path": "models/mappings/source_to_standard_vocab_map.sql", "name": "source_to_standard_vocab_map", "alias": "source_to_standard_vocab_map", "checksum": {"name": "sha256", "checksum": "a1c9e68c4e7aef8ab07ead200ca8a240500cfe1b83bbe64a1683caee016fd30b"}, "tags": [], "refs": [], "sources": [["iomed", "concept"], ["iomed", "source_to_concept_map"], ["iomed", "concept_relationship"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/mappings/source_to_standard_vocab_map.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["create index if not exists idx_vocab_map_source_code on {{ this }} (source_code);", "create index if not exists idx_vocab_map_source_vocab_id on {{ this }} (source_vocabulary_id);"], "schema": "cdm_dbt", "enabled": true, "materialized": "table"}, "created_at": 1666873494, "compiled_sql": "\n\nWITH CONCEPT AS (\n\n    SELECT * FROM \"iomed\".\"vocabularies\".\"concept\"\n\n),\nsource_to_concept_map as (\n\n    SELECT * FROM \"iomed\".\"vocabularies\".\"source_to_concept_map\"\n\n),\nCONCEPT_RELATIONSHIP AS (\n\n    SELECT * FROM \"iomed\".\"vocabularies\".\"concept_relationship\"\n\n),\nCTE_VOCAB_MAP AS (\n       SELECT c.concept_code AS SOURCE_CODE, c.concept_id AS SOURCE_CONCEPT_ID, c.concept_name AS SOURCE_CODE_DESCRIPTION, c.vocabulary_id AS SOURCE_VOCABULARY_ID,\n                           c.domain_id AS SOURCE_DOMAIN_ID, c.CONCEPT_CLASS_ID AS SOURCE_CONCEPT_CLASS_ID,\n                                                   c.VALID_START_DATE AS SOURCE_VALID_START_DATE, c.VALID_END_DATE AS SOURCE_VALID_END_DATE, c.INVALID_REASON AS SOURCE_INVALID_REASON,\n                           c1.concept_id AS TARGET_CONCEPT_ID, c1.concept_name AS TARGET_CONCEPT_NAME, c1.VOCABULARY_ID AS TARGET_VOCABULARY_ID, c1.domain_id AS TARGET_DOMAIN_ID, c1.concept_class_id AS TARGET_CONCEPT_CLASS_ID,\n                           c1.INVALID_REASON AS TARGET_INVALID_REASON, c1.standard_concept AS TARGET_STANDARD_CONCEPT\n       FROM CONCEPT C\n             JOIN CONCEPT_RELATIONSHIP CR\n                        ON C.CONCEPT_ID = CR.CONCEPT_ID_1\n                        AND CR.invalid_reason IS NULL\n                        AND lower(cr.relationship_id) = 'maps to'\n              JOIN CONCEPT C1\n                        ON CR.CONCEPT_ID_2 = C1.CONCEPT_ID\n                        AND C1.INVALID_REASON IS NULL\n       UNION\n       SELECT source_code, SOURCE_CONCEPT_ID, SOURCE_CODE_DESCRIPTION, source_vocabulary_id, c1.domain_id AS SOURCE_DOMAIN_ID, c2.CONCEPT_CLASS_ID AS SOURCE_CONCEPT_CLASS_ID,\n                                        c1.VALID_START_DATE AS SOURCE_VALID_START_DATE, c1.VALID_END_DATE AS SOURCE_VALID_END_DATE,\n                     stcm.INVALID_REASON AS SOURCE_INVALID_REASON,target_concept_id, c2.CONCEPT_NAME AS TARGET_CONCEPT_NAME, target_vocabulary_id, c2.domain_id AS TARGET_DOMAIN_ID, c2.concept_class_id AS TARGET_CONCEPT_CLASS_ID,\n                     c2.INVALID_REASON AS TARGET_INVALID_REASON, c2.standard_concept AS TARGET_STANDARD_CONCEPT\n       FROM source_to_concept_map stcm\n              LEFT OUTER JOIN CONCEPT c1\n                     ON c1.concept_id = stcm.source_concept_id\n              LEFT OUTER JOIN CONCEPT c2\n                     ON c2.CONCEPT_ID = stcm.target_concept_id\n       WHERE stcm.INVALID_REASON IS NULL\n)\nselect * from CTE_VOCAB_MAP", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"cdm_dbt\".\"source_to_standard_vocab_map\""}, "seed.synthea.medications": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "raw", "fqn": ["synthea", "medications"], "unique_id": "seed.synthea.medications", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "medications.csv", "original_file_path": "data/medications.csv", "name": "medications", "alias": "medications", "checksum": {"name": "path", "checksum": "data/medications.csv"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}", "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"], "schema": "raw"}, "created_at": 1666873494, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"raw\".\"medications\""}, "seed.synthea.allergies": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "raw", "fqn": ["synthea", "allergies"], "unique_id": "seed.synthea.allergies", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "allergies.csv", "original_file_path": "data/allergies.csv", "name": "allergies", "alias": "allergies", "checksum": {"name": "sha256", "checksum": "11a4689b3278045f7454bf54634623638d945d6961951d211213978d9e726d12"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}", "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"], "schema": "raw"}, "created_at": 1666873494, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"raw\".\"allergies\""}, "seed.synthea.procedures": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "raw", "fqn": ["synthea", "procedures"], "unique_id": "seed.synthea.procedures", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "procedures.csv", "original_file_path": "data/procedures.csv", "name": "procedures", "alias": "procedures", "checksum": {"name": "path", "checksum": "data/procedures.csv"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}", "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"], "schema": "raw"}, "created_at": 1666873494, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"raw\".\"procedures\""}, "seed.synthea.conditions": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "raw", "fqn": ["synthea", "conditions"], "unique_id": "seed.synthea.conditions", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "conditions.csv", "original_file_path": "data/conditions.csv", "name": "conditions", "alias": "conditions", "checksum": {"name": "path", "checksum": "data/conditions.csv"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}", "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"], "schema": "raw"}, "created_at": 1666873494, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"raw\".\"conditions\""}, "seed.synthea.encounters": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "raw", "fqn": ["synthea", "encounters"], "unique_id": "seed.synthea.encounters", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "encounters.csv", "original_file_path": "data/encounters.csv", "name": "encounters", "alias": "encounters", "checksum": {"name": "path", "checksum": "data/encounters.csv"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}", "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"], "schema": "raw"}, "created_at": 1666873494, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"raw\".\"encounters\""}, "seed.synthea.immunizations": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "raw", "fqn": ["synthea", "immunizations"], "unique_id": "seed.synthea.immunizations", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "immunizations.csv", "original_file_path": "data/immunizations.csv", "name": "immunizations", "alias": "immunizations", "checksum": {"name": "path", "checksum": "data/immunizations.csv"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}", "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"], "schema": "raw"}, "created_at": 1666873494, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"raw\".\"immunizations\""}, "seed.synthea.patients": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "raw", "fqn": ["synthea", "patients"], "unique_id": "seed.synthea.patients", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "patients.csv", "original_file_path": "data/patients.csv", "name": "patients", "alias": "patients", "checksum": {"name": "path", "checksum": "data/patients.csv"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}", "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"], "schema": "raw"}, "created_at": 1666873494, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"raw\".\"patients\""}, "seed.synthea.observations": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "raw", "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "raw", "fqn": ["synthea", "observations"], "unique_id": "seed.synthea.observations", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "observations.csv", "original_file_path": "data/observations.csv", "name": "observations", "alias": "observations", "checksum": {"name": "path", "checksum": "data/observations.csv"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}", "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault"], "schema": "raw"}, "created_at": 1666873494, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"raw\".\"observations\""}, "operation.synthea.synthea-on-run-start-0": {"raw_sql": "CREATE EXTENSION IF NOT EXISTS tablefunc;", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "hooks", "synthea-on-run-start-0"], "unique_id": "operation.synthea.synthea-on-run-start-0", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "hooks/synthea-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "name": "synthea-on-run-start-0", "alias": "synthea-on-run-start-0", "checksum": {"name": "sha256", "checksum": "6cc236d4def900077a077cb0556536510e60f2cef8b98c73a6de098b3a4766ea"}, "tags": ["on-run-start"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/./dbt_project.yml/hooks/synthea-on-run-start-0.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"]}, "created_at": 1666873494, "compiled_sql": "CREATE EXTENSION IF NOT EXISTS tablefunc;", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "operation.synthea.synthea-on-run-end-0": {"raw_sql": "GRANT USAGE ON SCHEMA {{ target.schema }} TO dataengineering_stolon_vault;", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "hooks", "synthea-on-run-end-0"], "unique_id": "operation.synthea.synthea-on-run-end-0", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "hooks/synthea-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "name": "synthea-on-run-end-0", "alias": "synthea-on-run-end-0", "checksum": {"name": "sha256", "checksum": "6cc236d4def900077a077cb0556536510e60f2cef8b98c73a6de098b3a4766ea"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/./dbt_project.yml/hooks/synthea-on-run-end-0.sql", "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"]}, "created_at": 1666873494, "compiled_sql": "GRANT USAGE ON SCHEMA cdm TO dataengineering_stolon_vault;", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "model.logging.stg_dbt_audit_log": {"raw_sql": "with audit as (\n\n    select * from {{ get_audit_relation() }}\n\n),\n\nwith_id as (\n\n    select\n\n        *,\n\n        {{ dbt_utils.surrogate_key([\n            'event_name',\n            'event_model',\n            'invocation_id'\n        ]) }} as event_id\n\n    from audit\n\n)\n\nselect * from with_id", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.logging.get_audit_relation", "macro.dbt_utils.surrogate_key", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "meta", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "meta", "fqn": ["logging", "stg_dbt_audit_log"], "unique_id": "model.logging.stg_dbt_audit_log", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "stg_dbt_audit_log.sql", "original_file_path": "models/stg_dbt_audit_log.sql", "name": "stg_dbt_audit_log", "alias": "stg_dbt_audit_log", "checksum": {"name": "sha256", "checksum": "860aaeb854440548a6f7ce422ef884b6fd2180e82f8de3bd0fec173e678f0950"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/logging/models/stg_dbt_audit_log.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "meta", "pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"]}, "created_at": 1666873494, "compiled_sql": "with audit as (\n\n    select * from \"iomed\".\"cdm_meta\".\"dbt_audit_log\"\n\n),\n\nwith_id as (\n\n    select\n\n        *,\n\n        md5(cast(coalesce(cast(event_name as \n    varchar\n), '') || '-' || coalesce(cast(event_model as \n    varchar\n), '') || '-' || coalesce(cast(invocation_id as \n    varchar\n), '') as \n    varchar\n)) as event_id\n\n    from audit\n\n)\n\nselect * from with_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"meta\".\"stg_dbt_audit_log\""}, "model.logging.stg_dbt_deployments": {"raw_sql": "with events as (\n\n    select * from {{ref('stg_dbt_audit_log')}}\n\n),\n\naggregated as (\n\n    select\n\n        invocation_id,\n        event_user as user,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'run started' then event_timestamp\n            end) as deployment_started_at,\n\n        min(case\n            when event_name = 'run completed' then event_timestamp\n            end) as deployment_completed_at,\n\n        count(distinct case\n            when event_name ilike '%model%' then event_model\n            end) as models_deployed\n\n    from events\n\n    {{ dbt_utils.group_by(n=4) }}\n\n)\n\nselect * from aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.logging.stg_dbt_audit_log"]}, "config": {"enabled": true, "alias": null, "schema": "meta", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "meta", "fqn": ["logging", "default", "stg_dbt_deployments"], "unique_id": "model.logging.stg_dbt_deployments", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "default/stg_dbt_deployments.sql", "original_file_path": "models/default/stg_dbt_deployments.sql", "name": "stg_dbt_deployments", "alias": "stg_dbt_deployments", "checksum": {"name": "sha256", "checksum": "13fdb1dfbcdb35a5a6fcc1e96d338658aebdca7591055af3fb6189b1aa39dfa6"}, "tags": [], "refs": [["stg_dbt_audit_log"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/logging/models/default/stg_dbt_deployments.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "meta", "enabled": "{{ target.type != \"bigquery\" | as_bool }}", "pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"]}, "created_at": 1666873494, "compiled_sql": "with events as (\n\n    select * from \"iomed\".\"meta\".\"stg_dbt_audit_log\"\n\n),\n\naggregated as (\n\n    select\n\n        invocation_id,\n        event_user as user,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'run started' then event_timestamp\n            end) as deployment_started_at,\n\n        min(case\n            when event_name = 'run completed' then event_timestamp\n            end) as deployment_completed_at,\n\n        count(distinct case\n            when event_name ilike '%model%' then event_model\n            end) as models_deployed\n\n    from events\n\n    group by 1,2,3,4\n\n)\n\nselect * from aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"meta\".\"stg_dbt_deployments\""}, "model.logging.stg_dbt_model_deployments": {"raw_sql": "with events as (\n\n    select * from {{ ref('stg_dbt_audit_log') }}\n\n),\n\naggregated as (\n\n    select\n\n        {{ dbt_utils.surrogate_key([\n            'event_model',\n            'invocation_id'\n        ]) }} as model_deployment_id,\n\n        invocation_id,\n        event_model as model,\n        event_schema as schema,\n        event_user as user,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'model deployment started' then event_timestamp\n        end) as deployment_started_at,\n\n        min(case\n            when event_name = 'model deployment completed' then event_timestamp\n        end) as deployment_completed_at\n\n    from events\n\n    where event_name ilike '%model%'\n\n    {{ dbt_utils.group_by(n=7) }}\n\n)\n\nselect * from aggregated", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_utils.group_by", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.logging.stg_dbt_audit_log"]}, "config": {"enabled": true, "alias": null, "schema": "meta", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "meta", "fqn": ["logging", "default", "stg_dbt_model_deployments"], "unique_id": "model.logging.stg_dbt_model_deployments", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "default/stg_dbt_model_deployments.sql", "original_file_path": "models/default/stg_dbt_model_deployments.sql", "name": "stg_dbt_model_deployments", "alias": "stg_dbt_model_deployments", "checksum": {"name": "sha256", "checksum": "2188a68b5a1da14b216be25caa8c84e5dbda2a9c186cc0ad857d7bf908944697"}, "tags": [], "refs": [["stg_dbt_audit_log"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/logging/models/default/stg_dbt_model_deployments.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "meta", "enabled": "{{ target.type != \"bigquery\" | as_bool }}", "pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"]}, "created_at": 1666873495, "compiled_sql": "with events as (\n\n    select * from \"iomed\".\"meta\".\"stg_dbt_audit_log\"\n\n),\n\naggregated as (\n\n    select\n\n        md5(cast(coalesce(cast(event_model as \n    varchar\n), '') || '-' || coalesce(cast(invocation_id as \n    varchar\n), '') as \n    varchar\n)) as model_deployment_id,\n\n        invocation_id,\n        event_model as model,\n        event_schema as schema,\n        event_user as user,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'model deployment started' then event_timestamp\n        end) as deployment_started_at,\n\n        min(case\n            when event_name = 'model deployment completed' then event_timestamp\n        end) as deployment_completed_at\n\n    from events\n\n    where event_name ilike '%model%'\n\n    group by 1,2,3,4,5,6,7\n\n)\n\nselect * from aggregated", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "\"iomed\".\"meta\".\"stg_dbt_model_deployments\""}, "analysis.logging.models_summary": {"raw_sql": "select\n  model\n  , cast(min(deployment_started_at) as date) as first\n  , max(deployment_started_at) as last\nfrom\n  {{ ref('stg_dbt_model_deployments') }}\nwhere\n  [deployment_started_at=daterange]\ngroup by\n  1\norder by\n  3 asc", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.logging.stg_dbt_model_deployments"]}, "config": {"enabled": true, "alias": null, "schema": "meta", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "meta", "fqn": ["logging", "analysis", "periscope", "models_summary"], "unique_id": "analysis.logging.models_summary", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "analysis/periscope/models_summary.sql", "original_file_path": "analysis/periscope/models_summary.sql", "name": "models_summary", "alias": "models_summary", "checksum": {"name": "sha256", "checksum": "11235519fa3e0c8447ab2ac37a69aee3fb1085303ffc627243512dcc98deb32c"}, "tags": [], "refs": [["stg_dbt_model_deployments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/logging/analysis/periscope/models_summary.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "meta", "pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"]}, "created_at": 1666873495, "compiled_sql": "select\n  model\n  , cast(min(deployment_started_at) as date) as first\n  , max(deployment_started_at) as last\nfrom\n  \"iomed\".\"meta\".\"stg_dbt_model_deployments\"\nwhere\n  [deployment_started_at=daterange]\ngroup by\n  1\norder by\n  3 asc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.logging.models": {"raw_sql": "select\n  [deployment_started_at:aggregation] as period\n  , model\n  , count(1) as deployment_count\nfrom\n  {{ ref('stg_dbt_model_deployments') }}\nwhere\n  [deployment_started_at=daterange]\ngroup by\n  1\n  , 2\norder by\n  1 desc\n  , 2", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.logging.stg_dbt_model_deployments"]}, "config": {"enabled": true, "alias": null, "schema": "meta", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "meta", "fqn": ["logging", "analysis", "periscope", "models"], "unique_id": "analysis.logging.models", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "analysis/periscope/models.sql", "original_file_path": "analysis/periscope/models.sql", "name": "models", "alias": "models", "checksum": {"name": "sha256", "checksum": "ad58419bde3e142dadccb66e55850f11687b9cb3eb37a0ed3188701f90d0478a"}, "tags": [], "refs": [["stg_dbt_model_deployments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/logging/analysis/periscope/models.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "meta", "pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"]}, "created_at": 1666873495, "compiled_sql": "select\n  [deployment_started_at:aggregation] as period\n  , model\n  , count(1) as deployment_count\nfrom\n  \"iomed\".\"meta\".\"stg_dbt_model_deployments\"\nwhere\n  [deployment_started_at=daterange]\ngroup by\n  1\n  , 2\norder by\n  1 desc\n  , 2", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.logging.deployments": {"raw_sql": "select\n  [deployment_started_at:aggregation] as period\n  , sum(datediff('minute', deployment_started_at, deployment_completed_at)) as total_runtime_m\n  , avg(datediff('minute', deployment_started_at, deployment_completed_at)) as avg_runtime_m\n  , sum(models_deployed) as models_deployed\nfrom\n  {{ ref('stg_dbt_deployments') }}\nwhere\n  [deployment_started_at=daterange]\ngroup by\n  1\norder by\n  1 desc", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.logging.stg_dbt_deployments"]}, "config": {"enabled": true, "alias": null, "schema": "meta", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "meta", "fqn": ["logging", "analysis", "periscope", "deployments"], "unique_id": "analysis.logging.deployments", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "analysis/periscope/deployments.sql", "original_file_path": "analysis/periscope/deployments.sql", "name": "deployments", "alias": "deployments", "checksum": {"name": "sha256", "checksum": "a79323cb950544c98ee9e49eede7eb70a9f506729ca2f6316ba2df4a06b1a484"}, "tags": [], "refs": [["stg_dbt_deployments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/logging/analysis/periscope/deployments.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "meta", "pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"]}, "created_at": 1666873495, "compiled_sql": "select\n  [deployment_started_at:aggregation] as period\n  , sum(datediff('minute', deployment_started_at, deployment_completed_at)) as total_runtime_m\n  , avg(datediff('minute', deployment_started_at, deployment_completed_at)) as avg_runtime_m\n  , sum(models_deployed) as models_deployed\nfrom\n  \"iomed\".\"meta\".\"stg_dbt_deployments\"\nwhere\n  [deployment_started_at=daterange]\ngroup by\n  1\norder by\n  1 desc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "analysis.logging.models_out_of_sla": {"raw_sql": "with\n  models_out_of_sla as (\n    select\n      model\n      , max(deployment_started_at) as last_deployment_ts\n      , datediff('hour', max(deployment_started_at), {{ dbt_utils.current_timestamp() }}) as hours_since_refreshed\n    from\n      {{ ref('stg_dbt_model_deployments') }}\n    group by\n      1\n    having\n      max(deployment_started_at) < dateadd('hour', -24, getdate())\n  )\nselect\n  count(1)\nfrom\n  models_out_of_sla", "compiled": true, "resource_type": "analysis", "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": ["model.logging.stg_dbt_model_deployments"]}, "config": {"enabled": true, "alias": null, "schema": "meta", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "meta", "fqn": ["logging", "analysis", "periscope", "models_out_of_sla"], "unique_id": "analysis.logging.models_out_of_sla", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "analysis/periscope/models_out_of_sla.sql", "original_file_path": "analysis/periscope/models_out_of_sla.sql", "name": "models_out_of_sla", "alias": "models_out_of_sla", "checksum": {"name": "sha256", "checksum": "16bb908db23145769f3aef422e823ca2f6e49721de4691b5d092baf8bf77e257"}, "tags": [], "refs": [["stg_dbt_model_deployments"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/logging/analysis/periscope/models_out_of_sla.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "meta", "pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"]}, "created_at": 1666873495, "compiled_sql": "with\n  models_out_of_sla as (\n    select\n      model\n      , max(deployment_started_at) as last_deployment_ts\n      , datediff('hour', max(deployment_started_at), \n    current_timestamp::\n    timestamp\n\n) as hours_since_refreshed\n    from\n      \"iomed\".\"meta\".\"stg_dbt_model_deployments\"\n    group by\n      1\n    having\n      max(deployment_started_at) < dateadd('hour', -24, getdate())\n  )\nselect\n  count(1)\nfrom\n  models_out_of_sla", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "operation.logging.logging-on-run-start-0": {"raw_sql": "{{ logging.create_audit_schema() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.logging.create_audit_schema", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "meta", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "meta", "fqn": ["logging", "hooks", "logging-on-run-start-0"], "unique_id": "operation.logging.logging-on-run-start-0", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "hooks/logging-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "name": "logging-on-run-start-0", "alias": "logging-on-run-start-0", "checksum": {"name": "sha256", "checksum": "81f6ee2a0b14c3b34f8de2213cc3dc5cb12f9a5cec8425fe4623d2f4eefb1412"}, "tags": ["on-run-start"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/logging/./dbt_project.yml/hooks/logging-on-run-start-0.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "meta", "pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"]}, "created_at": 1666873495, "compiled_sql": "\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "operation.logging.logging-on-run-start-1": {"raw_sql": "{{ logging.create_audit_log_table() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.logging.create_audit_log_table", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "meta", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "meta", "fqn": ["logging", "hooks", "logging-on-run-start-1"], "unique_id": "operation.logging.logging-on-run-start-1", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "hooks/logging-on-run-start-1.sql", "original_file_path": "./dbt_project.yml", "name": "logging-on-run-start-1", "alias": "logging-on-run-start-1", "checksum": {"name": "sha256", "checksum": "81f6ee2a0b14c3b34f8de2213cc3dc5cb12f9a5cec8425fe4623d2f4eefb1412"}, "tags": ["on-run-start"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "meta", "pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"]}, "created_at": 1666873495, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 1}, "operation.logging.logging-on-run-start-2": {"raw_sql": "{{ logging.log_run_start_event() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.logging.log_run_start_event", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "meta", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "meta", "fqn": ["logging", "hooks", "logging-on-run-start-2"], "unique_id": "operation.logging.logging-on-run-start-2", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "hooks/logging-on-run-start-2.sql", "original_file_path": "./dbt_project.yml", "name": "logging-on-run-start-2", "alias": "logging-on-run-start-2", "checksum": {"name": "sha256", "checksum": "81f6ee2a0b14c3b34f8de2213cc3dc5cb12f9a5cec8425fe4623d2f4eefb1412"}, "tags": ["on-run-start"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/logging/./dbt_project.yml/hooks/logging-on-run-start-2.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "meta", "pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"]}, "created_at": 1666873495, "compiled_sql": "\n    \n\n    insert into \"iomed\".\"cdm_meta\".\"dbt_audit_log\" (\n        event_name,\n        event_timestamp,\n        event_schema,\n        event_model,\n        event_user,\n        event_target,\n        event_is_full_refresh,\n        invocation_id\n    )\n\n    values (\n        'run started',\n        \n    (current_timestamp at time zone 'utc')::\n    timestamp\n\n,\n        '',\n        '',\n        'postgres',\n        'synthea',\n        FALSE,\n        'f50e6a13-2918-4d67-8867-1378cf104964'\n    );\n\n    commit;\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 2}, "operation.logging.logging-on-run-end-0": {"raw_sql": "{{ logging.log_run_end_event() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.logging.log_run_end_event", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "meta", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "meta", "fqn": ["logging", "hooks", "logging-on-run-end-0"], "unique_id": "operation.logging.logging-on-run-end-0", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "hooks/logging-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "name": "logging-on-run-end-0", "alias": "logging-on-run-end-0", "checksum": {"name": "sha256", "checksum": "81f6ee2a0b14c3b34f8de2213cc3dc5cb12f9a5cec8425fe4623d2f4eefb1412"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/logging/./dbt_project.yml/hooks/logging-on-run-end-0.sql", "build_path": null, "deferred": false, "unrendered_config": {"schema": "meta", "pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"]}, "created_at": 1666873495, "compiled_sql": "\n    \n\n    insert into \"iomed\".\"cdm_meta\".\"dbt_audit_log\" (\n        event_name,\n        event_timestamp,\n        event_schema,\n        event_model,\n        event_user,\n        event_target,\n        event_is_full_refresh,\n        invocation_id\n    )\n\n    values (\n        'run completed',\n        \n    (current_timestamp at time zone 'utc')::\n    timestamp\n\n,\n        '',\n        '',\n        'postgres',\n        'synthea',\n        FALSE,\n        'f50e6a13-2918-4d67-8867-1378cf104964'\n    );\n\n    commit;\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "test.synthea.unique_person_person_id.ee18b5e56c": {"raw_sql": "{{ test_unique(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "unique", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('person')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.synthea.person"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "iomed", "schema": "dbt_test__audit", "fqn": ["synthea", "schema_test", "unique_person_person_id"], "unique_id": "test.synthea.unique_person_person_id.ee18b5e56c", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "schema_test/unique_person_person_id.sql", "original_file_path": "models/schema.yml", "name": "unique_person_person_id", "alias": "unique_person_person_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["person"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/schema.yml/schema_test/unique_person_person_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666873495, "compiled_sql": "\n    \n    \n\nselect\n    person_id as unique_field,\n    count(*) as n_records\n\nfrom \"iomed\".\"cdm\".\"person\"\nwhere person_id is not null\ngroup by person_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "person_id"}, "test.synthea.not_null_person_person_id.6f9ab4b4de": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "person_id", "model": "{{ get_where_subquery(ref('person')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthea.person"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "iomed", "schema": "dbt_test__audit", "fqn": ["synthea", "schema_test", "not_null_person_person_id"], "unique_id": "test.synthea.not_null_person_person_id.6f9ab4b4de", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "schema_test/not_null_person_person_id.sql", "original_file_path": "models/schema.yml", "name": "not_null_person_person_id", "alias": "not_null_person_person_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["person"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/schema.yml/schema_test/not_null_person_person_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666873495, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"iomed\".\"cdm\".\"person\"\nwhere person_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "person_id"}, "test.synthea.not_null_person_gender_concept_id.a1409c1a02": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gender_concept_id", "model": "{{ get_where_subquery(ref('person')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthea.person"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "iomed", "schema": "dbt_test__audit", "fqn": ["synthea", "schema_test", "not_null_person_gender_concept_id"], "unique_id": "test.synthea.not_null_person_gender_concept_id.a1409c1a02", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "schema_test/not_null_person_gender_concept_id.sql", "original_file_path": "models/schema.yml", "name": "not_null_person_gender_concept_id", "alias": "not_null_person_gender_concept_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["person"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/schema.yml/schema_test/not_null_person_gender_concept_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666873495, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"iomed\".\"cdm\".\"person\"\nwhere gender_concept_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gender_concept_id"}, "test.synthea.not_null_person_year_of_birth.03ea95e466": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "year_of_birth", "model": "{{ get_where_subquery(ref('person')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthea.person"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "iomed", "schema": "dbt_test__audit", "fqn": ["synthea", "schema_test", "not_null_person_year_of_birth"], "unique_id": "test.synthea.not_null_person_year_of_birth.03ea95e466", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "schema_test/not_null_person_year_of_birth.sql", "original_file_path": "models/schema.yml", "name": "not_null_person_year_of_birth", "alias": "not_null_person_year_of_birth", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["person"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/schema.yml/schema_test/not_null_person_year_of_birth.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666873495, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"iomed\".\"cdm\".\"person\"\nwhere year_of_birth is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "year_of_birth"}, "test.synthea.not_null_person_race_concept_id.288243421d": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "race_concept_id", "model": "{{ get_where_subquery(ref('person')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthea.person"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "iomed", "schema": "dbt_test__audit", "fqn": ["synthea", "schema_test", "not_null_person_race_concept_id"], "unique_id": "test.synthea.not_null_person_race_concept_id.288243421d", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "schema_test/not_null_person_race_concept_id.sql", "original_file_path": "models/schema.yml", "name": "not_null_person_race_concept_id", "alias": "not_null_person_race_concept_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["person"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/schema.yml/schema_test/not_null_person_race_concept_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666873495, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"iomed\".\"cdm\".\"person\"\nwhere race_concept_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "race_concept_id"}, "test.synthea.not_null_person_ethnicity_concept_id.e352f804af": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ethnicity_concept_id", "model": "{{ get_where_subquery(ref('person')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthea.person"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "iomed", "schema": "dbt_test__audit", "fqn": ["synthea", "schema_test", "not_null_person_ethnicity_concept_id"], "unique_id": "test.synthea.not_null_person_ethnicity_concept_id.e352f804af", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "schema_test/not_null_person_ethnicity_concept_id.sql", "original_file_path": "models/schema.yml", "name": "not_null_person_ethnicity_concept_id", "alias": "not_null_person_ethnicity_concept_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["person"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/schema.yml/schema_test/not_null_person_ethnicity_concept_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666873495, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"iomed\".\"cdm\".\"person\"\nwhere ethnicity_concept_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ethnicity_concept_id"}, "test.synthea.not_null_person_gender_source_concept_id.ee915a8453": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "gender_source_concept_id", "model": "{{ get_where_subquery(ref('person')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthea.person"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "iomed", "schema": "dbt_test__audit", "fqn": ["synthea", "schema_test", "not_null_person_gender_source_concept_id"], "unique_id": "test.synthea.not_null_person_gender_source_concept_id.ee915a8453", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "schema_test/not_null_person_gender_source_concept_id.sql", "original_file_path": "models/schema.yml", "name": "not_null_person_gender_source_concept_id", "alias": "not_null_person_gender_source_concept_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["person"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/schema.yml/schema_test/not_null_person_gender_source_concept_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666873495, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"iomed\".\"cdm\".\"person\"\nwhere gender_source_concept_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "gender_source_concept_id"}, "test.synthea.not_null_person_ethnicity_source_concept_id.99867328ac": {"raw_sql": "{{ test_not_null(**_dbt_schema_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ethnicity_source_concept_id", "model": "{{ get_where_subquery(ref('person')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.synthea.person"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "iomed", "schema": "dbt_test__audit", "fqn": ["synthea", "schema_test", "not_null_person_ethnicity_source_concept_id"], "unique_id": "test.synthea.not_null_person_ethnicity_source_concept_id.99867328ac", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "schema_test/not_null_person_ethnicity_source_concept_id.sql", "original_file_path": "models/schema.yml", "name": "not_null_person_ethnicity_source_concept_id", "alias": "not_null_person_ethnicity_source_concept_id", "checksum": {"name": "none", "checksum": ""}, "tags": ["schema"], "refs": [["person"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "/tmp/target/compiled/synthea/models/schema.yml/schema_test/not_null_person_ethnicity_source_concept_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1666873495, "compiled_sql": "\n    \n    \n\nselect *\nfrom \"iomed\".\"cdm\".\"person\"\nwhere ethnicity_source_concept_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ethnicity_source_concept_id"}}, "sources": {"source.synthea.iomed_raw.allergies": {"fqn": ["synthea", "iomed_raw", "allergies"], "database": "iomed", "schema": "raw", "unique_id": "source.synthea.iomed_raw.allergies", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "allergies", "source_name": "iomed_raw", "source_description": "", "loader": "", "identifier": "allergies", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"raw\".\"allergies\"", "created_at": 1666873495}, "source.synthea.iomed_raw.conditions": {"fqn": ["synthea", "iomed_raw", "conditions"], "database": "iomed", "schema": "raw", "unique_id": "source.synthea.iomed_raw.conditions", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "conditions", "source_name": "iomed_raw", "source_description": "", "loader": "", "identifier": "conditions", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"raw\".\"conditions\"", "created_at": 1666873495}, "source.synthea.iomed_raw.immunizations": {"fqn": ["synthea", "iomed_raw", "immunizations"], "database": "iomed", "schema": "raw", "unique_id": "source.synthea.iomed_raw.immunizations", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "immunizations", "source_name": "iomed_raw", "source_description": "", "loader": "", "identifier": "immunizations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"raw\".\"immunizations\"", "created_at": 1666873495}, "source.synthea.iomed_raw.encounters": {"fqn": ["synthea", "iomed_raw", "encounters"], "database": "iomed", "schema": "raw", "unique_id": "source.synthea.iomed_raw.encounters", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "encounters", "source_name": "iomed_raw", "source_description": "", "loader": "", "identifier": "encounters", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"raw\".\"encounters\"", "created_at": 1666873495}, "source.synthea.iomed_raw.medications": {"fqn": ["synthea", "iomed_raw", "medications"], "database": "iomed", "schema": "raw", "unique_id": "source.synthea.iomed_raw.medications", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "medications", "source_name": "iomed_raw", "source_description": "", "loader": "", "identifier": "medications", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"raw\".\"medications\"", "created_at": 1666873495}, "source.synthea.iomed_raw.observations": {"fqn": ["synthea", "iomed_raw", "observations"], "database": "iomed", "schema": "raw", "unique_id": "source.synthea.iomed_raw.observations", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "observations", "source_name": "iomed_raw", "source_description": "", "loader": "", "identifier": "observations", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"raw\".\"observations\"", "created_at": 1666873495}, "source.synthea.iomed_raw.procedures": {"fqn": ["synthea", "iomed_raw", "procedures"], "database": "iomed", "schema": "raw", "unique_id": "source.synthea.iomed_raw.procedures", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "procedures", "source_name": "iomed_raw", "source_description": "", "loader": "", "identifier": "procedures", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"raw\".\"procedures\"", "created_at": 1666873495}, "source.synthea.iomed_raw.patients": {"fqn": ["synthea", "iomed_raw", "patients"], "database": "iomed", "schema": "raw", "unique_id": "source.synthea.iomed_raw.patients", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "patients", "source_name": "iomed_raw", "source_description": "", "loader": "", "identifier": "patients", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"raw\".\"patients\"", "created_at": 1666873495}, "source.synthea.iomed.vocabulary": {"fqn": ["synthea", "iomed", "vocabulary"], "database": "iomed", "schema": "vocabularies", "unique_id": "source.synthea.iomed.vocabulary", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "vocabulary", "source_name": "iomed", "source_description": "", "loader": "", "identifier": "vocabulary", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"vocabularies\".\"vocabulary\"", "created_at": 1666873495}, "source.synthea.iomed.concept": {"fqn": ["synthea", "iomed", "concept"], "database": "iomed", "schema": "vocabularies", "unique_id": "source.synthea.iomed.concept", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "concept", "source_name": "iomed", "source_description": "", "loader": "", "identifier": "concept", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"vocabularies\".\"concept\"", "created_at": 1666873495}, "source.synthea.iomed.concept_relationship": {"fqn": ["synthea", "iomed", "concept_relationship"], "database": "iomed", "schema": "vocabularies", "unique_id": "source.synthea.iomed.concept_relationship", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "concept_relationship", "source_name": "iomed", "source_description": "", "loader": "", "identifier": "concept_relationship", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"vocabularies\".\"concept_relationship\"", "created_at": 1666873495}, "source.synthea.iomed.concept_ancestor": {"fqn": ["synthea", "iomed", "concept_ancestor"], "database": "iomed", "schema": "vocabularies", "unique_id": "source.synthea.iomed.concept_ancestor", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "concept_ancestor", "source_name": "iomed", "source_description": "", "loader": "", "identifier": "concept_ancestor", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"vocabularies\".\"concept_ancestor\"", "created_at": 1666873495}, "source.synthea.iomed.concept_synonym": {"fqn": ["synthea", "iomed", "concept_synonym"], "database": "iomed", "schema": "vocabularies", "unique_id": "source.synthea.iomed.concept_synonym", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "concept_synonym", "source_name": "iomed", "source_description": "", "loader": "", "identifier": "concept_synonym", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"vocabularies\".\"concept_synonym\"", "created_at": 1666873495}, "source.synthea.iomed.concept_class": {"fqn": ["synthea", "iomed", "concept_class"], "database": "iomed", "schema": "vocabularies", "unique_id": "source.synthea.iomed.concept_class", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "concept_class", "source_name": "iomed", "source_description": "", "loader": "", "identifier": "concept_class", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"vocabularies\".\"concept_class\"", "created_at": 1666873495}, "source.synthea.iomed.relationship": {"fqn": ["synthea", "iomed", "relationship"], "database": "iomed", "schema": "vocabularies", "unique_id": "source.synthea.iomed.relationship", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "relationship", "source_name": "iomed", "source_description": "", "loader": "", "identifier": "relationship", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"vocabularies\".\"relationship\"", "created_at": 1666873495}, "source.synthea.iomed.domain": {"fqn": ["synthea", "iomed", "domain"], "database": "iomed", "schema": "vocabularies", "unique_id": "source.synthea.iomed.domain", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "domain", "source_name": "iomed", "source_description": "", "loader": "", "identifier": "domain", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"vocabularies\".\"domain\"", "created_at": 1666873495}, "source.synthea.iomed.drug_strength": {"fqn": ["synthea", "iomed", "drug_strength"], "database": "iomed", "schema": "vocabularies", "unique_id": "source.synthea.iomed.drug_strength", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "drug_strength", "source_name": "iomed", "source_description": "", "loader": "", "identifier": "drug_strength", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"vocabularies\".\"drug_strength\"", "created_at": 1666873495}, "source.synthea.iomed.source_to_concept_map": {"fqn": ["synthea", "iomed", "source_to_concept_map"], "database": "iomed", "schema": "vocabularies", "unique_id": "source.synthea.iomed.source_to_concept_map", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "source_to_concept_map", "source_name": "iomed", "source_description": "", "loader": "", "identifier": "source_to_concept_map", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": null, "error_after": null, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"iomed\".\"vocabularies\".\"source_to_concept_map\"", "created_at": 1666873495}}, "macros": {"macro.synthea.create_id_from_str": {"unique_id": "macro.synthea.create_id_from_str", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/transformation_macros.sql", "original_file_path": "macros/transformation_macros.sql", "name": "create_id_from_str", "macro_sql": "{% macro create_id_from_str(text) %}\n    abs(('x' || substr(md5({{ text }}), 1, 16))::bit(64)::bigint)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.bigint_id_from_str": {"unique_id": "macro.synthea.bigint_id_from_str", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/transformation_macros.sql", "original_file_path": "macros/transformation_macros.sql", "name": "bigint_id_from_str", "macro_sql": "{% macro bigint_id_from_str(text) %}\n    abs(('x' || substr(md5({{ text }}), 1, 16))::bit(64)::bigint)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.int_id_from_str": {"unique_id": "macro.synthea.int_id_from_str", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/transformation_macros.sql", "original_file_path": "macros/transformation_macros.sql", "name": "int_id_from_str", "macro_sql": "{% macro int_id_from_str(text) %}\n    abs(('x' || substr(md5({{ text }}),1,16))::bit(32)::int)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.gender_concept_id": {"unique_id": "macro.synthea.gender_concept_id", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/transformation_macros.sql", "original_file_path": "macros/transformation_macros.sql", "name": "gender_concept_id", "macro_sql": "{% macro gender_concept_id(sex) %}\n(CASE WHEN {{ sex }} = 'M' THEN 8507::int -- Male\n      WHEN {{ sex }} = 'F' THEN 8532::int -- Female\n      WHEN {{ sex }} is null THEN 0::int -- No data\n      ELSE 8551::int -- Unknown\n      END)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.race_concept_id": {"unique_id": "macro.synthea.race_concept_id", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/transformation_macros.sql", "original_file_path": "macros/transformation_macros.sql", "name": "race_concept_id", "macro_sql": "{% macro race_concept_id(race) %}\n(CASE WHEN {{ race }} = 'white' THEN 8527::int -- White\n      WHEN {{ race }} = 'black' THEN 8516::int -- Black\n      WHEN {{ race }} = 'asian' THEN 8515::int -- Asian\n      ELSE 0::int -- No data\n      END)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.ethnicity_concept_id": {"unique_id": "macro.synthea.ethnicity_concept_id", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/transformation_macros.sql", "original_file_path": "macros/transformation_macros.sql", "name": "ethnicity_concept_id", "macro_sql": "{% macro ethnicity_concept_id(race) %}\n(CASE WHEN {{ race }} = 'hispanic' THEN 38003563::int -- Hispanic or Latino\n      ELSE 0::int\n      END)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.visit_concept_id": {"unique_id": "macro.synthea.visit_concept_id", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/transformation_macros.sql", "original_file_path": "macros/transformation_macros.sql", "name": "visit_concept_id", "macro_sql": "{% macro visit_concept_id(encounter_class) %}\n(CASE {{ encounter_class }}\n        WHEN 'ambulatory' THEN 9202 -- Outpatient Visit\n        WHEN 'emergency' THEN 9203 -- Emergency Room Visit\n        WHEN 'inpatient' THEN 9201 -- Inpatient Visit\n        WHEN 'wellness' THEN 9202 -- Outpatient Visit\n        WHEN 'urgentcare' THEN 9203 -- Emergency Room Visit\n        WHEN 'outpatient' THEN 9202 -- Outpatient Visit\n        ELSE 0\n        END)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.last_inserted": {"unique_id": "macro.synthea.last_inserted", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/logging_macros.sql", "original_file_path": "macros/logging_macros.sql", "name": "last_inserted", "macro_sql": "{% macro last_inserted(table) %}\n\n(select max(iomed_row_insert_datetime) from  {{table}}  )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.last_run": {"unique_id": "macro.synthea.last_run", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/logging_macros.sql", "original_file_path": "macros/logging_macros.sql", "name": "last_run", "macro_sql": "{% macro last_run() %}\n\n    COALESCE((select max(event_timestamp)\n             from {{ logging.get_audit_relation() }}), '1900-01-01'::timestamp)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.logging.get_audit_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.last_dbt_run": {"unique_id": "macro.synthea.last_dbt_run", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/logging_macros.sql", "original_file_path": "macros/logging_macros.sql", "name": "last_dbt_run", "macro_sql": "{% macro last_dbt_run(table_schema, table_name) %}\n\n    COALESCE(\n        (select max(event_timestamp)\n        from {{ logging.get_audit_relation() }}\n        where event_schema = '{{ table_schema }}'\n        and event_model =  '{{ table_name }}'\n        and event_name = 'model deployment completed'),\n        '1900-01-01'::timestamp)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.logging.get_audit_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.load_synthea": {"unique_id": "macro.synthea.load_synthea", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/load_synthea_tables.sql", "original_file_path": "macros/load_synthea_tables.sql", "name": "load_synthea", "macro_sql": "{% macro load_synthea() %}\n{% set create_sql %}\n\n  drop schema if exists iomed_raw cascade;\n\n  create schema iomed_raw;\n\n  create table iomed_raw.allergies\n  (\n      start       date,\n      stop        date,\n      patient     text,\n      encounter   text,\n      code        varchar,\n      description text\n  );\n\n  create index idx_allergies_code\n      on iomed_raw.allergies (code);\n\n  create table iomed_raw.conditions\n  (\n      start       date,\n      stop        date,\n      patient     text,\n      encounter   text,\n      code        varchar,\n      description text\n  );\n\n  create index idx_conditions_code\n      on iomed_raw.conditions (code);\n\n  create table iomed_raw.immunizations\n  (\n      date        timestamp,\n      patient     text,\n      encounter   text,\n      code        varchar,\n      description text,\n      base_cost   double precision\n  );\n\n  create index idx_immunizations_code\n      on iomed_raw.immunizations (code);\n\n  create table iomed_raw.encounters\n  (\n      id                  text,\n      start               timestamp,\n      stop                timestamp,\n      patient             text,\n      organization        text,\n      provider            text,\n      payer               text,\n      encounterclass      text,\n      code                bigint,\n      description         text,\n      base_encounter_cost double precision,\n      total_claim_cost    double precision,\n      payer_coverage      double precision,\n      reasoncode          bigint,\n      reasondescription   text\n  );\n\n  create table iomed_raw.medications\n  (\n      start             timestamp,\n      stop              timestamp,\n      patient           text,\n      payer             text,\n      encounter         text,\n      code              varchar,\n      description       text,\n      base_cost         double precision,\n      payer_coverage    double precision,\n      dispenses         integer,\n      totalcost         double precision,\n      reasoncode        bigint,\n      reasondescription text\n  );\n\n  create index idx_medications_code\n      on iomed_raw.medications (code);\n\n  create table iomed_raw.observations\n  (\n      date        timestamp,\n      patient     text,\n      encounter   text,\n      code        varchar,\n      description text,\n      value       text,\n      units       text,\n      type        text\n  );\n\n  create table iomed_raw.procedures\n  (\n      start             timestamp,\n      stop              timestamp,\n      patient           text,\n      encounter         text,\n      code              varchar,\n      description       text,\n      base_cost         double precision,\n      reasoncode        bigint,\n      reasondescription text\n  );\n\n  create index idx_procedures_code\n      on iomed_raw.procedures (code);\n\n  create table iomed_raw.patients\n  (\n      id                  text,\n      birthdate           date,\n      deathdate           date,\n      ssn                 text,\n      drivers             text,\n      passport            text,\n      prefix              text,\n      first               text,\n      last                text,\n      suffix              varchar,\n      maiden              text,\n      marital             text,\n      race                text,\n      ethnicity           text,\n      gender              text,\n      birthplace          text,\n      address             text,\n      city                text,\n      state               text,\n      county              text,\n      zip                 integer,\n      lat                 double precision,\n      lon                 double precision,\n      healthcare_expenses double precision,\n      healthcare_coverage double precision\n  );\n{% endset %}\n\n{% set copy_sql %}\n\n copy iomed_raw.observations from program 'curl -H \"Host: storage.googleapis.com\" https://storage.googleapis.com/iomed-public-data/synthea/100000_patients/observations.csv.gz -k -s | zcat' with csv header delimiter E',';\n copy iomed_raw.patients from program 'curl -H \"Host: storage.googleapis.com\" https://storage.googleapis.com/iomed-public-data/synthea/100000_patients/patients.csv.gz -k -s | zcat' with csv header delimiter E',';\n copy iomed_raw.conditions from program 'curl -H \"Host: storage.googleapis.com\" https://storage.googleapis.com/iomed-public-data/synthea/100000_patients/conditions.csv.gz -k -s | zcat' with csv header delimiter E',';\n copy iomed_raw.procedures from program 'curl -H \"Host: storage.googleapis.com\" https://storage.googleapis.com/iomed-public-data/synthea/100000_patients/procedures.csv.gz -k -s | zcat' with csv header delimiter E',';\n copy iomed_raw.allergies from program 'curl -H \"Host: storage.googleapis.com\" https://storage.googleapis.com/iomed-public-data/synthea/100000_patients/allergies.csv.gz -k -s | zcat' with csv header delimiter E',';\n copy iomed_raw.encounters from program 'curl -H \"Host: storage.googleapis.com\" https://storage.googleapis.com/iomed-public-data/synthea/100000_patients/encounters.csv.gz -k -s | zcat' with csv header delimiter E',';\n copy iomed_raw.immunizations from program 'curl -H \"Host: storage.googleapis.com\" https://storage.googleapis.com/iomed-public-data/synthea/100000_patients/immunizations.csv.gz -k -s | zcat' with csv header delimiter E',';\n copy iomed_raw.medications from program 'curl -H \"Host: storage.googleapis.com\" https://storage.googleapis.com/iomed-public-data/synthea/100000_patients/medications.csv.gz -k -s | zcat' with csv header delimiter E',';\n\n{% endset %}\n\n{% do run_query(create_sql) %}\n{% do log(\"Synthea tables created\", info=True) %}\n\n{% do run_query(copy_sql) %}\n{% do log(\"Synthea data copied\", info=True) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.str_to_int": {"unique_id": "macro.synthea.str_to_int", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/cleaning_macros.sql", "original_file_path": "macros/cleaning_macros.sql", "name": "str_to_int", "macro_sql": "{% macro str_to_int(num) %}\n(CASE WHEN {{ num }} ~ '^[0-9]+$' THEN {{ num }}::int\n      ELSE null::int\n      END)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.str_to_dec": {"unique_id": "macro.synthea.str_to_dec", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/cleaning_macros.sql", "original_file_path": "macros/cleaning_macros.sql", "name": "str_to_dec", "macro_sql": "{% macro str_to_dec(num) %}\n(CASE WHEN {{ num }} ~ '^-?[0-9]\\d*(\\.\\d+)?$' THEN {{ num }}::decimal\n      ELSE null::int\n      END)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.str_to_date": {"unique_id": "macro.synthea.str_to_date", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/cleaning_macros.sql", "original_file_path": "macros/cleaning_macros.sql", "name": "str_to_date", "macro_sql": "{% macro str_to_date(fecha) %}\n(CASE WHEN {{ fecha }} ~ '^(19|20)\\d\\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])$'\n      THEN to_date({{ fecha }},'YYYYMMDD')\n      ELSE null::date\n      END)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.str_to_timestamp": {"unique_id": "macro.synthea.str_to_timestamp", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/cleaning_macros.sql", "original_file_path": "macros/cleaning_macros.sql", "name": "str_to_timestamp", "macro_sql": "{% macro str_to_timestamp(fecha, hora) %}\n(CASE WHEN {{ fecha }} ~ '^(19|20)\\d\\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])$'\n      AND  {{ hora }} ~ '^(0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$'\n      THEN to_timestamp({{ fecha }} || ' ' || {{ hora }}, 'YYYYMMDD HH24:MI')\n      WHEN {{ fecha }} ~ '^(19|20)\\d\\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])$'\n      THEN to_timestamp({{ fecha }} || ' 00:00', 'YYYYMMDD HH24:MI')\n      ELSE null::timestamp\n      END)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.null_conversion": {"unique_id": "macro.synthea.null_conversion", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/cleaning_macros.sql", "original_file_path": "macros/cleaning_macros.sql", "name": "null_conversion", "macro_sql": "{% macro null_conversion(column_name, null_value)  %}\n(CASE WHEN {{ column_name }} = {{ null_value }} THEN NULL\n      ELSE {{ column_name }}\n      END)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.clean_age": {"unique_id": "macro.synthea.clean_age", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/cleaning_macros.sql", "original_file_path": "macros/cleaning_macros.sql", "name": "clean_age", "macro_sql": "{% macro clean_age(age) %}\n(CASE WHEN {{ age }} != '' THEN substring({{age}} from '(\\d*).*')::int\n      ELSE null::int\n      END)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.generate_note_text": {"unique_id": "macro.synthea.generate_note_text", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/fake_notes.sql", "original_file_path": "macros/fake_notes.sql", "name": "generate_note_text", "macro_sql": "{% macro generate_note_text(smoker, gender, pregnant, cough, fever, diabetes, hypertension, infarction_history, num) %}\n\n(case when {{ num }} = 1 then\n        'Acude paciente ' ||\n        case when {{ diabetes }} is true then 'diab\u00e9tico y ' else '' end ||\n        case when {{ smoker }} is true then 'fumador ' else 'no fumador ' end ||\n        case when {{ gender }} = 'M' then 'varon' else 'mujer' end ||\n        case when {{ pregnant }} is true then ' y embarazada.' else '.' end ||\n        case when {{ cough }} is true then\n            case when {{ fever }} is true then ' Presenta tos y fiebre' else ' Presenta tos' end\n        else\n            case when {{ fever }} is true then ' Tiene bastante fiebre' else '' end\n        end  ||\n        case when {{ hypertension }} is true then ' Tiene antecendentes de hipertensi\u00f3n. ' else ' No tiene antecedentes de hipertensi\u00f3n. ' end ||\n        case when {{ infarction_history }} is true then '. Sufri\u00f3 un infarto de miocardio en el pasado.' else '' end\n\n\n    when {{ num }} = 2 then\n        case when {{ gender }} = 'M' then 'Hombre ' else 'Mujer ' end ||\n        case when {{ pregnant }} is true then 'embarazada ' else '' end || 'acude a consulta, ' ||\n        case when {{ smoker }} is true then\n            case when {{ gender }} = 'M' then 'fumador diario' else 'fumadora diaria' end\n        else\n            case when {{ gender }} = 'M' then 'no fumador. ' else 'no fumadora. ' end\n        end  ||\n        case when {{ diabetes }} is true then 'Sufre diabetes. ' else '' end ||\n        case when {{ cough }} is true then\n            case when {{ fever }} is true then 'Con bastante tos y presenta algo de fiebre.' else 'Con bastante tos.' end\n        else\n            case when {{ fever }} is true then 'Presenta algo de fiebre.' else '' end\n        end  ||\n        case when {{ hypertension }} is true then 'Paciente con hipertensi\u00f3n.' else 'No tiene hipertensi\u00f3n. ' end ||\n        case when {{ infarction_history }} is true then 'Tuvo un infarto de miocardio hace unos a\u00f1os.' else '' end\n\n    when {{ num }} = 3 then\n        'Se presenta en consulta ' ||\n        case when {{ gender }} = 'M' then 'un hombre ' else 'una mujer ' end ||\n        case when {{ cough }} is true then 'con bastante tos ' else '' end ||\n        case when {{ smoker }} is true then 'y que fuma todos los d\u00edas. ' else 'y que no fuma nada. ' end  ||\n        case when {{ fever }} is true then 'Presenta algo de fiebre.' else '' end ||\n        case when {{ pregnant }} is true then 'Est\u00e1 embarazada. ' else '' end ||\n        case when {{ diabetes }} is true then\n            case when {{ hypertension }} is true then 'Paciente diab\u00e9tico y con hipertensi\u00f3n.' else 'Paciente diab\u00e9tico.' end\n        else\n            case when {{ hypertension }} is true then 'Tiene hipertensi\u00f3n.' else ' No hipertenso. ' end\n        end  ||\n        case when {{ infarction_history }} is true then 'Comenta haber tenido un infarto hace un tiempo.' else '' end\n\n    end)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.generate_schema_name": {"unique_id": "macro.synthea.generate_schema_name", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.dbt__set_unlogged": {"unique_id": "macro.synthea.dbt__set_unlogged", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/materializations/incremental_unlogged.sql", "original_file_path": "macros/materializations/incremental_unlogged.sql", "name": "dbt__set_unlogged", "macro_sql": "{% macro dbt__set_unlogged(target_relation) -%}\n  alter table {{target_relation}} set unlogged;\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.dbt__set_logged": {"unique_id": "macro.synthea.dbt__set_logged", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/materializations/incremental_unlogged.sql", "original_file_path": "macros/materializations/incremental_unlogged.sql", "name": "dbt__set_logged", "macro_sql": "{% macro dbt__set_logged(target_relation) -%}\n  alter table {{target_relation}} set logged;\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.dbt__incremental_delete": {"unique_id": "macro.synthea.dbt__incremental_delete", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/materializations/incremental_unlogged.sql", "original_file_path": "macros/materializations/incremental_unlogged.sql", "name": "dbt__incremental_delete", "macro_sql": "{% macro dbt__incremental_delete(target_relation, tmp_relation) -%}\n\n  {%- set unique_key = config.require('unique_key') -%}\n\n  delete\n  from {{ target_relation }}\n  where ({{ unique_key }}) in (\n    select ({{ unique_key }})\n    from {{ tmp_relation.include(schema=False, database=False) }}\n  );\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.materialization_incremental_unlogged_default": {"unique_id": "macro.synthea.materialization_incremental_unlogged_default", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/materializations/incremental_unlogged.sql", "original_file_path": "macros/materializations/incremental_unlogged.sql", "name": "materialization_incremental_unlogged_default", "macro_sql": "{% materialization incremental_unlogged, default -%}\n  {%- set unique_key = config.get('unique_key') -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,  type='table') -%}\n  {%- set tmp_relation = make_temp_relation(target_relation) %}\n\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_drop = (exists_not_as_table) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_drop -%}\n    {{ adapter.drop_relation(old_relation) }}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% if full_refresh_mode and old_relation is not none-%}\n      {{ adapter.truncate_relation(old_relation) }}\n  {%- endif %}\n\n  -- build model\n  {% if old_relation is none -%}\n    {%- call statement('main') -%}\n      {{ create_table_as(False, target_relation, sql) }}\n    {%- endcall -%}\n  {%- else -%}\n     {%- call statement() -%}\n       -- create temporary table\n       {{ dbt.create_table_as(True, tmp_relation, sql) }}\n\n     {%- endcall -%}\n\n     {{ adapter.expand_target_column_types(from_relation=tmp_relation,\n                                           to_relation=target_relation) }}\n\n     {%- call statement('main') -%}\n       {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n       {% set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') %}\n\n      {{ dbt__set_unlogged(target_relation) }}\n\n       {% if unique_key is not none -%}\n\n         {{ dbt__incremental_delete(target_relation, tmp_relation) }}\n\n       {%- endif %}\n\n       insert into {{ target_relation }} ({{ dest_cols_csv }})\n       (\n         select {{ dest_cols_csv }}\n         from {{ tmp_relation }}\n       );\n\n      {{ dbt__set_logged(target_relation) }}\n\n     {% endcall %}\n  {%- endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.synthea.dbt__set_unlogged", "macro.synthea.dbt__incremental_delete", "macro.synthea.dbt__set_logged"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.default__create_unlogged_table_as": {"unique_id": "macro.synthea.default__create_unlogged_table_as", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/materializations/table_unlogged.sql", "original_file_path": "macros/materializations/table_unlogged.sql", "name": "default__create_unlogged_table_as", "macro_sql": "{% macro default__create_unlogged_table_as(temporary, relation, sql) -%}\n  create unlogged {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.create_unlogged_table_as": {"unique_id": "macro.synthea.create_unlogged_table_as", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/materializations/table_unlogged.sql", "original_file_path": "macros/materializations/table_unlogged.sql", "name": "create_unlogged_table_as", "macro_sql": "{% macro create_unlogged_table_as(temporary, relation, sql) -%}\n  {{ adapter_macro('create_table_as', temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.synthea.materialization_table_unlogged_default": {"unique_id": "macro.synthea.materialization_table_unlogged_default", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "macros/materializations/table_unlogged.sql", "original_file_path": "macros/materializations/table_unlogged.sql", "name": "materialization_table_unlogged_default", "macro_sql": "{% materialization table_unlogged, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n\n  -- drop the temp relations if they exists for some reason\n  {{ adapter.drop_relation(intermediate_relation) }}\n  {{ adapter.drop_relation(backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_unlogged_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- set logged\n  {{ dbt__set_logged(intermediate_relation) }}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(target_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.synthea.create_unlogged_table_as", "macro.synthea.dbt__set_logged", "macro.dbt.drop_relation_if_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__get_catalog": {"unique_id": "macro.dbt_postgres.postgres__get_catalog", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence = 'p' -- [p]ermanent table. Other values are [u]nlogged table, [t]emporary table\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres_get_relations": {"unique_id": "macro.dbt_postgres.postgres_get_relations", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "name": "postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__create_table_as": {"unique_id": "macro.dbt_postgres.postgres__create_table_as", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__get_create_index_sql": {"unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__create_schema": {"unique_id": "macro.dbt_postgres.postgres__create_schema", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__drop_schema": {"unique_id": "macro.dbt_postgres.postgres__drop_schema", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__information_schema_name": {"unique_id": "macro.dbt_postgres.postgres__information_schema_name", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__list_schemas": {"unique_id": "macro.dbt_postgres.postgres__list_schemas", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__check_schema_exists": {"unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__current_timestamp": {"unique_id": "macro.dbt_postgres.postgres__current_timestamp", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n  now()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__snapshot_get_time": {"unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__make_temp_relation": {"unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n    {% set suffix_length = suffix|length + dtstring|length %}\n    {% set relation_max_name_length = 63 %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Temp relation suffix is too long (' ~ suffix|length ~ ' characters). Maximum length is ' ~ (relation_max_name_length - dtstring|length) ~ ' characters.') %}\n    {% endif %}\n    {% set tmp_identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix ~ dtstring %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres_escape_comment": {"unique_id": "macro.dbt_postgres.postgres_escape_comment", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__alter_relation_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__alter_column_comment": {"unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% for column_name in column_dict %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "package_name": "dbt_postgres", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "name": "postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/core.sql", "original_file_path": "macros/core.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/test.sql", "original_file_path": "macros/materializations/test.sql", "name": "materialization_test_default", "macro_sql": "\n\n{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.column_list": {"unique_id": "macro.dbt.column_list", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list", "macro_sql": "{% macro column_list(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {% if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.column_list_for_create_table": {"unique_id": "macro.dbt.column_list_for_create_table", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "column_list_for_create_table", "macro_sql": "{% macro column_list_for_create_table(columns) %}\n  {%- for col in columns %}\n    {{ col.name }} {{ col.data_type }} {%- if not loop.last %},{% endif %}\n  {% endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/helpers.sql", "original_file_path": "macros/materializations/helpers.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/strategies.sql", "original_file_path": "macros/materializations/snapshot/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshot/snapshot.sql", "original_file_path": "macros/materializations/snapshot/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/seed/seed.sql", "original_file_path": "macros/materializations/seed/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.incremental_upsert": {"unique_id": "macro.dbt.incremental_upsert", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/helpers.sql", "original_file_path": "macros/materializations/incremental/helpers.sql", "name": "incremental_upsert", "macro_sql": "{% macro incremental_upsert(tmp_relation, target_relation, unique_key=none, statement_name=\"main\") %}\n    \n    {%- set dest_columns = adapter.get_columns_in_relation(target_relation) -%}\n    {%- set dest_cols_csv = dest_columns | map(attribute='quoted') | join(', ') -%}\n\n    {%- if unique_key is not none -%}\n    delete\n    from {{ target_relation }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ tmp_relation }}\n    );\n    {%- endif %}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n       select {{ dest_cols_csv }}\n       from {{ tmp_relation }}\n    );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/incremental.sql", "original_file_path": "macros/materializations/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {% do process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% set build_sql = incremental_upsert(tmp_relation, target_relation, unique_key=unique_key) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.incremental_upsert", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n  \n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change != 'ignore' %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.common_get_delete_insert_merge_sql": {"unique_id": "macro.dbt.common_get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "common_get_delete_insert_merge_sql", "macro_sql": "{% macro common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n    {{ common_get_delete_insert_merge_sql(target, source, unique_key, dest_columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.common_get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/common/merge.sql", "original_file_path": "macros/materializations/common/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/table/table.sql", "original_file_path": "macros/materializations/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_table_as(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/view/view.sql", "original_file_path": "macros/materializations/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/materializations/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_alias.sql", "original_file_path": "macros/etc/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/query.sql", "original_file_path": "macros/etc/query.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/is_incremental.sql", "original_file_path": "macros/etc/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/where_subquery.sql", "original_file_path": "macros/etc/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/where_subquery.sql", "original_file_path": "macros/etc/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_schema.sql", "original_file_path": "macros/etc/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/etc/get_custom_database.sql", "original_file_path": "macros/etc/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/adapters/common.sql", "original_file_path": "macros/adapters/common.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/relationships.sql", "original_file_path": "macros/schema_tests/relationships.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/not_null.sql", "original_file_path": "macros/schema_tests/not_null.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/unique.sql", "original_file_path": "macros/schema_tests/unique.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "macros/schema_tests/accepted_values.sql", "original_file_path": "macros/schema_tests/accepted_values.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) %}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) %}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) %}\n    date_trunc('{{datepart}}', {{date}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) %}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/fewer_rows_than.sql", "original_file_path": "macros/schema_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/equal_rowcount.sql", "original_file_path": "macros/schema_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/relationships_where.sql", "original_file_path": "macros/schema_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/recency.sql", "original_file_path": "macros/schema_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/not_constant.sql", "original_file_path": "macros/schema_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/accepted_range.sql", "original_file_path": "macros/schema_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/not_accepted_values.sql", "original_file_path": "macros/schema_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/test_unique_where.sql", "original_file_path": "macros/schema_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/at_least_one.sql", "original_file_path": "macros/schema_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/unique_combination_of_columns.sql", "original_file_path": "macros/schema_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/cardinality_equality.sql", "original_file_path": "macros/schema_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/expression_is_true.sql", "original_file_path": "macros/schema_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/not_null_proportion.sql", "original_file_path": "macros/schema_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/sequential_values.sql", "original_file_path": "macros/schema_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as previous_{{ column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, 'previous_' + column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = previous_{{ column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/test_not_null_where.sql", "original_file_path": "macros/schema_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/equality.sql", "original_file_path": "macros/schema_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/schema_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/schema_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }},\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n/*\ncall as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n)\n\n*/\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873493}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[]) -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n\n        {%- endif %}\n    {%- endfor %}\n\n    {%- for col in include_cols %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation') -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                case table_type\n                    when 'BASE TABLE' then 'table'\n                    else lower(table_type)\n                end as table_type\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none) -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for v in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ v }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ v ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ v ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/tmp/packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.logging.bigquery__log_audit_event": {"unique_id": "macro.logging.bigquery__log_audit_event", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "macros/bigquery.sql", "original_file_path": "macros/bigquery.sql", "name": "bigquery__log_audit_event", "macro_sql": "{% macro bigquery__log_audit_event(event_name, schema, relation, user, target_name, is_full_refresh) %}\n\n    insert into {{ logging.get_audit_relation() }} (\n        event_name,\n        event_timestamp,\n        event_schema,\n        event_model,\n        event_target,\n        event_is_full_refresh,\n        invocation_id\n    )\n\n    values (\n        '{{ event_name }}',\n        {{ dbt_utils.current_timestamp_in_utc() }},\n        {% if schema != None %}'{{ schema }}'{% else %}null{% endif %},\n        {% if relation != None %}'{{ relation }}'{% else %}null{% endif %},\n        {% if target_name != None %}'{{ target_name }}'{% else %}null{% endif %},\n        {% if is_full_refresh %}TRUE{% else %}FALSE{% endif %},\n        '{{ invocation_id }}'\n    );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.logging.get_audit_relation", "macro.dbt_utils.current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.logging.bigquery__create_audit_log_table": {"unique_id": "macro.logging.bigquery__create_audit_log_table", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "macros/bigquery.sql", "original_file_path": "macros/bigquery.sql", "name": "bigquery__create_audit_log_table", "macro_sql": "{% macro bigquery__create_audit_log_table() -%}\n\n    {% set required_columns = [\n       [\"event_name\", dbt_utils.type_string()],\n       [\"event_timestamp\", dbt_utils.type_timestamp()],\n       [\"event_schema\", dbt_utils.type_string()],\n       [\"event_model\", dbt_utils.type_string()],\n       [\"event_target\", dbt_utils.type_string()],\n       [\"event_is_full_refresh\", \"BOOLEAN\"],\n       [\"invocation_id\", dbt_utils.type_string()],\n    ] -%}\n\n    {% set audit_table = logging.get_audit_relation() -%}\n\n    {% set audit_table_exists = adapter.get_relation(audit_table.database, audit_table.schema, audit_table.name) -%}\n\n\n    {% if audit_table_exists -%}\n\n        {%- set columns_to_create = [] -%}\n\n        {# map to lower to cater for snowflake returning column names as upper case #}\n        {%- set existing_columns = adapter.get_columns_in_relation(audit_table)|map(attribute='column')|map('lower')|list -%}\n\n        {%- for required_column in required_columns -%}\n            {%- if required_column[0] not in existing_columns -%}\n                {%- do columns_to_create.append(required_column) -%}\n\n            {%- endif -%}\n        {%- endfor -%}\n\n\n        {%- for column in columns_to_create -%}\n            alter table {{ audit_table }}\n            add column {{ column[0] }} {{ column[1] }}\n            default null;\n        {% endfor -%}\n\n    {%- else -%}\n        create table if not exists {{ audit_table }}\n        (\n        {% for column in required_columns %}\n            {{ column[0] }} {{ column[1] }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n        )\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.logging.get_audit_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.logging.get_audit_schema": {"unique_id": "macro.logging.get_audit_schema", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "macros/audit.sql", "original_file_path": "macros/audit.sql", "name": "get_audit_schema", "macro_sql": "{% macro get_audit_schema() %}\n\n    {# if the get_audit_schema macro exists in the base project use that #}\n    {% if context.get(project_name, {}).get('get_audit_schema') %}\n        {{ return(context[project_name].get_audit_schema()) }}\n    {% else %}\n        {{ return(target.schema~'_meta') }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.logging.get_audit_relation": {"unique_id": "macro.logging.get_audit_relation", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "macros/audit.sql", "original_file_path": "macros/audit.sql", "name": "get_audit_relation", "macro_sql": "{% macro get_audit_relation() %}\n\n    {%- set audit_schema=logging.get_audit_schema() -%}\n\n    {%- set audit_table =\n        api.Relation.create(\n            database=target.database,\n            schema=audit_schema,\n            identifier='dbt_audit_log',\n            type='table'\n        ) -%}\n\n    {{ return(audit_table) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.logging.get_audit_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.logging.log_audit_event": {"unique_id": "macro.logging.log_audit_event", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "macros/audit.sql", "original_file_path": "macros/audit.sql", "name": "log_audit_event", "macro_sql": "{% macro log_audit_event(event_name, schema, relation, user, target_name, is_full_refresh) -%}\n\n  {{ return(adapter.dispatch('log_audit_event', 'logging')(event_name, schema, relation, user, target_name, is_full_refresh)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.logging.default__log_audit_event"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.logging.default__log_audit_event": {"unique_id": "macro.logging.default__log_audit_event", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "macros/audit.sql", "original_file_path": "macros/audit.sql", "name": "default__log_audit_event", "macro_sql": "{% macro default__log_audit_event(event_name, schema, relation, user, target_name, is_full_refresh) %}\n\n    insert into {{ logging.get_audit_relation() }} (\n        event_name,\n        event_timestamp,\n        event_schema,\n        event_model,\n        event_user,\n        event_target,\n        event_is_full_refresh,\n        invocation_id\n    )\n\n    values (\n        '{{ event_name }}',\n        {{ dbt_utils.current_timestamp_in_utc() }},\n        {% if schema != None %}'{{ schema }}'{% else %}null::varchar(512){% endif %},\n        {% if relation != None %}'{{ relation }}'{% else %}null::varchar(512){% endif %},\n        {% if user != None %}'{{ user }}'{% else %}null::varchar(512){% endif %},\n        {% if target_name != None %}'{{ target_name }}'{% else %}null::varchar(512){% endif %},\n        {% if is_full_refresh %}TRUE{% else %}FALSE{% endif %},\n        '{{ invocation_id }}'\n    );\n\n    commit;\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.logging.get_audit_relation", "macro.dbt_utils.current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.logging.create_audit_schema": {"unique_id": "macro.logging.create_audit_schema", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "macros/audit.sql", "original_file_path": "macros/audit.sql", "name": "create_audit_schema", "macro_sql": "{% macro create_audit_schema() %}\n    {%- set schema_name = logging.get_audit_schema() -%}\n    {%- set schema_exists = adapter.check_schema_exists(database=target.database, schema=schema_name) -%}\n    {% if schema_exists == 0 %}\n        {% do create_schema(api.Relation.create(\n            database=target.database,\n            schema=schema_name)\n        ) %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.logging.get_audit_schema", "macro.dbt.create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.logging.create_audit_log_table": {"unique_id": "macro.logging.create_audit_log_table", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "macros/audit.sql", "original_file_path": "macros/audit.sql", "name": "create_audit_log_table", "macro_sql": "{% macro create_audit_log_table() -%}\n\n    {{ return(adapter.dispatch('create_audit_log_table', 'logging')()) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.logging.default__create_audit_log_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.logging.default__create_audit_log_table": {"unique_id": "macro.logging.default__create_audit_log_table", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "macros/audit.sql", "original_file_path": "macros/audit.sql", "name": "default__create_audit_log_table", "macro_sql": "{% macro default__create_audit_log_table() -%}\n\n    {% set required_columns = [\n       [\"event_name\", dbt_utils.type_string()],\n       [\"event_timestamp\", dbt_utils.type_timestamp()],\n       [\"event_schema\", dbt_utils.type_string()],\n       [\"event_model\", dbt_utils.type_string()],\n       [\"event_user\", dbt_utils.type_string()],\n       [\"event_target\", dbt_utils.type_string()],\n       [\"event_is_full_refresh\", \"boolean\"],\n       [\"invocation_id\", dbt_utils.type_string()],\n    ] -%}\n\n    {% set audit_table = logging.get_audit_relation() -%}\n\n    {% set audit_table_exists = adapter.get_relation(audit_table.database, audit_table.schema, audit_table.name) -%}\n\n\n    {% if audit_table_exists -%}\n\n        {%- set columns_to_create = [] -%}\n\n        {# map to lower to cater for snowflake returning column names as upper case #}\n        {%- set existing_columns = adapter.get_columns_in_relation(audit_table)|map(attribute='column')|map('lower')|list -%}\n\n        {%- for required_column in required_columns -%}\n            {%- if required_column[0] not in existing_columns -%}\n                {%- do columns_to_create.append(required_column) -%}\n\n            {%- endif -%}\n        {%- endfor -%}\n\n\n        {%- for column in columns_to_create -%}\n            alter table {{ audit_table }}\n            add column {{ column[0] }} {{ column[1] }}\n            default null;\n        {% endfor -%}\n\n        {%- if columns_to_create|length > 0 %}\n            commit;\n        {% endif -%}\n\n    {%- else -%}\n        create table if not exists {{ audit_table }}\n        (\n        {% for column in required_columns %}\n            {{ column[0] }} {{ column[1] }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n        )\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.type_timestamp", "macro.logging.get_audit_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.logging.log_run_start_event": {"unique_id": "macro.logging.log_run_start_event", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "macros/audit.sql", "original_file_path": "macros/audit.sql", "name": "log_run_start_event", "macro_sql": "{% macro log_run_start_event() %}\n    {{ logging.log_audit_event('run started', user=target.user, target_name=target.name, is_full_refresh=flags.FULL_REFRESH) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.logging.log_audit_event"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.logging.log_run_end_event": {"unique_id": "macro.logging.log_run_end_event", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "macros/audit.sql", "original_file_path": "macros/audit.sql", "name": "log_run_end_event", "macro_sql": "{% macro log_run_end_event() %}\n    {{ logging.log_audit_event('run completed', user=target.user, target_name=target.name, is_full_refresh=flags.FULL_REFRESH) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.logging.log_audit_event"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.logging.log_model_start_event": {"unique_id": "macro.logging.log_model_start_event", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "macros/audit.sql", "original_file_path": "macros/audit.sql", "name": "log_model_start_event", "macro_sql": "{% macro log_model_start_event() %}\n    {{ logging.log_audit_event(\n        'model deployment started', schema=this.schema, relation=this.name, user=target.user, target_name=target.name, is_full_refresh=flags.FULL_REFRESH\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.logging.log_audit_event"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.logging.log_model_end_event": {"unique_id": "macro.logging.log_model_end_event", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "macros/audit.sql", "original_file_path": "macros/audit.sql", "name": "log_model_end_event", "macro_sql": "{% macro log_model_end_event() %}\n    {{ logging.log_audit_event(\n        'model deployment completed', schema=this.schema, relation=this.name, user=target.user, target_name=target.name, is_full_refresh=flags.FULL_REFRESH\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.logging.log_audit_event"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}, "macro.logging.log_custom_event": {"unique_id": "macro.logging.log_custom_event", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "macros/audit.sql", "original_file_path": "macros/audit.sql", "name": "log_custom_event", "macro_sql": "{% macro log_custom_event(event_name) %}\n    {{ logging.log_audit_event(\n        event_name, schema=this.schema, relation=this.name, user=target.user, target_name=target.name, is_full_refresh=flags.FULL_REFRESH\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.logging.log_audit_event"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1666873494}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Users/alberto/.local/share/virtualenvs/Projects-Vrz8lGQ4/lib/python3.7/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--models` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/overview)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [chat](https://community.getdbt.com/) on Slack for live questions and support."}}, "exposures": {}, "selectors": {}, "disabled": [{"raw_sql": "-- SET CONSTRAINTS ALL DEFERRED to check FK contraints after the transaction\n-- and allow the deletion of already existing visit_occurrence_id (due to incremental materialization)\n\n{{ config(\n    unique_key='visit_detail_id',\n    materialized='incremental',\n\tenabled=false\n  )\n}}\n\n\nwith visit_detail as (\n\n    select * from {{ ref('stg_visit_detail')}}\n\n)\nselect\n    visit_detail_id,\n    person_id,\n    visit_detail_concept_id,\n    visit_detail_start_date,\n    visit_detail_start_datetime,\n    visit_detail_end_date,\n    visit_detail_end_datetime,\n    visit_detail_type_concept_id,\n    provider_id,\n    care_site_id,\n    visit_detail_source_value,\n    visit_detail_source_concept_id,\n    admitted_from_concept_id,\n    admitted_from_source_value,\n    discharged_to_source_value,\n    discharged_to_concept_id,\n    preceding_visit_detail_id,\n    parent_visit_detail_id, -- CAMBIAR\n    visit_occurrence_id\nfrom visit_detail", "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "visit_detail_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "visit_detail"], "unique_id": "model.synthea.visit_detail", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/visit_detail.sql", "original_file_path": "models/cdm/visit_detail.sql", "name": "visit_detail", "alias": "visit_detail", "checksum": {"name": "sha256", "checksum": "fbeb782fad22a4c0ee8e77999e2fa59050153baae5f80212cc89c2b392cb272c"}, "tags": [], "refs": [["stg_visit_detail"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "synthea://models/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "unique_key": "visit_detail_id", "materialized": "incremental", "enabled": false}, "created_at": 1666873494}, {"raw_sql": "{{ config (\n    unique_key = 'note_id',\n    materialized='incremental',\n    enabled=false\n) }}\n\n\nwith patients as (\n\n    select id,\n           gender\n    from {{ source('iomed_raw','patients') }}\n\n),\nconditions_pivot as (\n\n    select patient,\n           encounter,\n           case when code = '72892002' then true else false end as pregnant, -- Normal pregnancy\n           case when code = '49727002' then true else false end as cough, -- Cough (finding)\n           case when code = '386661006' then true else false end as fever, -- Fever (finding)\n           case when code = '44054006' then true else false end as diabetes, -- Diabetes\n           case when code = '59621000' then true else false end as hypertension, -- Hypertension\n           case when code = '399211009' then true else false end as infarction_history -- History of myocardial infarction (situation\n    from {{ ref('conditions') }}\n\n),\nobservations_pivot as (\n\n    select patient,\n           encounter,\n           case when value = 'Current every day smoker' then true else false end as smoker\n    from {{ ref('observations') }}\n\n),\nencounter as (\n\n    select id, patient, start\n    from {{ ref('encounters') }}\n\n),\nfinal_visit_ids  AS (\n\n    select *\n    from {{ ref('final_visit_ids') }}\n\n),\nfinal_table as (\n\n    select distinct on (e.id) e.id as episode_id,\n       p.id as patient_id,\n       e.start as note_date,\n       p.gender as gender,\n       c.pregnant as pregnant,\n       c.cough as cough,\n       c.fever as fever,\n       c.diabetes as diabetes,\n       c.hypertension as hypertension,\n       c.infarction_history as infarction_history,\n       o.smoker as smoker,\n       floor(random() * 3 + 1)::int as note_type\n    from encounter e\n    inner join patients p on e.patient = p.id\n    inner join conditions_pivot c on e.id = c.encounter\n    inner join observations_pivot o on e.id = o.encounter\n\n)\n\nselect\n     {{ create_id_from_str(\"concat('note_', episode_id::text)\") }} as note_id,\n     {{ create_id_from_str(\"patient_id::text\") }} as person_id,\n     NULL::bigint AS note_event_id,\n     1147070::int AS note_event_field_concept_id, -- visit_occurrence.visit_occurrence_id\n     note_date::date AS note_date,\n     note_date::timestamp AS note_datetime,\n     44814639::int AS note_type_concept_id, -- Inpatient note\n     42527620::int AS note_class_concept_id, -- Physician Hospital Note\n     NULL::varchar(250) AS note_title,\n     {{ generate_note_text('smoker', 'gender', 'pregnant', 'cough', 'fever', 'diabetes', 'hypertension', 'infarction_history', 'note_type') }} AS note_text,\n     32678::int AS encoding_concept_id, -- UTF-8\n     4182511::int AS language_concept_id, -- Spanish\n     NULL::bigint AS provider_id,\n     fv.visit_occurrence_id_new AS visit_occurrence_id,\n     NULL::bigint AS visit_detail_id,\n     NULL::varchar(50) AS note_source_value,\n     {{ var('shard_id') }} AS shard_id\nfrom final_table f\njoin final_visit_ids fv\n    on fv.encounter_id = f.episode_id", "resource_type": "model", "depends_on": {"macros": ["macro.synthea.create_id_from_str", "macro.synthea.generate_note_text", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "note_id", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "note_complex"], "unique_id": "model.synthea.note_complex", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/note_complex.sql", "original_file_path": "models/cdm/note_complex.sql", "name": "note_complex", "alias": "note_complex", "checksum": {"name": "sha256", "checksum": "5aef6f084ab00e8f058da38070d2324284552c2beda21afca537a81128b4c3c4"}, "tags": [], "refs": [["conditions"], ["observations"], ["encounters"], ["final_visit_ids"]], "sources": [["iomed_raw", "patients"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "unique_key": "note_id", "materialized": "incremental", "enabled": false}, "created_at": 1666873494}, {"raw_sql": "{{ config(\n    materialized='incremental',\n    unique_key='cdm_source_name',\n\tenabled=false\n  )\n}}\n\nselect *\nfrom {{ ref('stg_cdm_source') }}", "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "cdm_source_name", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm", "fqn": ["synthea", "cdm", "cdm_source"], "unique_id": "model.synthea.cdm_source", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "cdm/cdm_source.sql", "original_file_path": "models/cdm/cdm_source.sql", "name": "cdm_source", "alias": "cdm_source", "checksum": {"name": "sha256", "checksum": "c062863e3608d8edc699a017da8651f25aa965c2e77cf28efce3627834faa8c8"}, "tags": [], "refs": [["stg_cdm_source"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "synthea://models/schema.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"], "materialized": "incremental", "unique_key": "cdm_source_name", "enabled": false}, "created_at": 1666873494}, {"raw_sql": "-- stg_visit_detail\n\n{{ config(\n    materialized='table_unlogged',\n\tenabled=false\n)\n}}\n\nselect\n    visit_occurrence_id as visit_detail_id,         -- NOT NULL\n    person_id as person_id,                         -- NOT NULL\n    0::int as visit_detail_concept_id,              -- NOT NULL\n    visit_start_date as visit_detail_start_date,          -- NOT NULL\n    visit_start_datetime as visit_detail_start_datetime,\n    visit_end_date visit_detail_end_date,            -- NOT NULL\n    visit_end_datetime as visit_detail_end_datetime,\n    0::int as visit_detail_type_concept_id,         -- NOT NULL\n    null::int as provider_id,\n    0::int as care_site_id,\n    null::varchar(50) as visit_detail_source_value,\n    0::int as visit_detail_source_concept_id,\n    0::int as admitted_from_concept_id,\n    null::varchar(50) as admitted_from_source_value,\n    null::varchar(50) as discharged_to_source_value,\n    0::int as discharged_to_concept_id,\n    null::int as preceding_visit_detail_id,\n    null::int as parent_visit_detail_id,\n    visit_occurrence_id as visit_occurrence_id                   -- NOT NULL\nfrom {{ ref('stg_visit_occurrence') }}", "resource_type": "model", "depends_on": {"macros": ["macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "cdm_dbt", "database": null, "tags": [], "meta": {}, "materialized": "table_unlogged", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}, {"sql": "GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "transaction": true, "index": null}, {"sql": "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "cdm_dbt", "fqn": ["synthea", "derived", "stg_visit_detail"], "unique_id": "model.synthea.stg_visit_detail", "package_name": "synthea", "root_path": "/Users/alberto/Projects/TEST/synthea-etl-pipeline/synthea-etl", "path": "derived/stg_visit_detail.sql", "original_file_path": "models/derived/stg_visit_detail.sql", "name": "stg_visit_detail", "alias": "stg_visit_detail", "checksum": {"name": "sha256", "checksum": "6a644fedb5af84100062b86ad5557f0818e7cbb84c4bc16a666290d2816bd5c4"}, "tags": [], "refs": [["stg_visit_occurrence"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["GRANT ALL ON {{ this }} TO dataengineering_stolon_vault", "ALTER TABLE {{ this }} OWNER TO dataengineering_stolon_vault"], "schema": "cdm_dbt", "materialized": "table_unlogged", "enabled": false}, "created_at": 1666873494}, {"raw_sql": "with events as (\n\n    select * from {{ref('stg_dbt_audit_log')}}\n\n),\n\naggregated as (\n\n    select\n\n        invocation_id,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'run started' then event_timestamp\n            end) as deployment_started_at,\n\n        min(case\n            when event_name = 'run completed' then event_timestamp\n            end) as deployment_completed_at,\n\n        count(distinct case\n            when event_name like '%model%' then event_model\n            end) as models_deployed\n\n    from events\n\n    {{ dbt_utils.group_by(n=3) }}\n\n)\n\nselect * from aggregated", "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "meta", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "meta", "fqn": ["logging", "bigquery", "stg_dbt_deployments"], "unique_id": "model.logging.stg_dbt_deployments", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "bigquery/stg_dbt_deployments.sql", "original_file_path": "models/bigquery/stg_dbt_deployments.sql", "name": "stg_dbt_deployments", "alias": "stg_dbt_deployments", "checksum": {"name": "sha256", "checksum": "dd9808de59dab792ee5f753091f917659ada0e3c48f68bed10d1c8a922b216cf"}, "tags": [], "refs": [["stg_dbt_audit_log"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "meta", "enabled": "{{ target.type == \"bigquery\" | as_bool }}", "pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"]}, "created_at": 1666873495}, {"raw_sql": "with events as (\n\n    select * from {{ ref('stg_dbt_audit_log') }}\n\n),\n\naggregated as (\n\n    select\n\n        {{ dbt_utils.surrogate_key([\n            'event_model',\n            'invocation_id'\n        ]) }} as model_deployment_id,\n\n        invocation_id,\n        event_model as model,\n        event_schema as schema,\n        event_target as target,\n        event_is_full_refresh as is_full_refresh,\n\n        min(case\n            when event_name = 'model deployment started' then event_timestamp\n        end) as deployment_started_at,\n\n        min(case\n            when event_name = 'model deployment completed' then event_timestamp\n        end) as deployment_completed_at\n\n    from events\n\n    where event_name like '%model%'\n\n    {{ dbt_utils.group_by(n=6) }}\n\n)\n\nselect * from aggregated", "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key", "macro.dbt_utils.group_by", "macro.logging.log_model_start_event", "macro.logging.log_model_end_event"], "nodes": []}, "config": {"enabled": false, "alias": null, "schema": "meta", "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ logging.log_model_end_event() }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "{{ logging.log_model_start_event() }}", "transaction": true, "index": null}]}, "database": "iomed", "schema": "meta", "fqn": ["logging", "bigquery", "stg_dbt_model_deployments"], "unique_id": "model.logging.stg_dbt_model_deployments", "package_name": "logging", "root_path": "/tmp/packages/logging", "path": "bigquery/stg_dbt_model_deployments.sql", "original_file_path": "models/bigquery/stg_dbt_model_deployments.sql", "name": "stg_dbt_model_deployments", "alias": "stg_dbt_model_deployments", "checksum": {"name": "sha256", "checksum": "13b5aa5d104d233d4c114847477c4ffdd9b2bedc5b1555a8b5a39db38b6302cc"}, "tags": [], "refs": [["stg_dbt_audit_log"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"schema": "meta", "enabled": "{{ target.type == \"bigquery\" | as_bool }}", "pre-hook": "{{ logging.log_model_start_event() }}", "post-hook": ["{{ logging.log_model_end_event() }}"]}, "created_at": 1666873495}], "parent_map": {"model.synthea.measurement": ["model.synthea.stg_measurement", "model.synthea.visit_occurrence"], "model.synthea.location": ["model.synthea.stg_location"], "model.synthea.provider": ["model.synthea.stg_provider"], "model.synthea.death": ["model.synthea.stg_death"], "model.synthea.care_site": ["model.synthea.stg_care_site"], "model.synthea.drug_exposure": ["model.synthea.stg_drug_exposure", "model.synthea.visit_occurrence"], "model.synthea.observation_period": ["model.synthea.stg_observation_period"], "model.synthea.observation": ["model.synthea.stg_observation", "model.synthea.visit_occurrence"], "model.synthea.condition_era": ["model.synthea.stg_condition_era"], "model.synthea.note": ["model.synthea.stg_note", "model.synthea.visit_occurrence"], "model.synthea.procedure_occurrence": ["model.synthea.stg_procedure_occurrence", "model.synthea.visit_occurrence"], "model.synthea.condition_occurrence": ["model.synthea.stg_condition_occurrence", "model.synthea.visit_occurrence"], "model.synthea.person": ["model.synthea.stg_person"], "model.synthea.visit_occurrence": ["model.synthea.stg_visit_occurrence"], "model.synthea.drug_era": ["model.synthea.stg_drug_era"], "model.synthea.stg_note": ["model.synthea.final_visit_ids", "source.synthea.iomed_raw.conditions", "source.synthea.iomed_raw.encounters", "source.synthea.iomed_raw.observations", "source.synthea.iomed_raw.patients"], "model.synthea.stg_provider": [], "model.synthea.stg_measurement": ["model.synthea.final_visit_ids", "model.synthea.person", "model.synthea.source_to_source_vocab_map", "model.synthea.source_to_standard_vocab_map", "source.synthea.iomed_raw.observations", "source.synthea.iomed_raw.procedures"], "model.synthea.stg_care_site": [], "model.synthea.stg_death": ["model.synthea.person", "source.synthea.iomed_raw.patients"], "model.synthea.stg_condition_era": ["model.synthea.condition_occurrence"], "model.synthea.stg_location": [], "model.synthea.stg_drug_exposure": ["model.synthea.final_visit_ids", "model.synthea.person", "model.synthea.source_to_source_vocab_map", "model.synthea.source_to_standard_vocab_map", "source.synthea.iomed_raw.immunizations", "source.synthea.iomed_raw.medications"], "model.synthea.stg_observation": ["model.synthea.final_visit_ids", "model.synthea.person", "model.synthea.source_to_source_vocab_map", "model.synthea.source_to_standard_vocab_map", "source.synthea.iomed_raw.allergies", "source.synthea.iomed_raw.conditions"], "model.synthea.stg_condition_occurrence": ["model.synthea.final_visit_ids", "model.synthea.person", "model.synthea.source_to_source_vocab_map", "model.synthea.source_to_standard_vocab_map", "source.synthea.iomed_raw.conditions"], "model.synthea.stg_visit_occurrence": ["model.synthea.all_visits", "model.synthea.final_visit_ids", "model.synthea.person"], "model.synthea.stg_cdm_source": ["source.synthea.iomed.vocabulary"], "model.synthea.stg_drug_era": ["model.synthea.drug_exposure", "source.synthea.iomed.concept", "source.synthea.iomed.concept_ancestor"], "model.synthea.stg_observation_period": ["model.synthea.person", "source.synthea.iomed_raw.encounters"], "model.synthea.stg_person": ["source.synthea.iomed_raw.patients"], "model.synthea.stg_procedure_occurrence": ["model.synthea.final_visit_ids", "model.synthea.person", "model.synthea.source_to_source_vocab_map", "model.synthea.source_to_standard_vocab_map", "source.synthea.iomed_raw.procedures"], "model.synthea.source_to_source_vocab_map": ["source.synthea.iomed.concept", "source.synthea.iomed.source_to_concept_map"], "model.synthea.assign_all_visit_ids": ["model.synthea.all_visits", "source.synthea.iomed_raw.encounters"], "model.synthea.final_visit_ids": ["model.synthea.assign_all_visit_ids"], "model.synthea.all_visits": ["model.synthea.person", "source.synthea.iomed_raw.encounters"], "model.synthea.source_to_standard_vocab_map": ["source.synthea.iomed.concept", "source.synthea.iomed.concept_relationship", "source.synthea.iomed.source_to_concept_map"], "seed.synthea.medications": [], "seed.synthea.allergies": [], "seed.synthea.procedures": [], "seed.synthea.conditions": [], "seed.synthea.encounters": [], "seed.synthea.immunizations": [], "seed.synthea.patients": [], "seed.synthea.observations": [], "operation.synthea.synthea-on-run-start-0": [], "operation.synthea.synthea-on-run-end-0": [], "model.logging.stg_dbt_audit_log": [], "model.logging.stg_dbt_deployments": ["model.logging.stg_dbt_audit_log"], "model.logging.stg_dbt_model_deployments": ["model.logging.stg_dbt_audit_log"], "analysis.logging.models_summary": ["model.logging.stg_dbt_model_deployments"], "analysis.logging.models": ["model.logging.stg_dbt_model_deployments"], "analysis.logging.deployments": ["model.logging.stg_dbt_deployments"], "analysis.logging.models_out_of_sla": ["model.logging.stg_dbt_model_deployments"], "operation.logging.logging-on-run-start-0": [], "operation.logging.logging-on-run-start-1": [], "operation.logging.logging-on-run-start-2": [], "operation.logging.logging-on-run-end-0": [], "test.synthea.unique_person_person_id.ee18b5e56c": ["model.synthea.person"], "test.synthea.not_null_person_person_id.6f9ab4b4de": ["model.synthea.person"], "test.synthea.not_null_person_gender_concept_id.a1409c1a02": ["model.synthea.person"], "test.synthea.not_null_person_year_of_birth.03ea95e466": ["model.synthea.person"], "test.synthea.not_null_person_race_concept_id.288243421d": ["model.synthea.person"], "test.synthea.not_null_person_ethnicity_concept_id.e352f804af": ["model.synthea.person"], "test.synthea.not_null_person_gender_source_concept_id.ee915a8453": ["model.synthea.person"], "test.synthea.not_null_person_ethnicity_source_concept_id.99867328ac": ["model.synthea.person"], "source.synthea.iomed_raw.allergies": [], "source.synthea.iomed_raw.conditions": [], "source.synthea.iomed_raw.immunizations": [], "source.synthea.iomed_raw.encounters": [], "source.synthea.iomed_raw.medications": [], "source.synthea.iomed_raw.observations": [], "source.synthea.iomed_raw.procedures": [], "source.synthea.iomed_raw.patients": [], "source.synthea.iomed.vocabulary": [], "source.synthea.iomed.concept": [], "source.synthea.iomed.concept_relationship": [], "source.synthea.iomed.concept_ancestor": [], "source.synthea.iomed.concept_synonym": [], "source.synthea.iomed.concept_class": [], "source.synthea.iomed.relationship": [], "source.synthea.iomed.domain": [], "source.synthea.iomed.drug_strength": [], "source.synthea.iomed.source_to_concept_map": []}, "child_map": {"model.synthea.measurement": [], "model.synthea.location": [], "model.synthea.provider": [], "model.synthea.death": [], "model.synthea.care_site": [], "model.synthea.drug_exposure": ["model.synthea.stg_drug_era"], "model.synthea.observation_period": [], "model.synthea.observation": [], "model.synthea.condition_era": [], "model.synthea.note": [], "model.synthea.procedure_occurrence": [], "model.synthea.condition_occurrence": ["model.synthea.stg_condition_era"], "model.synthea.person": ["model.synthea.all_visits", "model.synthea.stg_condition_occurrence", "model.synthea.stg_death", "model.synthea.stg_drug_exposure", "model.synthea.stg_measurement", "model.synthea.stg_observation", "model.synthea.stg_observation_period", "model.synthea.stg_procedure_occurrence", "model.synthea.stg_visit_occurrence", "test.synthea.not_null_person_ethnicity_concept_id.e352f804af", "test.synthea.not_null_person_ethnicity_source_concept_id.99867328ac", "test.synthea.not_null_person_gender_concept_id.a1409c1a02", "test.synthea.not_null_person_gender_source_concept_id.ee915a8453", "test.synthea.not_null_person_person_id.6f9ab4b4de", "test.synthea.not_null_person_race_concept_id.288243421d", "test.synthea.not_null_person_year_of_birth.03ea95e466", "test.synthea.unique_person_person_id.ee18b5e56c"], "model.synthea.visit_occurrence": ["model.synthea.condition_occurrence", "model.synthea.drug_exposure", "model.synthea.measurement", "model.synthea.note", "model.synthea.observation", "model.synthea.procedure_occurrence"], "model.synthea.drug_era": [], "model.synthea.stg_note": ["model.synthea.note"], "model.synthea.stg_provider": ["model.synthea.provider"], "model.synthea.stg_measurement": ["model.synthea.measurement"], "model.synthea.stg_care_site": ["model.synthea.care_site"], "model.synthea.stg_death": ["model.synthea.death"], "model.synthea.stg_condition_era": ["model.synthea.condition_era"], "model.synthea.stg_location": ["model.synthea.location"], "model.synthea.stg_drug_exposure": ["model.synthea.drug_exposure"], "model.synthea.stg_observation": ["model.synthea.observation"], "model.synthea.stg_condition_occurrence": ["model.synthea.condition_occurrence"], "model.synthea.stg_visit_occurrence": ["model.synthea.visit_occurrence"], "model.synthea.stg_cdm_source": [], "model.synthea.stg_drug_era": ["model.synthea.drug_era"], "model.synthea.stg_observation_period": ["model.synthea.observation_period"], "model.synthea.stg_person": ["model.synthea.person"], "model.synthea.stg_procedure_occurrence": ["model.synthea.procedure_occurrence"], "model.synthea.source_to_source_vocab_map": ["model.synthea.stg_condition_occurrence", "model.synthea.stg_drug_exposure", "model.synthea.stg_measurement", "model.synthea.stg_observation", "model.synthea.stg_procedure_occurrence"], "model.synthea.assign_all_visit_ids": ["model.synthea.final_visit_ids"], "model.synthea.final_visit_ids": ["model.synthea.stg_condition_occurrence", "model.synthea.stg_drug_exposure", "model.synthea.stg_measurement", "model.synthea.stg_note", "model.synthea.stg_observation", "model.synthea.stg_procedure_occurrence", "model.synthea.stg_visit_occurrence"], "model.synthea.all_visits": ["model.synthea.assign_all_visit_ids", "model.synthea.stg_visit_occurrence"], "model.synthea.source_to_standard_vocab_map": ["model.synthea.stg_condition_occurrence", "model.synthea.stg_drug_exposure", "model.synthea.stg_measurement", "model.synthea.stg_observation", "model.synthea.stg_procedure_occurrence"], "seed.synthea.medications": [], "seed.synthea.allergies": [], "seed.synthea.procedures": [], "seed.synthea.conditions": [], "seed.synthea.encounters": [], "seed.synthea.immunizations": [], "seed.synthea.patients": [], "seed.synthea.observations": [], "operation.synthea.synthea-on-run-start-0": [], "operation.synthea.synthea-on-run-end-0": [], "model.logging.stg_dbt_audit_log": ["model.logging.stg_dbt_deployments", "model.logging.stg_dbt_model_deployments"], "model.logging.stg_dbt_deployments": ["analysis.logging.deployments"], "model.logging.stg_dbt_model_deployments": ["analysis.logging.models", "analysis.logging.models_out_of_sla", "analysis.logging.models_summary"], "analysis.logging.models_summary": [], "analysis.logging.models": [], "analysis.logging.deployments": [], "analysis.logging.models_out_of_sla": [], "operation.logging.logging-on-run-start-0": [], "operation.logging.logging-on-run-start-1": [], "operation.logging.logging-on-run-start-2": [], "operation.logging.logging-on-run-end-0": [], "test.synthea.unique_person_person_id.ee18b5e56c": [], "test.synthea.not_null_person_person_id.6f9ab4b4de": [], "test.synthea.not_null_person_gender_concept_id.a1409c1a02": [], "test.synthea.not_null_person_year_of_birth.03ea95e466": [], "test.synthea.not_null_person_race_concept_id.288243421d": [], "test.synthea.not_null_person_ethnicity_concept_id.e352f804af": [], "test.synthea.not_null_person_gender_source_concept_id.ee915a8453": [], "test.synthea.not_null_person_ethnicity_source_concept_id.99867328ac": [], "source.synthea.iomed_raw.allergies": ["model.synthea.stg_observation"], "source.synthea.iomed_raw.conditions": ["model.synthea.stg_condition_occurrence", "model.synthea.stg_note", "model.synthea.stg_observation"], "source.synthea.iomed_raw.immunizations": ["model.synthea.stg_drug_exposure"], "source.synthea.iomed_raw.encounters": ["model.synthea.all_visits", "model.synthea.assign_all_visit_ids", "model.synthea.stg_note", "model.synthea.stg_observation_period"], "source.synthea.iomed_raw.medications": ["model.synthea.stg_drug_exposure"], "source.synthea.iomed_raw.observations": ["model.synthea.stg_measurement", "model.synthea.stg_note"], "source.synthea.iomed_raw.procedures": ["model.synthea.stg_measurement", "model.synthea.stg_procedure_occurrence"], "source.synthea.iomed_raw.patients": ["model.synthea.stg_death", "model.synthea.stg_note", "model.synthea.stg_person"], "source.synthea.iomed.vocabulary": ["model.synthea.stg_cdm_source"], "source.synthea.iomed.concept": ["model.synthea.source_to_source_vocab_map", "model.synthea.source_to_standard_vocab_map", "model.synthea.stg_drug_era"], "source.synthea.iomed.concept_relationship": ["model.synthea.source_to_standard_vocab_map"], "source.synthea.iomed.concept_ancestor": ["model.synthea.stg_drug_era"], "source.synthea.iomed.concept_synonym": [], "source.synthea.iomed.concept_class": [], "source.synthea.iomed.relationship": [], "source.synthea.iomed.domain": [], "source.synthea.iomed.drug_strength": [], "source.synthea.iomed.source_to_concept_map": ["model.synthea.source_to_source_vocab_map", "model.synthea.source_to_standard_vocab_map"]}}